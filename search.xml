<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot</title>
    <url>/2024/03/03/SpringBoot/</url>
    <content><![CDATA[<h1 id="springboot的第一个helloword"><a href="#springboot的第一个helloword" class="headerlink" title="springboot的第一个helloword"></a>springboot的第一个helloword</h1><h2 id="快速生成一个项目"><a href="#快速生成一个项目" class="headerlink" title="快速生成一个项目"></a>快速生成一个项目</h2><h3 id="可以在spring官网上用以下方式"><a href="#可以在spring官网上用以下方式" class="headerlink" title="可以在spring官网上用以下方式"></a>可以在spring官网上用以下方式</h3><p><img src="/assets/1698196929347.png" alt="69819692934" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>这里添加了<strong>springweb</strong>的依赖，生成之后文件夹会有以下：</p>
<p><img src="/assets/1698196955000.png" alt="69819695500" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="可以直接在idea中生成一个springboot项目（推荐）"><a href="#可以直接在idea中生成一个springboot项目（推荐）" class="headerlink" title="可以直接在idea中生成一个springboot项目（推荐）"></a>可以直接在idea中生成一个springboot项目（推荐）</h3><p> <img src="/assets/1698197100320.png" alt="69819710032" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698197150100.png" alt="69819715010" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>启动之后会显示以下<strong>（成功）</strong>：</p>
<p><img src="/assets/1698197193501.png" alt="69819719350" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>浏览器访问本地8080：</p>
<p><img src="/assets/1698197213950.png" alt="69819721395" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="启动后下面有一行报错"><a href="#启动后下面有一行报错" class="headerlink" title="启动后下面有一行报错"></a>启动后下面有一行报错</h3><blockquote>
<p>报错显示：An incompatible version [1.2.23] of the Apache Tomcat Native library is installed</p>
<p>原因：似乎是因为tomcat的版本问题</p>
<p>解决方案参考：<a href="https://blog.csdn.net/rej177/article/details/128223813">https://blog.csdn.net/rej177/article/details/128223813</a></p>
</blockquote>
<p> <img src="/assets/1698197394956.png" alt="69819739495" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="编写hellowrod"><a href="#编写hellowrod" class="headerlink" title="编写hellowrod"></a>编写hellowrod</h3><p><img src="/assets/1698197446208.png" alt="69819744620" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698197454255.png" alt="69819745425" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>回顾一下spring里的@RequesMapping(&#x2F;hello)，表示当前用户<strong>访问&#x2F;hello路径</strong>的时候将会调用它所注释的方法。</p>
<p>其中它可以被更具体的注释代替，如下：</p>
<p>@GetMapping()表示处理get请求</p>
<p>@PostMapping()表示处理post请求</p>
<p>@PutMapping()表示处理put请求</p>
<p>@DeleteMapping()表示处理delete请求</p>
</blockquote>
<h2 id="进行项目的打包"><a href="#进行项目的打包" class="headerlink" title="进行项目的打包"></a>进行项目的打包</h2><p> <img src="/assets/1698197551373.png" alt="69819755137" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>原先有遇见过报错，后面找到原因是因为配置文件中有中文，出现了<strong>乱码</strong>，解决方案如下（但是后面推荐用yaml文件作为配置文件，比较方便)</p>
</blockquote>
<p><img src="/assets/1698197741285.png" alt="69819774128" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>打包好之后可以看到一个jar文件：</p>
<p> <img src="/assets/1698198251755.png" alt="69819825175" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>打开shell执行以下即可运行（<strong>ctrl+c</strong>停止）：</p>
<p><img src="/assets/1698198276653.png" alt="69819827665" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="更改启动后的画面"><a href="#更改启动后的画面" class="headerlink" title="更改启动后的画面"></a>更改启动后的画面</h2><p> <img src="/assets/1698198408847.png" alt="69819840884" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698198429788.png" alt="69819842978" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>可以在网站上找：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a></p>
<p>修改<strong>resources&#x2F;banner.txt</strong>文件即可</p>
</blockquote>
<h1 id="配置文件的基本使用"><a href="#配置文件的基本使用" class="headerlink" title="配置文件的基本使用"></a>配置文件的基本使用</h1><h2 id="两种配置文件的格式"><a href="#两种配置文件的格式" class="headerlink" title="两种配置文件的格式"></a>两种配置文件的格式</h2><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><p>key&#x3D;value</p>
<h3 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a>application.yaml</h3><p>key:空格 value</p>
<h2 id="yaml的好处"><a href="#yaml的好处" class="headerlink" title="yaml的好处"></a>yaml的好处</h2><p>可以存许多不同类型的数值</p>
<p> <img src="/assets/1698199063469.png" alt="69819906346" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rigthl</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2002</span><span class="string">/11/14</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">study</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">狗崽</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">狗崽</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="使用yaml进行数据注入"><a href="#使用yaml进行数据注入" class="headerlink" title="使用yaml进行数据注入"></a>使用yaml进行数据注入</h2><h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><h4 id="dog"><a href="#dog" class="headerlink" title="dog"></a>dog</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rightl.lab2.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="comment">//@Component的意思是标识一个类为Spring容器管理的组件，会被spring自动扫描并且注册为bean</span></span><br><span class="line"><span class="comment">//为了更好的区别还有以下：</span></span><br><span class="line"><span class="comment">//@Service: 用于标识服务层的组件。</span></span><br><span class="line"><span class="comment">//@Repository: 用于标识数据访问层的组件，通常用于DAO类。</span></span><br><span class="line"><span class="comment">//@Controller: 用于标识控制器层的组件，通常用于Spring MVC中的Controller类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="comment">//    @Value(&quot;狗崽&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    @Value(&quot;2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="person"><a href="#person" class="headerlink" title="person"></a>person</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rightl.lab2.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Integer age, Boolean happy, Date birth, Map&lt;String, Object&gt; maps, List&lt;Object&gt; lists, Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getHappy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHappy</span><span class="params">(Boolean happy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirth</span><span class="params">(Date birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getMaps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getLists</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLists</span><span class="params">(List&lt;Object&gt; lists)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, happy=&quot;</span> + happy +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&quot;, maps=&quot;</span> + maps +</span><br><span class="line">                <span class="string">&quot;, lists=&quot;</span> + lists +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rightl.lab2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rightl.lab2.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> com.rightl.lab2.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lab2ApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">//    @Autowired注解用于自动装配Spring Bean。</span></span><br><span class="line"><span class="comment">//    当一个类中的字段、构造函数或方法被@Autowired注解标记时，Spring容器会自动在容器中查找匹配的Bean，</span></span><br><span class="line"><span class="comment">//    并将其注入到标记了@Autowired的地方。</span></span><br><span class="line"><span class="comment">//    @Qualifier注解与@Autowired一起使用，用于指定具体的Bean名称，以解决多个同类型的Bean存在时的歧义性问题。</span></span><br><span class="line"><span class="comment">//    如果一个接口有多个实现类，或者一个类有多个子类，通过@Qualifier可以明确指定要注入的Bean。</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(dog);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Dog&#123;name=&#x27;狗崽&#x27;, age=&#x27;2&#x27;&#125;</span><br><span class="line">Person&#123;name=&#x27;rigthl&#x27;, age=21, happy=true, birth=Thu Nov 14 00:00:00 CST 2002, maps=&#123;k1=v1, k2=v2&#125;, lists=[study, java, python], dog=Dog&#123;name=&#x27;狗崽&#x27;, age=&#x27;2&#x27;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用properties进行数据注入"><a href="#使用properties进行数据注入" class="headerlink" title="使用properties进行数据注入"></a>使用properties进行数据注入</h2><p>（不推荐，麻烦）</p>
<p> <img src="/assets/1698199256293.png" alt="69819925629" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="配置文件的其他注意事项"><a href="#配置文件的其他注意事项" class="headerlink" title="配置文件的其他注意事项"></a>配置文件的其他注意事项</h2><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p> <img src="/assets/1698289890102.png" alt="69828989010" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>可以写在以上的四个位置，有<strong>优先级</strong>：</p>
<ul>
<li>file:.&#x2F;config&#x2F;</li>
<li>file:.&#x2F;</li>
<li>classpath:&#x2F;config&#x2F;</li>
<li>classpath:&#x2F;</li>
</ul>
<h3 id="yaml文件可以使用—用来分割不同的环境配置"><a href="#yaml文件可以使用—用来分割不同的环境配置" class="headerlink" title="yaml文件可以使用—用来分割不同的环境配置"></a>yaml文件可以使用—用来分割不同的环境配置</h3><blockquote>
<p>默认最后一个优先级最高(此时的端口号是8081)</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果给加上以下代码(给配置文件起个名字，新版本跟之前的不一样)，端口就是8080</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">config:</span></span><br><span class="line">		<span class="attr">activate:</span></span><br><span class="line">			<span class="attr">on-profile:</span> <span class="string">tests</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用以下代码，用来调用其想要的配置文件,端口就是8081</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">tests</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">tests</span></span><br></pre></td></tr></table></figure>

<h1 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h1><ul>
<li>springboot启动会加载大量的自动配置类</li>
<li>我们看需要的功能有没有在springboot中默认写好的自动配置类中</li>
<li>看自动配置类中到底配置了哪些组件</li>
<li>给容器自动配置类添加组件的时候，会从properties类中获取某些属性，在配置文件中指定这些属性的值：<ul>
<li>xxxAutoConfigurartion:自动配置类</li>
<li>xxxProperties:封装配置文件中相关属性</li>
</ul>
</li>
</ul>
<p>可以在yaml文件中写以下，运行的时候可以看到哪些自动配置类<strong>是否生效</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h1 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h1><h2 id="webjars"><a href="#webjars" class="headerlink" title="webjars"></a>webjars</h2><blockquote>
<p>网址：<a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
<p>可以在里面找到想要的，例如我要jquery的maven</p>
</blockquote>
<p> <img src="/assets/1698291489338.png" alt="69829148933" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>那么在依赖里面加入上面那段即可</p>
<h2 id="静态资源默认的位置"><a href="#静态资源默认的位置" class="headerlink" title="静态资源默认的位置"></a>静态资源默认的位置</h2><ul>
<li><p>webjars</p>
<p>访问：locahost:8080&#x2F;webjars&#x2F;</p>
</li>
</ul>
<p> <img src="/assets/1698291651596.png" alt="69829165159" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>pubilc</li>
<li>static</li>
<li>resources</li>
</ul>
<p> <img src="/assets/1698291725996.png" alt="69829172599" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​	访问：localhost:&#x2F;8080&#x2F;</p>
<p> <img src="/assets/1698291824944.png" alt="69829182494" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>resource&gt;static（默认）&gt;public</p>
<blockquote>
<p>对于静态资源的位置也可以在yaml配置文件中进行修改，但是一般不建议修改！</p>
</blockquote>
<h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p>这里把首页直接放在static中，并且命名为index.html，在浏览器中直接访问8080即可</p>
<blockquote>
<p>idea中，如果想要快速把html格式生成，使用快捷键**!+tab**</p>
</blockquote>
<p> <img src="/assets/1698292122038.png" alt="69829212203" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="ico"><a href="#ico" class="headerlink" title="ico"></a>ico</h2><blockquote>
<p>截至现在暂时最新的使用方法是直接讲ico文件命名为favicon，放入static中即可，springboot会自动识别并且用作网站图标。</p>
<p>其他方式也有：</p>
<p>如果你放在了不同的路径，在yaml文件中配置一下即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">mvc:</span></span><br><span class="line">		<span class="attr">favicon:</span></span><br><span class="line">			<span class="attr">static-path-pattern:</span> <span class="string">/path/xxxxx</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/assets/1698292427172.png" alt="69829242717" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698292449293.png" alt="69829244929" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2024/03/25/docker/</url>
    <content><![CDATA[<h1 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h1><h2 id="Docker理念"><a href="#Docker理念" class="headerlink" title="Docker理念"></a>Docker理念</h2><p>解决了<strong>运行环境</strong>和<strong>配置</strong>问题的软件容器，方便做持续集成并有助于<strong>整体发布</strong>的容器虚拟化技术。</p>
<h2 id="Docker与传统虚拟机的之前的区别"><a href="#Docker与传统虚拟机的之前的区别" class="headerlink" title="Docker与传统虚拟机的之前的区别"></a>Docker与传统虚拟机的之前的区别</h2><p>Docker容器是在<strong>操作系统层面上</strong>实现虚拟化，直接服用本地主机的操作系统；而传统虚拟机则是在<strong>硬件层面</strong>实现虚拟化。两者相比，前者启动<strong>速度更快</strong>，<strong>占用体积小</strong>。</p>
<ul>
<li>传统虚拟机技术是虚拟出一套硬件之后，在其运行一个完整的操作系统，在该系统上再运行所需的应用进程。</li>
<li>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且没有进行硬件虚拟。因此更加轻便。</li>
<li>每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会互相影响，能区分计算资源。</li>
</ul>
<h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><ul>
<li>镜像</li>
<li>容器</li>
<li>仓库</li>
</ul>
<h1 id="下载Docker"><a href="#下载Docker" class="headerlink" title="下载Docker"></a>下载Docker</h1><blockquote>
<p>我是在centos7下安装的，其Docker下载地址如下：</p>
<p>[<strong><a href="https://docs.docker.com/get-docker/">https://docs.docker.com/get-docker/</a></strong></p>
<p>centos教程如下：</p>
<p>[<strong><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></strong></p>
<p>注意：作者的下载的时候是在2024&#x2F;3，最新下载教程或许有出入，最新最好跟官网教程相同步~</p>
</blockquote>
<h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br></pre></td></tr></table></figure>

<h2 id="安装gcc-c"><a href="#安装gcc-c" class="headerlink" title="安装gcc-c++"></a>安装gcc-c++</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc- c++</span><br></pre></td></tr></table></figure>

<h2 id="安装yum-utils软件包"><a href="#安装yum-utils软件包" class="headerlink" title="安装yum-utils软件包"></a>安装yum-utils软件包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h2 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h2 id="软件包更新"><a href="#软件包更新" class="headerlink" title="软件包更新"></a>软件包更新</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<h2 id="安装docker引擎、containerd-和-Docker-Compose"><a href="#安装docker引擎、containerd-和-Docker-Compose" class="headerlink" title="安装docker引擎、containerd 和 Docker Compose"></a>安装docker引擎、containerd 和 Docker Compose</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">re -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h2><ul>
<li><p>启动docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>看docker摘要信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><ul>
<li><p>列出本地主机上的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker iamges</span><br><span class="line">#包含历史</span><br><span class="line">docker iamges -a</span><br><span class="line">#只显示id</span><br><span class="line">docker iamges -q</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询某个镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取某个镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看镜像&#x2F;容器&#x2F;数据卷所占的空间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi xxx(名字或者id)</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>docker虚悬镜像：</p>
<p>仓库名、标签都是none的镜像</p>
<p>其查看命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker iamge ls -f dangling=true</span><br></pre></td></tr></table></figure>

<p>删除命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker iamge prune</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><ul>
<li><p>新建+启动容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run[options] iamge[commamd]</span><br><span class="line">#options说明：</span><br><span class="line">--name=&quot;容器新名字&quot;</span><br><span class="line">-d:后台运行</span><br><span class="line">-i:交互模式运行，通常与-t一起</span><br><span class="line">-t:为容器重新分配一个伪输出终端</span><br><span class="line">-P：随机端口映射</span><br><span class="line">-p:指定端口映射</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出正在运行的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps[options]</span><br><span class="line">#options说明：</span><br><span class="line">-a:当前正在运行+历史运行过的</span><br><span class="line">-l:最近创建的</span><br><span class="line">-n:最近n个</span><br><span class="line">-q:静默模式，只显示编号</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#不启动新的进程，用exit退出导致容器停止</span><br><span class="line">docker attach</span><br><span class="line">#推荐，启动新的进程。不会导致容器停止</span><br><span class="line">docker exec</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#run进去，exit退出，容器停止</span><br><span class="line">exit</span><br><span class="line">#run进去，ctrl+p+q退出，容器不停止</span><br><span class="line">ctrl+p+q</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动已经停止的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器id或者名字</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop</span><br></pre></td></tr></table></figure>
</li>
<li><p>强制停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker kill</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看容器logs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看容器内部细节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>从容器内拷贝文件到主机上（容器-&gt;主机），也就是复制容器里面的东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入导出容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导出</span><br><span class="line">docker export 容器id &gt; 文件名.tar</span><br><span class="line">#导入</span><br><span class="line">cat 文件名.tar |docker import -镜像用户:镜像版本号</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交容器副本使之成为一个新的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 要创建的目标镜像名:版本号 </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="私用镜像仓库"><a href="#私用镜像仓库" class="headerlink" title="私用镜像仓库"></a>私用镜像仓库</h2><ul>
<li><p>下载registry镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 5000:5000 -v 宿主机文件目录地址:容器中文件目录地址 --privileged=true registry</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看该私服仓库里有哪些镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -XGET http://ip地址:5000/v2/_catalog</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用tat命令对镜像进行修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag 要修改的镜像名字 ip地址:5000/新镜像名字:版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件使之支持http</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;ip地址:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将修改好的镜像推送到私服库里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push id地址:5000/镜像名字:版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们可以直接在私服库里拉取我们推送进去的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull id地址:5000/镜像名字:版本</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v 宿主机文件目录地址:容器中文件目录地址 --privileged=true</span><br></pre></td></tr></table></figure>

<p><strong>–privileged&#x3D;true</strong>命令，扩大容器的权限解决挂载目录没有<strong>权限</strong>的问题。</p>
<p>卷就是目录或者文件，存在于一个或者多个容器中。卷的设计目的就是数据的<strong>持久化</strong>，完全<strong>独立于容器的生命周期</strong>，因此docker<strong>不会在容器删除时删除其挂载的数据卷</strong>。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>数据卷可以在容器之间共享或者重用数据</li>
<li>卷中的更改可以直接实时生效</li>
<li>数据卷中的更改不会包含在镜像的更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li><p>如果容器停止了，但是我在宿主机继续在映射文件中做了修改，那么重新开启容器也依旧会有该修改。</p>
</li>
<li><p>在run的时候加-v设置数据卷，设置一次就可以，设置的时候可以设置多个卷。</p>
</li>
<li><p>查看数据卷 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据卷</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume rm 数据卷名称或者id</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>不管是容器中删除该<strong>文件</strong>还是宿主机删除<strong>文件</strong>，都会删除不见。其容器卷的目的不是备份！！主要目的是数据持久化！</p>
<p>但是容器删除了，删除容器之前没有删除容器里的文件，宿主机对应的文件还是会有的！注意两种区别！</p>
</blockquote>
<h1 id="容器的继承共享"><a href="#容器的继承共享" class="headerlink" title="容器的继承共享"></a>容器的继承共享</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --privileged=true --volumes-from 父类容器 --name 新容器名字 镜像名字</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>可以理解为复制了一个容器，但是有点不一样的是，他还继承了数据卷，也就是新建的这个容器中，也可以将文件创建好映射到他们之间。</strong></p>
<p><strong>（谁死了都没事，活了还是可以看到！）</strong></p>
</blockquote>
<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="创建-运行"><a href="#创建-运行" class="headerlink" title="创建+运行"></a>创建+运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name t1 tomcat</span><br></pre></td></tr></table></figure>

<h2 id="404问题"><a href="#404问题" class="headerlink" title="404问题"></a>404问题</h2><blockquote>
<p>发现最新版的tomcat在容器内运行的时候，在网页中访问localhost:8080会报404</p>
</blockquote>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line">#删除webapps</span><br><span class="line">rm -r webapps</span><br><span class="line">#重命名</span><br><span class="line">mv webapps.dist webapps</span><br></pre></td></tr></table></figure>

<blockquote>
<p>也可以直接使用tomcat8，就没有这个问题了~</p>
</blockquote>
<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="需要设置容器卷"><a href="#需要设置容器卷" class="headerlink" title="需要设置容器卷"></a>需要设置容器卷</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --privileged=true -v /rightl/mysql/log:/var/log/mysql -v /rightl/mysql/data:/var/lib/mysql -v /rightl/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql:5.7</span><br></pre></td></tr></table></figure>

<h2 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id /bin/bsah</span><br><span class="line">mysql -u root -p</span><br><span class="line">#可以使用以下命令来查看</span><br><span class="line">show variables like &#x27;character%&#x27;;</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p>因为我已经设置 了数据卷了，所以我直接在我自己宿主机下的&#x2F;rightl&#x2F;mysql&#x2F;conf下更改即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim my.cnf</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置之后记得要重启容器再查看一次哈~</p>
</blockquote>
<h2 id="mysql中数据卷的好处"><a href="#mysql中数据卷的好处" class="headerlink" title="mysql中数据卷的好处"></a>mysql中数据卷的好处</h2><p>因为我做了数据卷，如果容器被删了，但是我宿主机中的这些文件不会删，那么在重创建一个容器的时候，映射也是宿主机的这几个文件，那么我新建的这个mysql容器也会保留住之前删掉的容器里面mysql的数据库所有信息！！</p>
<h2 id="高级篇——主从复制"><a href="#高级篇——主从复制" class="headerlink" title="高级篇——主从复制"></a>高级篇——主从复制</h2><h3 id="run一个主mysql容器"><a href="#run一个主mysql容器" class="headerlink" title="run一个主mysql容器"></a>run一个主mysql容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3307:3306 --name mysql-master -v /mydata/mysql-master/log:/var/log/mysql -v /mydata/mysql-master/data:/var/lib/mysql -v /mydata/mysql-master/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos100 ~]# cd /mydata/mysql-master/conf/</span><br><span class="line">[root@centos100 conf]# vim my.cnf</span><br><span class="line">[root@centos100 conf]# cat my.cnf </span><br><span class="line">[mysqld]</span><br><span class="line">server_id=101</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">binlog_format=mixed</span><br><span class="line">expire_logs_days=7</span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>

<h3 id="重新启动该容器后，创建数据同步用户"><a href="#重新启动该容器后，创建数据同步用户" class="headerlink" title="重新启动该容器后，创建数据同步用户"></a>重新启动该容器后，创建数据同步用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="run一个从mysql容器"><a href="#run一个从mysql容器" class="headerlink" title="run一个从mysql容器"></a>run一个从mysql容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3308:3306 --name mysql-slave -v /mydata/mysql-slave/log:/var/log/mysql -v /mydata/mysql-slave/data:/var/lib/mysql -v /mydata/mysql-slave/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos100 ~]# cd /mydata/mysql-slave/conf/</span><br><span class="line">[root@centos100 conf]# vim my.cnf</span><br><span class="line">[root@centos100 conf]# cat my.cnf </span><br><span class="line">[mysqld]</span><br><span class="line">server_id=102</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">binlog_format=mixed</span><br><span class="line">expire_logs_days=7</span><br><span class="line">slave_skip_errors=1062</span><br><span class="line">relay_log=mall-mysql-relay-bin</span><br><span class="line">log_slave_updates=1</span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure>

<h3 id="进入主mysql"><a href="#进入主mysql" class="headerlink" title="进入主mysql"></a>进入主mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711343789974.png" alt="71134378997" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="进入从mysql"><a href="#进入从mysql" class="headerlink" title="进入从mysql"></a>进入从mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;192.168.22.131&#x27;, MASTER_USER=&#x27;slave&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_PORT=3307, MASTER_LOG_FILE=&#x27;mall-mysql-bin.000001&#x27;, MASTER_LOG_POS=617, MASTER_CONNECT_RETRY=30;</span><br></pre></td></tr></table></figure>

<p>开启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711343862735.png" alt="71134386273" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>验证：主mysql创建的数据库在从mysql可以看到，即成功</p>
</blockquote>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="修改redis的conf配置文件"><a href="#修改redis的conf配置文件" class="headerlink" title="修改redis的conf配置文件"></a>修改redis的conf配置文件</h2><p><img src="/assets/1711343453816.png" alt="71134345381" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="run容器"><a href="#run容器" class="headerlink" title="run容器"></a>run容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis01 --privileged=true -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<h2 id="高级篇——redis集群"><a href="#高级篇——redis集群" class="headerlink" title="高级篇——redis集群"></a>高级篇——redis集群</h2><h3 id="run六个redis容器"><a href="#run六个redis容器" class="headerlink" title="run六个redis容器"></a>run六个redis容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis-node-1 --net host --privileged=true -v /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6381</span><br><span class="line">docker run -d --name redis-node-2 --net host --privileged=true -v /data/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6382</span><br><span class="line">docker run -d --name redis-node-3 --net host --privileged=true -v /data/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6383</span><br><span class="line">docker run -d --name redis-node-4 --net host --privileged=true -v /data/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6384</span><br><span class="line">docker run -d --name redis-node-5 --net host --privileged=true -v /data/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6385</span><br><span class="line">docker run -d --name redis-node-6 --net host --privileged=true -v /data/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6386</span><br></pre></td></tr></table></figure>

<h3 id="进入6381"><a href="#进入6381" class="headerlink" title="进入6381"></a>进入6381</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-node-1 /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 192.168.22.131:6381 192.168.22.131:6382 192.168.22.131:6383 192.168.22.131:6384 192.168.22.131:6385 192.168.22.131:6386 --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>redis集群一共有<strong>16384个槽位</strong>，以上命令会直接平均分配给三个主机</p>
</blockquote>
<p><img src="/assets/1711344273535.png" alt="71134427353" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="存储数据的时候需要-p-端口-c"><a href="#存储数据的时候需要-p-端口-c" class="headerlink" title="存储数据的时候需要-p 端口 -c"></a>存储数据的时候需要-p 端口 -c</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6381 -c</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711344352120.png" alt="71134435212" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>会根据槽的分配，每个存储的数据分配的主redis有所不同。所以可以看到存储的时候，会反复横跳，可能到1也可能到3的redis。</p>
</blockquote>
<h3 id="检测分配"><a href="#检测分配" class="headerlink" title="检测分配"></a>检测分配</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster check 192.168.22.131:6381</span><br></pre></td></tr></table></figure>

<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis-node-7 --net host --privileged=true -v /data/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6387</span><br><span class="line">docker run -d --name redis-node-8 --net host --privileged=true -v /data/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6388</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-node-7 /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.22.131:6387 192.168.22.131:6381</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时已经把7加入进去了，但是check可以发现槽还没有分配！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 192.168.22.131:6381</span><br></pre></td></tr></table></figure>

<p><strong>（16384&#x2F;4&#x3D;4096）</strong></p>
<p><img src="/assets/1711344743921.png" alt="71134474392" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>这里其实不是重新分配，是每家匀过去一点</p>
</blockquote>
<p>最后把从节点加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.22.131:6388 192.168.22.131:6387 --cluster-slave --cluster-master-id f1ecbda8c42a84de065df6833975895443acc0bf</span><br></pre></td></tr></table></figure>

<h3 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node 192.168.22.131:6388 ca7e601832d1e3ca2860d425e4c767445e03dceb</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#把6387的4096槽位都给6381（也可以匀3次）</span><br><span class="line">#然后把6387也删了</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p><strong>假设主机宕机了，从机会不会上位？会的！！！</strong></p>
<p><strong>即便原先的主机活了，但是不会变回主机了，还是从机</strong></p>
</blockquote>
<h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>创建&#x2F;myfile文件夹，写Dockerfile文件</p>
<p>创建一个centos7的容器，并且在里面下载vim等一些东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">RUN yum -y install glibc.i686</span><br><span class="line">RUN mkdir /usr/local/java</span><br><span class="line">ADD jdk-8u181-linux-x64.tar.gz /usr/local/java</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_181</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;success----------ok&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<p>构建（后面有个空格加一个点）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t centosnew:1.1 .</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>（一开始我使用的最新版centos报错，然后是因为centos8的原因</strong></p>
<p><strong>参考：<a href="https://mdnice.com/writing/46d5098506284e2db99d17363b067692%EF%BC%89">https://mdnice.com/writing/46d5098506284e2db99d17363b067692）</a></strong></p>
<p><strong>运行时候：</strong></p>
<p><strong>docker run -it centosnew:1.1</strong></p>
<p><strong>注意：可以不输入&#x2F;bin&#x2F;bash、并且呢在文件的时候add自带解压哈！</strong></p>
</blockquote>
<h1 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h1><p><img src="/assets/1711345463933.png" alt="71134546393" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看网络</span><br><span class="line">docker network ls</span><br><span class="line">#查看网络源数据</span><br><span class="line">docker network inspect xxx</span><br><span class="line">#删除网络</span><br><span class="line">docker network rm xxx</span><br></pre></td></tr></table></figure>

<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。需要定义一个yaml格式的配置文件<strong>docker-compose.yml</strong>，写<strong>好多个容器之间的调用关系</strong>，只需要一个命令就可以<strong>同时启动&#x2F;关闭</strong>这些容器。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<p>最新的不需要额外下载compose，自带了。并且没有短线连接了！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看帮助</span><br><span class="line">docker compose -h</span><br><span class="line">#启动</span><br><span class="line">docker compose up</span><br><span class="line">#启动并且后台运行</span><br><span class="line">docker compose up -d</span><br><span class="line">#停止并且删除</span><br><span class="line">docker compose down</span><br><span class="line">#展现正在运行的</span><br><span class="line">docker compose ps</span><br><span class="line">#展现运行过的（包括历史）</span><br><span class="line">docker compose top</span><br><span class="line">#检查配置</span><br><span class="line">docker compose config</span><br><span class="line">#有问题才输出</span><br><span class="line">docker compose config -q</span><br></pre></td></tr></table></figure>

<h1 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h1><h2 id="run一个容器"><a href="#run一个容器" class="headerlink" title="run一个容器"></a>run一个容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data --name portainer portainer/portainer</span><br></pre></td></tr></table></figure>

<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip地址:9000</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711352576673.png" alt="71135257667" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>阅读指南</title>
    <url>/2024/03/02/hello-world/</url>
    <content><![CDATA[<p><strong>欢迎各位来到我的<code>BLOG~</code></strong></p>
<blockquote>
<p>​	博客主要用于写个人的学习笔记以及生活杂七杂八的记录。</p>
<p>​	初心是希望能够<strong>记录自己不断进步的足迹</strong>以及<strong>生活美好点滴</strong>！</p>
<p>​	如博客中有文章有<strong>疑问</strong>or<strong>错误</strong>可以点击首页的——“联系我📫”，将您想对我说的发送至邮箱~</p>
</blockquote>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
  </entry>
</search>
