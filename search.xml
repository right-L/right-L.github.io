<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot</title>
    <url>/2024/03/03/SpringBoot/</url>
    <content><![CDATA[<h1 id="springboot的第一个helloword"><a href="#springboot的第一个helloword" class="headerlink" title="springboot的第一个helloword"></a>springboot的第一个helloword</h1><h2 id="快速生成一个项目"><a href="#快速生成一个项目" class="headerlink" title="快速生成一个项目"></a>快速生成一个项目</h2><h3 id="可以在spring官网上用以下方式"><a href="#可以在spring官网上用以下方式" class="headerlink" title="可以在spring官网上用以下方式"></a>可以在spring官网上用以下方式</h3><p><img src="/assets/1698196929347.png" alt="69819692934" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>这里添加了<strong>springweb</strong>的依赖，生成之后文件夹会有以下：</p>
<p><img src="/assets/1698196955000.png" alt="69819695500" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="可以直接在idea中生成一个springboot项目（推荐）"><a href="#可以直接在idea中生成一个springboot项目（推荐）" class="headerlink" title="可以直接在idea中生成一个springboot项目（推荐）"></a>可以直接在idea中生成一个springboot项目（推荐）</h3><p> <img src="/assets/1698197100320.png" alt="69819710032" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698197150100.png" alt="69819715010" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>启动之后会显示以下<strong>（成功）</strong>：</p>
<p><img src="/assets/1698197193501.png" alt="69819719350" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>浏览器访问本地8080：</p>
<p><img src="/assets/1698197213950.png" alt="69819721395" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="启动后下面有一行报错"><a href="#启动后下面有一行报错" class="headerlink" title="启动后下面有一行报错"></a>启动后下面有一行报错</h3><blockquote>
<p>报错显示：An incompatible version [1.2.23] of the Apache Tomcat Native library is installed</p>
<p>原因：似乎是因为tomcat的版本问题</p>
<p>解决方案参考：<a href="https://blog.csdn.net/rej177/article/details/128223813">https://blog.csdn.net/rej177/article/details/128223813</a></p>
</blockquote>
<p> <img src="/assets/1698197394956.png" alt="69819739495" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="编写hellowrod"><a href="#编写hellowrod" class="headerlink" title="编写hellowrod"></a>编写hellowrod</h3><p><img src="/assets/1698197446208.png" alt="69819744620" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698197454255.png" alt="69819745425" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>回顾一下spring里的@RequesMapping(&#x2F;hello)，表示当前用户<strong>访问&#x2F;hello路径</strong>的时候将会调用它所注释的方法。</p>
<p>其中它可以被更具体的注释代替，如下：</p>
<p>@GetMapping()表示处理get请求</p>
<p>@PostMapping()表示处理post请求</p>
<p>@PutMapping()表示处理put请求</p>
<p>@DeleteMapping()表示处理delete请求</p>
</blockquote>
<h2 id="进行项目的打包"><a href="#进行项目的打包" class="headerlink" title="进行项目的打包"></a>进行项目的打包</h2><p> <img src="/assets/1698197551373.png" alt="69819755137" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>原先有遇见过报错，后面找到原因是因为配置文件中有中文，出现了<strong>乱码</strong>，解决方案如下（但是后面推荐用yaml文件作为配置文件，比较方便)</p>
</blockquote>
<p><img src="/assets/1698197741285.png" alt="69819774128" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>打包好之后可以看到一个jar文件：</p>
<p> <img src="/assets/1698198251755.png" alt="69819825175" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>打开shell执行以下即可运行（<strong>ctrl+c</strong>停止）：</p>
<p><img src="/assets/1698198276653.png" alt="69819827665" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="更改启动后的画面"><a href="#更改启动后的画面" class="headerlink" title="更改启动后的画面"></a>更改启动后的画面</h2><p> <img src="/assets/1698198408847.png" alt="69819840884" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698198429788.png" alt="69819842978" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>可以在网站上找：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a></p>
<p>修改<strong>resources&#x2F;banner.txt</strong>文件即可</p>
</blockquote>
<h1 id="配置文件的基本使用"><a href="#配置文件的基本使用" class="headerlink" title="配置文件的基本使用"></a>配置文件的基本使用</h1><h2 id="两种配置文件的格式"><a href="#两种配置文件的格式" class="headerlink" title="两种配置文件的格式"></a>两种配置文件的格式</h2><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><p>key&#x3D;value</p>
<h3 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a>application.yaml</h3><p>key:空格 value</p>
<h2 id="yaml的好处"><a href="#yaml的好处" class="headerlink" title="yaml的好处"></a>yaml的好处</h2><p>可以存许多不同类型的数值</p>
<p> <img src="/assets/1698199063469.png" alt="69819906346" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rigthl</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2002</span><span class="string">/11/14</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">study</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">狗崽</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">狗崽</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="使用yaml进行数据注入"><a href="#使用yaml进行数据注入" class="headerlink" title="使用yaml进行数据注入"></a>使用yaml进行数据注入</h2><h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><h4 id="dog"><a href="#dog" class="headerlink" title="dog"></a>dog</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rightl.lab2.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="comment">//@Component的意思是标识一个类为Spring容器管理的组件，会被spring自动扫描并且注册为bean</span></span><br><span class="line"><span class="comment">//为了更好的区别还有以下：</span></span><br><span class="line"><span class="comment">//@Service: 用于标识服务层的组件。</span></span><br><span class="line"><span class="comment">//@Repository: 用于标识数据访问层的组件，通常用于DAO类。</span></span><br><span class="line"><span class="comment">//@Controller: 用于标识控制器层的组件，通常用于Spring MVC中的Controller类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="comment">//    @Value(&quot;狗崽&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    @Value(&quot;2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="person"><a href="#person" class="headerlink" title="person"></a>person</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rightl.lab2.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Integer age, Boolean happy, Date birth, Map&lt;String, Object&gt; maps, List&lt;Object&gt; lists, Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getHappy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHappy</span><span class="params">(Boolean happy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirth</span><span class="params">(Date birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getMaps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getLists</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLists</span><span class="params">(List&lt;Object&gt; lists)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, happy=&quot;</span> + happy +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&quot;, maps=&quot;</span> + maps +</span><br><span class="line">                <span class="string">&quot;, lists=&quot;</span> + lists +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rightl.lab2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rightl.lab2.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> com.rightl.lab2.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lab2ApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">//    @Autowired注解用于自动装配Spring Bean。</span></span><br><span class="line"><span class="comment">//    当一个类中的字段、构造函数或方法被@Autowired注解标记时，Spring容器会自动在容器中查找匹配的Bean，</span></span><br><span class="line"><span class="comment">//    并将其注入到标记了@Autowired的地方。</span></span><br><span class="line"><span class="comment">//    @Qualifier注解与@Autowired一起使用，用于指定具体的Bean名称，以解决多个同类型的Bean存在时的歧义性问题。</span></span><br><span class="line"><span class="comment">//    如果一个接口有多个实现类，或者一个类有多个子类，通过@Qualifier可以明确指定要注入的Bean。</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(dog);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Dog&#123;name=&#x27;狗崽&#x27;, age=&#x27;2&#x27;&#125;</span><br><span class="line">Person&#123;name=&#x27;rigthl&#x27;, age=21, happy=true, birth=Thu Nov 14 00:00:00 CST 2002, maps=&#123;k1=v1, k2=v2&#125;, lists=[study, java, python], dog=Dog&#123;name=&#x27;狗崽&#x27;, age=&#x27;2&#x27;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用properties进行数据注入"><a href="#使用properties进行数据注入" class="headerlink" title="使用properties进行数据注入"></a>使用properties进行数据注入</h2><p>（不推荐，麻烦）</p>
<p> <img src="/assets/1698199256293.png" alt="69819925629" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="配置文件的其他注意事项"><a href="#配置文件的其他注意事项" class="headerlink" title="配置文件的其他注意事项"></a>配置文件的其他注意事项</h2><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p> <img src="/assets/1698289890102.png" alt="69828989010" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>可以写在以上的四个位置，有<strong>优先级</strong>：</p>
<ul>
<li>file:.&#x2F;config&#x2F;</li>
<li>file:.&#x2F;</li>
<li>classpath:&#x2F;config&#x2F;</li>
<li>classpath:&#x2F;</li>
</ul>
<h3 id="yaml文件可以使用—用来分割不同的环境配置"><a href="#yaml文件可以使用—用来分割不同的环境配置" class="headerlink" title="yaml文件可以使用—用来分割不同的环境配置"></a>yaml文件可以使用—用来分割不同的环境配置</h3><blockquote>
<p>默认最后一个优先级最高(此时的端口号是8081)</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果给加上以下代码(给配置文件起个名字，新版本跟之前的不一样)，端口就是8080</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">config:</span></span><br><span class="line">		<span class="attr">activate:</span></span><br><span class="line">			<span class="attr">on-profile:</span> <span class="string">tests</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用以下代码，用来调用其想要的配置文件,端口就是8081</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">tests</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">tests</span></span><br></pre></td></tr></table></figure>

<h1 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h1><ul>
<li>springboot启动会加载大量的自动配置类</li>
<li>我们看需要的功能有没有在springboot中默认写好的自动配置类中</li>
<li>看自动配置类中到底配置了哪些组件</li>
<li>给容器自动配置类添加组件的时候，会从properties类中获取某些属性，在配置文件中指定这些属性的值：<ul>
<li>xxxAutoConfigurartion:自动配置类</li>
<li>xxxProperties:封装配置文件中相关属性</li>
</ul>
</li>
</ul>
<p>可以在yaml文件中写以下，运行的时候可以看到哪些自动配置类<strong>是否生效</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h1 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h1><h2 id="webjars"><a href="#webjars" class="headerlink" title="webjars"></a>webjars</h2><blockquote>
<p>网址：<a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
<p>可以在里面找到想要的，例如我要jquery的maven</p>
</blockquote>
<p> <img src="/assets/1698291489338.png" alt="69829148933" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>那么在依赖里面加入上面那段即可</p>
<h2 id="静态资源默认的位置"><a href="#静态资源默认的位置" class="headerlink" title="静态资源默认的位置"></a>静态资源默认的位置</h2><ul>
<li><p>webjars</p>
<p>访问：locahost:8080&#x2F;webjars&#x2F;</p>
</li>
</ul>
<p> <img src="/assets/1698291651596.png" alt="69829165159" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>pubilc</li>
<li>static</li>
<li>resources</li>
</ul>
<p> <img src="/assets/1698291725996.png" alt="69829172599" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​	访问：localhost:&#x2F;8080&#x2F;</p>
<p> <img src="/assets/1698291824944.png" alt="69829182494" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>resource&gt;static（默认）&gt;public</p>
<blockquote>
<p>对于静态资源的位置也可以在yaml配置文件中进行修改，但是一般不建议修改！</p>
</blockquote>
<h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p>这里把首页直接放在static中，并且命名为index.html，在浏览器中直接访问8080即可</p>
<blockquote>
<p>idea中，如果想要快速把html格式生成，使用快捷键**!+tab**</p>
</blockquote>
<p> <img src="/assets/1698292122038.png" alt="69829212203" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="ico"><a href="#ico" class="headerlink" title="ico"></a>ico</h2><blockquote>
<p>截至现在暂时最新的使用方法是直接讲ico文件命名为favicon，放入static中即可，springboot会自动识别并且用作网站图标。</p>
<p>其他方式也有：</p>
<p>如果你放在了不同的路径，在yaml文件中配置一下即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">mvc:</span></span><br><span class="line">		<span class="attr">favicon:</span></span><br><span class="line">			<span class="attr">static-path-pattern:</span> <span class="string">/path/xxxxx</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/assets/1698292427172.png" alt="69829242717" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698292449293.png" alt="69829244929" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2024/03/25/docker/</url>
    <content><![CDATA[<h1 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h1><h2 id="Docker理念"><a href="#Docker理念" class="headerlink" title="Docker理念"></a>Docker理念</h2><p>解决了<strong>运行环境</strong>和<strong>配置</strong>问题的软件容器，方便做持续集成并有助于<strong>整体发布</strong>的容器虚拟化技术。</p>
<h2 id="Docker与传统虚拟机的之前的区别"><a href="#Docker与传统虚拟机的之前的区别" class="headerlink" title="Docker与传统虚拟机的之前的区别"></a>Docker与传统虚拟机的之前的区别</h2><p>Docker容器是在<strong>操作系统层面上</strong>实现虚拟化，直接服用本地主机的操作系统；而传统虚拟机则是在<strong>硬件层面</strong>实现虚拟化。两者相比，前者启动<strong>速度更快</strong>，<strong>占用体积小</strong>。</p>
<ul>
<li>传统虚拟机技术是虚拟出一套硬件之后，在其运行一个完整的操作系统，在该系统上再运行所需的应用进程。</li>
<li>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且没有进行硬件虚拟。因此更加轻便。</li>
<li>每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会互相影响，能区分计算资源。</li>
</ul>
<h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><ul>
<li>镜像</li>
<li>容器</li>
<li>仓库</li>
</ul>
<h1 id="下载Docker"><a href="#下载Docker" class="headerlink" title="下载Docker"></a>下载Docker</h1><blockquote>
<p>我是在centos7下安装的，其Docker下载地址如下：</p>
<p>[<strong><a href="https://docs.docker.com/get-docker/">https://docs.docker.com/get-docker/</a></strong></p>
<p>centos教程如下：</p>
<p>[<strong><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></strong></p>
<p>注意：作者的下载的时候是在2024&#x2F;3，最新下载教程或许有出入，最新最好跟官网教程相同步~</p>
</blockquote>
<h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br></pre></td></tr></table></figure>

<h2 id="安装gcc-c"><a href="#安装gcc-c" class="headerlink" title="安装gcc-c++"></a>安装gcc-c++</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc- c++</span><br></pre></td></tr></table></figure>

<h2 id="安装yum-utils软件包"><a href="#安装yum-utils软件包" class="headerlink" title="安装yum-utils软件包"></a>安装yum-utils软件包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h2 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h2 id="软件包更新"><a href="#软件包更新" class="headerlink" title="软件包更新"></a>软件包更新</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<h2 id="安装docker引擎、containerd-和-Docker-Compose"><a href="#安装docker引擎、containerd-和-Docker-Compose" class="headerlink" title="安装docker引擎、containerd 和 Docker Compose"></a>安装docker引擎、containerd 和 Docker Compose</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">re -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h2><ul>
<li><p>启动docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>看docker摘要信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><ul>
<li><p>列出本地主机上的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker iamges</span><br><span class="line">#包含历史</span><br><span class="line">docker iamges -a</span><br><span class="line">#只显示id</span><br><span class="line">docker iamges -q</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询某个镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取某个镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看镜像&#x2F;容器&#x2F;数据卷所占的空间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi xxx(名字或者id)</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>docker虚悬镜像：</p>
<p>仓库名、标签都是none的镜像</p>
<p>其查看命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker iamge ls -f dangling=true</span><br></pre></td></tr></table></figure>

<p>删除命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker iamge prune</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><ul>
<li><p>新建+启动容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run[options] iamge[commamd]</span><br><span class="line">#options说明：</span><br><span class="line">--name=&quot;容器新名字&quot;</span><br><span class="line">-d:后台运行</span><br><span class="line">-i:交互模式运行，通常与-t一起</span><br><span class="line">-t:为容器重新分配一个伪输出终端</span><br><span class="line">-P：随机端口映射</span><br><span class="line">-p:指定端口映射</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出正在运行的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps[options]</span><br><span class="line">#options说明：</span><br><span class="line">-a:当前正在运行+历史运行过的</span><br><span class="line">-l:最近创建的</span><br><span class="line">-n:最近n个</span><br><span class="line">-q:静默模式，只显示编号</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#不启动新的进程，用exit退出导致容器停止</span><br><span class="line">docker attach</span><br><span class="line">#推荐，启动新的进程。不会导致容器停止</span><br><span class="line">docker exec</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#run进去，exit退出，容器停止</span><br><span class="line">exit</span><br><span class="line">#run进去，ctrl+p+q退出，容器不停止</span><br><span class="line">ctrl+p+q</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动已经停止的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器id或者名字</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop</span><br></pre></td></tr></table></figure>
</li>
<li><p>强制停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker kill</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看容器logs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看容器内部细节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>从容器内拷贝文件到主机上（容器-&gt;主机），也就是复制容器里面的东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入导出容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导出</span><br><span class="line">docker export 容器id &gt; 文件名.tar</span><br><span class="line">#导入</span><br><span class="line">cat 文件名.tar |docker import -镜像用户:镜像版本号</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交容器副本使之成为一个新的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 要创建的目标镜像名:版本号 </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="私用镜像仓库"><a href="#私用镜像仓库" class="headerlink" title="私用镜像仓库"></a>私用镜像仓库</h2><ul>
<li><p>下载registry镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 5000:5000 -v 宿主机文件目录地址:容器中文件目录地址 --privileged=true registry</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看该私服仓库里有哪些镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -XGET http://ip地址:5000/v2/_catalog</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用tat命令对镜像进行修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag 要修改的镜像名字 ip地址:5000/新镜像名字:版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件使之支持http</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;ip地址:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将修改好的镜像推送到私服库里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push id地址:5000/镜像名字:版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们可以直接在私服库里拉取我们推送进去的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull id地址:5000/镜像名字:版本</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v 宿主机文件目录地址:容器中文件目录地址 --privileged=true</span><br></pre></td></tr></table></figure>

<p><strong>–privileged&#x3D;true</strong>命令，扩大容器的权限解决挂载目录没有<strong>权限</strong>的问题。</p>
<p>卷就是目录或者文件，存在于一个或者多个容器中。卷的设计目的就是数据的<strong>持久化</strong>，完全<strong>独立于容器的生命周期</strong>，因此docker<strong>不会在容器删除时删除其挂载的数据卷</strong>。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>数据卷可以在容器之间共享或者重用数据</li>
<li>卷中的更改可以直接实时生效</li>
<li>数据卷中的更改不会包含在镜像的更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li><p>如果容器停止了，但是我在宿主机继续在映射文件中做了修改，那么重新开启容器也依旧会有该修改。</p>
</li>
<li><p>在run的时候加-v设置数据卷，设置一次就可以，设置的时候可以设置多个卷。</p>
</li>
<li><p>查看数据卷 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据卷</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume rm 数据卷名称或者id</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>不管是容器中删除该<strong>文件</strong>还是宿主机删除<strong>文件</strong>，都会删除不见。其容器卷的目的不是备份！！主要目的是数据持久化！</p>
<p>但是容器删除了，删除容器之前没有删除容器里的文件，宿主机对应的文件还是会有的！注意两种区别！</p>
</blockquote>
<h1 id="容器的继承共享"><a href="#容器的继承共享" class="headerlink" title="容器的继承共享"></a>容器的继承共享</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --privileged=true --volumes-from 父类容器 --name 新容器名字 镜像名字</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>可以理解为复制了一个容器，但是有点不一样的是，他还继承了数据卷，也就是新建的这个容器中，也可以将文件创建好映射到他们之间。</strong></p>
<p><strong>（谁死了都没事，活了还是可以看到！）</strong></p>
</blockquote>
<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="创建-运行"><a href="#创建-运行" class="headerlink" title="创建+运行"></a>创建+运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name t1 tomcat</span><br></pre></td></tr></table></figure>

<h2 id="404问题"><a href="#404问题" class="headerlink" title="404问题"></a>404问题</h2><blockquote>
<p>发现最新版的tomcat在容器内运行的时候，在网页中访问localhost:8080会报404</p>
</blockquote>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line">#删除webapps</span><br><span class="line">rm -r webapps</span><br><span class="line">#重命名</span><br><span class="line">mv webapps.dist webapps</span><br></pre></td></tr></table></figure>

<blockquote>
<p>也可以直接使用tomcat8，就没有这个问题了~</p>
</blockquote>
<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="需要设置容器卷"><a href="#需要设置容器卷" class="headerlink" title="需要设置容器卷"></a>需要设置容器卷</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --privileged=true -v /rightl/mysql/log:/var/log/mysql -v /rightl/mysql/data:/var/lib/mysql -v /rightl/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql:5.7</span><br></pre></td></tr></table></figure>

<h2 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id /bin/bsah</span><br><span class="line">mysql -u root -p</span><br><span class="line">#可以使用以下命令来查看</span><br><span class="line">show variables like &#x27;character%&#x27;;</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p>因为我已经设置 了数据卷了，所以我直接在我自己宿主机下的&#x2F;rightl&#x2F;mysql&#x2F;conf下更改即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim my.cnf</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置之后记得要重启容器再查看一次哈~</p>
</blockquote>
<h2 id="mysql中数据卷的好处"><a href="#mysql中数据卷的好处" class="headerlink" title="mysql中数据卷的好处"></a>mysql中数据卷的好处</h2><p>因为我做了数据卷，如果容器被删了，但是我宿主机中的这些文件不会删，那么在重创建一个容器的时候，映射也是宿主机的这几个文件，那么我新建的这个mysql容器也会保留住之前删掉的容器里面mysql的数据库所有信息！！</p>
<h2 id="高级篇——主从复制"><a href="#高级篇——主从复制" class="headerlink" title="高级篇——主从复制"></a>高级篇——主从复制</h2><h3 id="run一个主mysql容器"><a href="#run一个主mysql容器" class="headerlink" title="run一个主mysql容器"></a>run一个主mysql容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3307:3306 --name mysql-master -v /mydata/mysql-master/log:/var/log/mysql -v /mydata/mysql-master/data:/var/lib/mysql -v /mydata/mysql-master/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos100 ~]# cd /mydata/mysql-master/conf/</span><br><span class="line">[root@centos100 conf]# vim my.cnf</span><br><span class="line">[root@centos100 conf]# cat my.cnf </span><br><span class="line">[mysqld]</span><br><span class="line">server_id=101</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">binlog_format=mixed</span><br><span class="line">expire_logs_days=7</span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>

<h3 id="重新启动该容器后，创建数据同步用户"><a href="#重新启动该容器后，创建数据同步用户" class="headerlink" title="重新启动该容器后，创建数据同步用户"></a>重新启动该容器后，创建数据同步用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="run一个从mysql容器"><a href="#run一个从mysql容器" class="headerlink" title="run一个从mysql容器"></a>run一个从mysql容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3308:3306 --name mysql-slave -v /mydata/mysql-slave/log:/var/log/mysql -v /mydata/mysql-slave/data:/var/lib/mysql -v /mydata/mysql-slave/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos100 ~]# cd /mydata/mysql-slave/conf/</span><br><span class="line">[root@centos100 conf]# vim my.cnf</span><br><span class="line">[root@centos100 conf]# cat my.cnf </span><br><span class="line">[mysqld]</span><br><span class="line">server_id=102</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">binlog_format=mixed</span><br><span class="line">expire_logs_days=7</span><br><span class="line">slave_skip_errors=1062</span><br><span class="line">relay_log=mall-mysql-relay-bin</span><br><span class="line">log_slave_updates=1</span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure>

<h3 id="进入主mysql"><a href="#进入主mysql" class="headerlink" title="进入主mysql"></a>进入主mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711343789974.png" alt="71134378997" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="进入从mysql"><a href="#进入从mysql" class="headerlink" title="进入从mysql"></a>进入从mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;192.168.22.131&#x27;, MASTER_USER=&#x27;slave&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_PORT=3307, MASTER_LOG_FILE=&#x27;mall-mysql-bin.000001&#x27;, MASTER_LOG_POS=617, MASTER_CONNECT_RETRY=30;</span><br></pre></td></tr></table></figure>

<p>开启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711343862735.png" alt="71134386273" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>验证：主mysql创建的数据库在从mysql可以看到，即成功</p>
</blockquote>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="修改redis的conf配置文件"><a href="#修改redis的conf配置文件" class="headerlink" title="修改redis的conf配置文件"></a>修改redis的conf配置文件</h2><p><img src="/assets/1711343453816.png" alt="71134345381" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="run容器"><a href="#run容器" class="headerlink" title="run容器"></a>run容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis01 --privileged=true -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<h2 id="高级篇——redis集群"><a href="#高级篇——redis集群" class="headerlink" title="高级篇——redis集群"></a>高级篇——redis集群</h2><h3 id="run六个redis容器"><a href="#run六个redis容器" class="headerlink" title="run六个redis容器"></a>run六个redis容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis-node-1 --net host --privileged=true -v /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6381</span><br><span class="line">docker run -d --name redis-node-2 --net host --privileged=true -v /data/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6382</span><br><span class="line">docker run -d --name redis-node-3 --net host --privileged=true -v /data/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6383</span><br><span class="line">docker run -d --name redis-node-4 --net host --privileged=true -v /data/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6384</span><br><span class="line">docker run -d --name redis-node-5 --net host --privileged=true -v /data/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6385</span><br><span class="line">docker run -d --name redis-node-6 --net host --privileged=true -v /data/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6386</span><br></pre></td></tr></table></figure>

<h3 id="进入6381"><a href="#进入6381" class="headerlink" title="进入6381"></a>进入6381</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-node-1 /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 192.168.22.131:6381 192.168.22.131:6382 192.168.22.131:6383 192.168.22.131:6384 192.168.22.131:6385 192.168.22.131:6386 --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>redis集群一共有<strong>16384个槽位</strong>，以上命令会直接平均分配给三个主机</p>
</blockquote>
<p><img src="/assets/1711344273535.png" alt="71134427353" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="存储数据的时候需要-p-端口-c"><a href="#存储数据的时候需要-p-端口-c" class="headerlink" title="存储数据的时候需要-p 端口 -c"></a>存储数据的时候需要-p 端口 -c</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6381 -c</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711344352120.png" alt="71134435212" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>会根据槽的分配，每个存储的数据分配的主redis有所不同。所以可以看到存储的时候，会反复横跳，可能到1也可能到3的redis。</p>
</blockquote>
<h3 id="检测分配"><a href="#检测分配" class="headerlink" title="检测分配"></a>检测分配</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster check 192.168.22.131:6381</span><br></pre></td></tr></table></figure>

<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis-node-7 --net host --privileged=true -v /data/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6387</span><br><span class="line">docker run -d --name redis-node-8 --net host --privileged=true -v /data/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6388</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-node-7 /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.22.131:6387 192.168.22.131:6381</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时已经把7加入进去了，但是check可以发现槽还没有分配！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 192.168.22.131:6381</span><br></pre></td></tr></table></figure>

<p><strong>（16384&#x2F;4&#x3D;4096）</strong></p>
<p><img src="/assets/1711344743921.png" alt="71134474392" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>这里其实不是重新分配，是每家匀过去一点</p>
</blockquote>
<p>最后把从节点加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.22.131:6388 192.168.22.131:6387 --cluster-slave --cluster-master-id f1ecbda8c42a84de065df6833975895443acc0bf</span><br></pre></td></tr></table></figure>

<h3 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node 192.168.22.131:6388 ca7e601832d1e3ca2860d425e4c767445e03dceb</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#把6387的4096槽位都给6381（也可以匀3次）</span><br><span class="line">#然后把6387也删了</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p><strong>假设主机宕机了，从机会不会上位？会的！！！</strong></p>
<p><strong>即便原先的主机活了，但是不会变回主机了，还是从机</strong></p>
</blockquote>
<h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>创建&#x2F;myfile文件夹，写Dockerfile文件</p>
<p>创建一个centos7的容器，并且在里面下载vim等一些东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">RUN yum -y install glibc.i686</span><br><span class="line">RUN mkdir /usr/local/java</span><br><span class="line">ADD jdk-8u181-linux-x64.tar.gz /usr/local/java</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_181</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;success----------ok&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<p>构建（后面有个空格加一个点）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t centosnew:1.1 .</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>（一开始我使用的最新版centos报错，然后是因为centos8的原因</strong></p>
<p><strong>参考：<a href="https://mdnice.com/writing/46d5098506284e2db99d17363b067692%EF%BC%89">https://mdnice.com/writing/46d5098506284e2db99d17363b067692）</a></strong></p>
<p><strong>运行时候：</strong></p>
<p><strong>docker run -it centosnew:1.1</strong></p>
<p><strong>注意：可以不输入&#x2F;bin&#x2F;bash、并且呢在文件的时候add自带解压哈！</strong></p>
</blockquote>
<h1 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h1><p><img src="/assets/1711345463933.png" alt="71134546393" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看网络</span><br><span class="line">docker network ls</span><br><span class="line">#查看网络源数据</span><br><span class="line">docker network inspect xxx</span><br><span class="line">#删除网络</span><br><span class="line">docker network rm xxx</span><br></pre></td></tr></table></figure>

<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。需要定义一个yaml格式的配置文件<strong>docker-compose.yml</strong>，写<strong>好多个容器之间的调用关系</strong>，只需要一个命令就可以<strong>同时启动&#x2F;关闭</strong>这些容器。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<p>最新的不需要额外下载compose，自带了。并且没有短线连接了！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看帮助</span><br><span class="line">docker compose -h</span><br><span class="line">#启动</span><br><span class="line">docker compose up</span><br><span class="line">#启动并且后台运行</span><br><span class="line">docker compose up -d</span><br><span class="line">#停止并且删除</span><br><span class="line">docker compose down</span><br><span class="line">#展现正在运行的</span><br><span class="line">docker compose ps</span><br><span class="line">#展现运行过的（包括历史）</span><br><span class="line">docker compose top</span><br><span class="line">#检查配置</span><br><span class="line">docker compose config</span><br><span class="line">#有问题才输出</span><br><span class="line">docker compose config -q</span><br></pre></td></tr></table></figure>

<h1 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h1><h2 id="run一个容器"><a href="#run一个容器" class="headerlink" title="run一个容器"></a>run一个容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data --name portainer portainer/portainer</span><br></pre></td></tr></table></figure>

<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip地址:9000</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711352576673.png" alt="71135257667" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>阅读指南</title>
    <url>/2024/03/02/hello-world/</url>
    <content><![CDATA[<p><strong>欢迎各位来到我的<code>BLOG~</code></strong></p>
<blockquote>
<p>​	博客主要用于写个人的学习笔记以及生活杂七杂八的记录。</p>
<p>​	初心是希望能够<strong>记录自己不断进步的足迹</strong>以及<strong>生活美好点滴</strong>！</p>
<p>​	如博客中有文章有<strong>疑问</strong>or<strong>错误</strong>可以点击首页的——“联系我📫”，将您想对我说的发送至邮箱~</p>
</blockquote>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
  </entry>
  <entry>
    <title>八股文——redis篇</title>
    <url>/2024/05/02/%E5%85%AB%E8%82%A1%E6%96%87%E2%80%94%E2%80%94redis%E7%AF%87/</url>
    <content><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li><code>缓存</code>：穿透、击穿、雪崩；双写一致、持久化；数据过期、淘汰策略</li>
<li><code>分布式锁</code>：setnx、redisson</li>
<li><code>计数器</code></li>
<li><code>保存token</code></li>
<li><code>消息队列</code></li>
<li><code>延迟队列</code></li>
</ul>
<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>查询一个<strong>不存在</strong>的数据，DB中也查找不到，也不会写入redis缓存中，导致<strong>每次请求都查数据库</strong>。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>
<li>解决方案1</li>
</ul>
<p>缓存一个空数据，查询返回的数据为空，仍然将这个<strong>空结果进行缓存</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;key:xxx,value:null&#125;</span><br></pre></td></tr></table></figure>

<p>优点是比较简单，但是消耗内存，可能发生<strong>不一致</strong>的问题（可能后面key有数据了导致不一致）</p>
<ul>
<li>解决方案2</li>
</ul>
<p>使用<strong>布隆过滤器</strong>，拦截不存在的数据，数据不存在的时候直接返回，不需要走redis和DB。</p>
<p>（缓存预热时，<code>预热布隆过滤器</code>）</p>
<blockquote>
<p>会有一定的误判率，可以进行误判率大小的设置（5%）</p>
</blockquote>
<h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>给某个key设置了过期时间，当<strong>key过期</strong>的时候，恰好这个时间对这个key有<strong>大量的并发请求</strong>，可能会瞬间将DB压垮。</p>
<p>（此时也是直接访问了DB）</p>
<h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><ul>
<li>解决方案1</li>
</ul>
<p><strong>互斥锁</strong>：写入<strong>缓存之前加锁，写完缓存之后释放锁</strong>，这样可以保证下一个查询的时候读到的是redis缓存的数据，而不需要访问DB</p>
<ul>
<li>解决方案2</li>
</ul>
<p><strong>逻辑过期</strong>：<code>不设置过期的时间</code>，在查的时候访问逻辑过期的时间，如果逻辑时间过期了那么也要获取互斥锁进行数据的更新，但是区别在于<strong>不需要等待更新完之后才能返回，此时直接返回过期的数据</strong>。</p>
<blockquote>
<p>互斥锁保证了强一致性，但是性能上比较差</p>
<p>逻辑过期是高可用，性能优，但是一致性比较差</p>
</blockquote>
<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>同一时间段<strong>大量</strong>的缓存key同时失效或者redis服务宕机，导致大量请求到达数据库，带来巨大的压力</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果是同时大量的key过期，那么给<strong>不同的key的TTL添加随机值</strong>，尽量不要一样的时间。</p>
<p>如果是redis宕机的话，利用redis<strong>集群</strong>提高服务的可用性（哨兵、集群）</p>
<p>其他解决：</p>
<ul>
<li>给缓存业务添加降级限流策略</li>
<li>给业务添加多级缓存</li>
</ul>
<h1 id="双写一致性"><a href="#双写一致性" class="headerlink" title="双写一致性"></a>双写一致性</h1><p><strong>如果保证mysql和redis数据的同步</strong></p>
<h2 id="一致性高的情况"><a href="#一致性高的情况" class="headerlink" title="一致性高的情况"></a>一致性高的情况</h2><ul>
<li><strong>延迟双删除</strong>（删除缓存-修改数据库-（延迟）-删除缓存）</li>
</ul>
<p>删除两次缓存是为了避免读脏数据</p>
<ul>
<li><strong>读写锁</strong>（强一致，性能低）</li>
</ul>
<h2 id="最终一致性的情况"><a href="#最终一致性的情况" class="headerlink" title="最终一致性的情况"></a>最终一致性的情况</h2><ul>
<li><strong>异步通知</strong>保证数据最终的一致性</li>
</ul>
<p>例如可以使用<strong>MQ</strong>进行监听信息、也可以使用Canal（基于mysql主从同步实现的）</p>
<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>Redis数据备份文件，也叫redis<strong>数据快照</strong>。把内存中的所有数据<strong>都记录到磁盘中</strong>，当redis实例故障重启之后，从磁盘中读取快照，恢复数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">save（主进程）</span><br><span class="line">bgsave（子进程）</span><br><span class="line">#900秒内至少有一个key修改，则执行bgsave</span><br><span class="line">sava 900 1</span><br></pre></td></tr></table></figure>

<h3 id="RDB的执行原理"><a href="#RDB的执行原理" class="headerlink" title="RDB的执行原理"></a>RDB的执行原理</h3><p>bgsave开始的时候会fork（克隆）主进程得到子进程，子进程<strong>共享主进程的内存数据</strong>。完成fork之后读取内存数据并写入新的RDB文件，替换旧的。</p>
<blockquote>
<p>fork主要是复制页表，页表记录了<strong>虚拟地址和物理地址的映射关系</strong></p>
<p>fork采用的是copy-on-write技术：</p>
<ul>
<li>当主进程执行读操作的时候，访问共享内存。</li>
<li>当主进程执行写操作的时候，会拷贝一份数据，执行写操作。</li>
</ul>
</blockquote>
<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>AOF全称为追加文件，redis处理的<strong>每一个写命令都会记录在AOF文件</strong>，可以看作是命令日志文件。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>默认是关闭的，如果需要开启，修改配置文件<code>redis.conf</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line">#记录频率 执行一次就立即记录/执行完先放aof缓冲每隔一秒将缓冲写到aof（默认）/执行完先放缓冲区操作系统决定何时写入磁盘</span><br><span class="line">appendfsync always/everysec/no</span><br><span class="line">#也可以设置触发阈值自动去重写AOF文件</span><br><span class="line">#aof文件比上次增长超过多少触发重写</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">#aof体积最小多大以上触发重写</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="center">刷机时机</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">always</td>
<td align="center">同步刷盘</td>
<td align="center">可靠性高，几乎不丢数据</td>
<td align="center">性能影响大</td>
</tr>
<tr>
<td align="center">everysec</td>
<td align="center">每秒刷盘</td>
<td align="center">性能适中</td>
<td align="center">最多丢失1s数据</td>
</tr>
<tr>
<td align="center">no</td>
<td align="center">操作系统控制</td>
<td align="center">性能最好</td>
<td align="center">可靠性较差，可能丢失大量数据</td>
</tr>
</tbody></table>
<blockquote>
<p>因为是记录命令，AOF的文件比RDB文件大得多。而且AOF会对记录的同一个key的多次写操作，但只有最后一个才有意义。可以执行<strong>bgrewriteaof</strong>命令，执行重写功能，用最少的命令达到一样的效果。</p>
</blockquote>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p><img src="/assets/1714569390638.png" alt="71456939063" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>可以两个一起配合使用！</p>
<h1 id="数据过期策略"><a href="#数据过期策略" class="headerlink" title="数据过期策略"></a>数据过期策略</h1><h2 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h2><p>redis对数据设置数据的有效时间，数据过期之后就需要将数据从内存中删除掉。可以<strong>按照不同的规则进行删除</strong>，这种删除规则就被称之为数据的过期策略。</p>
<h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>设置了过期时间，即便过期了也先不管；<strong>当需要该key的时候，再检查是否过期，如果过期了再删掉</strong>。</p>
<blockquote>
<p>对cpu友好，不需要浪费时间定期检查是否过期；但是对内存不友好，如果过期了一直又不使用，就一直没办法删除。</p>
</blockquote>
<h2 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h2><p>每隔一段时间就对key进行检查，删除里面过期的key（从<strong>一定数量的数据库</strong>中取出<strong>一定数量的随机key</strong>进行检查，并删除过期的key）</p>
<ul>
<li><strong>slow模式</strong>：定时任务，执行频率默认10hz，每次不超过25ms，以通过修改配置文件redis.conf的hz选项。</li>
<li><strong>fast模式</strong>：执行频率不固定，但两次间隔不低于2ms，每次耗时不超过1ms</li>
</ul>
<blockquote>
<p>可以通过限制删除执行的时长和频率减少删除操作对cpu的影响；也能够有效释放过期键占用的内存。</p>
<p>就是难以确定删除操作的时长和频率。</p>
</blockquote>
<p>一般两种配合使用！</p>
<h1 id="数据淘汰策略"><a href="#数据淘汰策略" class="headerlink" title="数据淘汰策略"></a>数据淘汰策略</h1><p>缓存过多，内存占满了怎么办</p>
<h2 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h2><p>redis<strong>内存不够</strong>的时候，再往里面添加新的key，redis会按照某一种规则将内存中的数据删除掉。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>noeviction：不淘汰任何key，内存满不允许写入，<code>默认</code></li>
<li>volatile-ttl：对设置了TTL的key，比较key剩余的TTL值，越小的先淘汰</li>
<li>allkeys-random：对全体key，随机进行淘汰</li>
<li>volatile-random：对设置了TTL的key，随机进行淘汰</li>
<li>allkeys-lru：对全体key，基于LRU算法（<strong>最近最少使用</strong>）进行淘汰</li>
<li>volatile-lru：对设置了TTL的key，基于LRU算法进行淘汰</li>
<li>allkeys-lfu：对全体key，基于LFU算法（<strong>最少频率使用</strong>）进行淘汰</li>
<li>volatile-lfu：对设置了TTL的key，基于LFU算法进行淘汰</li>
</ul>
<h1 id="redis分布式锁"><a href="#redis分布式锁" class="headerlink" title="redis分布式锁"></a>redis分布式锁</h1><h2 id="setnx"><a href="#setnx" class="headerlink" title="setnx"></a>setnx</h2><p>redis实现分布式锁主要利用了redis的setnx命令，其意思的如果<strong>不存在则set</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加锁,NX是互斥，EX是设置超过时间</span><br><span class="line">set lock value NX EX 10</span><br><span class="line">#释放锁</span><br><span class="line">DEL key</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中如何合理的控制锁的有效时长？</p>
<ul>
<li>根据业务执行时间预估</li>
<li>给锁续期</li>
</ul>
</blockquote>
<h2 id="redisson"><a href="#redisson" class="headerlink" title="redisson"></a>redisson</h2><p>可以<strong>自动进行续期</strong>（watch dog看门狗），其中当获取锁失败的时候，可以指定阈值进行<strong>获取锁的循环</strong>，而不是直接中断。</p>
<blockquote>
<p>默认每隔十秒</p>
<p>可以重入</p>
</blockquote>
<h2 id="redisson实现的分布式锁——主从一致性"><a href="#redisson实现的分布式锁——主从一致性" class="headerlink" title="redisson实现的分布式锁——主从一致性"></a>redisson实现的分布式锁——主从一致性</h2><p>**ReadLock(红锁)**：不能只在一个redis实例上创建锁，应该在多个redis实例上创建锁（n&#x2F;2+1）</p>
<ul>
<li>实现复杂</li>
<li>性能差</li>
<li>运维繁琐</li>
</ul>
<blockquote>
<p>redis是AP思想（高可用性）</p>
<p>zookeeper是CP思想（强一致性）</p>
</blockquote>
<h1 id="redis集群方式"><a href="#redis集群方式" class="headerlink" title="redis集群方式"></a>redis集群方式</h1><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h3><p>读写分离，主节点写，然后同步给从节点，从节点读取。</p>
<h3 id="主从数据同步原理"><a href="#主从数据同步原理" class="headerlink" title="主从数据同步原理"></a>主从数据同步原理</h3><ul>
<li>主从全量同步</li>
<li>主从增量同步（slave重启或者后期数据变化）</li>
</ul>
<h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><h3 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h3><p>哨兵（sentinel）模式实现了主从集群的<strong>自动故障恢复</strong></p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li><strong>监控</strong>master和slave是否按照预期工作（心跳机制）</li>
<li><strong>自动故障恢复</strong>，如果master故障，sentinel会将一个slave提升为master</li>
<li>sentinel充当redis客户端的服务发现源，当集群发生故障转移的时候，会<strong>将最新信息推送给redis服务端</strong></li>
</ul>
<h3 id="脑裂"><a href="#脑裂" class="headerlink" title="脑裂"></a>脑裂</h3><p>由于网络的问题，可能导致sentinel认为master挂掉了，然后重新选出了一个新的master，这样就会导致出现两个master</p>
<p>但是服务端还是对旧的master中写入数据，当网络恢复之后，会强制把旧的master换为slave</p>
<p>这样会出现新写入的数据没有同步，数据丢失</p>
<p>解决方发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#写入数据的时候其从节点至少有一个</span><br><span class="line">min-replicas-to-write 1</span><br><span class="line">#数据复制和同步的延迟不能超过5s</span><br><span class="line">min-replicas-max-lag 5</span><br></pre></td></tr></table></figure>

<h2 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li>集群多有多个master，每个master保存不同数据</li>
<li>每个master可以有多个slave</li>
<li>master之间可以通过ping检测健康状态</li>
<li>客户端请求可以访问集群任意节点，最终都会被转发到正确节点（路由）</li>
</ul>
<blockquote>
<p>redis集群有16384哈希槽</p>
<p>可以解决海量数据以及高并发读写</p>
</blockquote>
<h1 id="redis是单线程的，为什么还那么快呢？"><a href="#redis是单线程的，为什么还那么快呢？" class="headerlink" title="redis是单线程的，为什么还那么快呢？"></a>redis是单线程的，为什么还那么快呢？</h1><ul>
<li>纯内存操作，执行速度快</li>
<li>采用单线程，避免了不必要的上下文切换可竞争条件，多线程还要考虑多线程安全问题</li>
<li>采用I&#x2F;O多路复用模型，非阻塞IO</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>动力恒合仓库项目1</title>
    <url>/2024/04/19/warehouse/</url>
    <content><![CDATA[<h1 id="基础后端搭建"><a href="#基础后端搭建" class="headerlink" title="基础后端搭建"></a>基础后端搭建</h1><h2 id="整合mybatis步骤"><a href="#整合mybatis步骤" class="headerlink" title="整合mybatis步骤"></a>整合mybatis步骤</h2><ul>
<li>引入依赖，在pom.xml中引入mysql驱动等</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">warehouse_manager</span></span><br><span class="line"><span class="comment">#这里的路径和端口对应的是前端的VITE_WAREHOUSE_CONTEXT_PATH=http://localhost:9999/warehouse</span></span><br><span class="line"><span class="comment">#项目访问路径</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/warehouse</span></span><br><span class="line"><span class="comment">#访问端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="comment">#mybatis</span></span><br><span class="line"><span class="comment">#数据源</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/db_warehouse?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1114</span></span><br><span class="line"><span class="comment">#sql映射文件位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#实体类所在路径，包中所有实体类的别名默认是首字母小写</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.pn.entity</span></span><br><span class="line"><span class="comment">#开启驼峰</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#开启日志功能</span></span><br><span class="line"><span class="attr">mybatis.configuration-log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment">#redis</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动注解@MapperScan，mapper接口扫描器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.warehouse_manager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">//map接口扫描器</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.pn.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WarehouseManagerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(WarehouseManagerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#redis</span></span><br><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.data.redis.database</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<h2 id="token设置"><a href="#token设置" class="headerlink" title="token设置"></a>token设置</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置token时间,一个小时</span></span><br><span class="line"><span class="attr">warehouse.expire-time</span>=<span class="string">3600</span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/1712918950112.png" alt="71291895011" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>session不适用于分布式微服务集群项目，但是token适用。</p>
<h3 id="方法一：将token和用户信息存放在redis中，实现会话共享"><a href="#方法一：将token和用户信息存放在redis中，实现会话共享" class="headerlink" title="方法一：将token和用户信息存放在redis中，实现会话共享"></a>方法一：将token和用户信息存<strong>放在redis中</strong>，实现会话共享</h3><p><img src="/assets/1712920040752.png" alt="71292004075" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>弊端：需要操作持久层，如果持久层挂了就…</p>
<h3 id="方法二：使用jwt"><a href="#方法二：使用jwt" class="headerlink" title="方法二：使用jwt"></a>方法二：使用jwt</h3><p>json web token，是一个用于通信双方之间传递信息的简洁的、安全的<strong>声明规范</strong>。</p>
<p>可以不用将token存储到数据库中，直接响应给浏览器。可以无需持久化token实现跨域认证。</p>
<blockquote>
<p>jwt是一个含签名并携带用户相关信息的加密串，客户端请求服务端的时候，请求中携带了jwt串到服务端，服务端通过签名加密匹配校验，保证信息未被篡改，校验通过之后将正常返回数据。</p>
</blockquote>
<p><img src="/assets/1712919478391.png" alt="71291947839" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>jwt依赖引入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jwt的依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.18.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="token工具类"><a href="#token工具类" class="headerlink" title="token工具类"></a>token工具类</h3><p>这里将token也存储到了redis里面（做一个备份吧），但是我们是直接使用了jwt解析token信息的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.CurrentUser;</span><br><span class="line"><span class="keyword">import</span> com.pn.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入redis模板</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入配置文件中的warehouse.expire-time属性 -- token的过期时间</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;warehouse.expire-time&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 常量:</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//token中存放用户id对应的名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_NAME_USERID</span> <span class="operator">=</span> <span class="string">&quot;CLAIM_NAME_USERID&quot;</span>;</span><br><span class="line">    <span class="comment">//token中存放用户名对应的名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_NAME_USERCODE</span> <span class="operator">=</span> <span class="string">&quot;CLAIM_NAME_USERCODE&quot;</span>;</span><br><span class="line">    <span class="comment">//token中存放用户真实姓名对应的名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_NAME_USERNAME</span> <span class="operator">=</span> <span class="string">&quot;CLAIM_NAME_USERNAME&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">sign</span><span class="params">(CurrentUser currentUser, String securityKey)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line"><span class="comment">//              给jet载体存放用户信息，注意这里可以不指定头部，头部是固定的</span></span><br><span class="line">                .withClaim(CLAIM_NAME_USERID, currentUser.getUserId())</span><br><span class="line">                .withClaim(CLAIM_NAME_USERCODE, currentUser.getUserCode())</span><br><span class="line">                .withClaim(CLAIM_NAME_USERNAME, currentUser.getUserName())</span><br><span class="line">                .withIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())<span class="comment">//发行时间</span></span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expireTime *<span class="number">1000</span>))<span class="comment">//有效时间</span></span><br><span class="line"><span class="comment">//                指定签名。传进去的是密码</span></span><br><span class="line">                .sign(Algorithm.HMAC256(securityKey));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当前用户信息以用户密码为密钥生成token的方法，然后将其存入redis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">loginSign</span><span class="params">(CurrentUser currentUser, String password)</span>&#123;</span><br><span class="line">        <span class="comment">//生成token，调用上面的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> sign(currentUser, password);</span><br><span class="line">        <span class="comment">//将token保存到redis中,并设置token在redis中的过期时间</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(token, token, expireTime *<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从客户端归还的token中获取用户信息的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> CurrentUser <span class="title function_">getCurrentUser</span><span class="params">(String token)</span> &#123;</span><br><span class="line"><span class="comment">//        token是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(token))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;令牌为空，请登录！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对token进行解码,获取解码后的token</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            decodedJWT = JWT.decode(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;令牌格式错误，请登录！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从解码后的token中获取用户信息并封装到CurrentUser对象中返回</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> decodedJWT.getClaim(CLAIM_NAME_USERID).asInt();<span class="comment">//用户账号id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userCode</span> <span class="operator">=</span> decodedJWT.getClaim(CLAIM_NAME_USERCODE).asString();<span class="comment">//用户账号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> decodedJWT.getClaim(CLAIM_NAME_USERNAME).asString();<span class="comment">//用户姓名</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(userCode) || StringUtils.isEmpty(userName))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;令牌缺失用户信息，请登录！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(userId, userCode, userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图片上传地址"><a href="#图片上传地址" class="headerlink" title="图片上传地址"></a>图片上传地址</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#图片上传地址</span></span><br><span class="line"><span class="attr">file.upload-path</span>=<span class="string">classpath:static/img/upload</span></span><br><span class="line"><span class="comment">#保存到数据库的地址路径</span></span><br><span class="line"><span class="attr">file.access-path</span>=<span class="string">/img/upload/</span></span><br></pre></td></tr></table></figure>

<h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--验证码工具kaptcha的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="验证码设置"><a href="#验证码设置" class="headerlink" title="验证码设置"></a>验证码设置</h3><p>在config配置类中创建java文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码工具kaptcha的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Producer接口的实现类DefaultKaptcha的bean对象,该对象用于生成验证码图片;</span></span><br><span class="line"><span class="comment">     * 并给其指定生成的验证码图片的设置项;bean对象的id引用名为captchaProducer;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;captchaProducer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">getKaptchaBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border&quot;</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="comment">//边框颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border.color&quot;</span>, <span class="string">&quot;105,179,90&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码图片宽度 默认为200</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;120&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码图片高度 默认为50</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;40&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符大小 默认为40</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="string">&quot;32&quot;</span>);</span><br><span class="line">        <span class="comment">//KAPTCHA_SESSION_KEY</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.session.key&quot;</span>, <span class="string">&quot;kaptchaCode&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符间距 默认为2</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.space&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符长度 默认为5</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.names&quot;</span>, <span class="string">&quot;Arial,Courier&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码噪点颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.noise.color&quot;</span>, <span class="string">&quot;gray&quot;</span>);</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="验证码的一些配置"><a href="#验证码的一些配置" class="headerlink" title="验证码的一些配置"></a>验证码的一些配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码工具kaptcha的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Producer接口的实现类DefaultKaptcha的bean对象,该对象用于生成验证码图片;</span></span><br><span class="line"><span class="comment">     * 并给其指定生成的验证码图片的设置项;bean对象的id引用名为captchaProducer;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;captchaProducer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">getKaptchaBean</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line"><span class="comment">//验证码的各种属性</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border&quot;</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="comment">//边框颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border.color&quot;</span>, <span class="string">&quot;105,179,90&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码图片宽度 默认为200</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;120&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码图片高度 默认为50</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;40&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符大小 默认为40</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="string">&quot;32&quot;</span>);</span><br><span class="line">        <span class="comment">//KAPTCHA_SESSION_KEY</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.session.key&quot;</span>, <span class="string">&quot;kaptchaCode&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符间距 默认为2</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.space&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符长度 默认为5</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.names&quot;</span>, <span class="string">&quot;Arial,Courier&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码噪点颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.noise.color&quot;</span>, <span class="string">&quot;gray&quot;</span>);</span><br><span class="line"><span class="comment">//把属性集对象封装给cofig</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用到前端"><a href="#应用到前端" class="headerlink" title="应用到前端"></a>应用到前端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.Producer;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"><span class="comment">////    注入</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">////    要注意不是实现类的类型，而是接口类型</span></span><br><span class="line"><span class="comment">//    private Producer producer;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        第二种方式</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;captchaProducer&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Producer producer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/captcha/captchaImage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">captchaImage</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//        生成图片文字</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> producer.createText();</span><br><span class="line"><span class="comment">//        生成图</span></span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> producer.createImage(text);</span><br><span class="line">            System.out.println(text);</span><br><span class="line"><span class="comment">//        保存到redis</span></span><br><span class="line">            redisTemplate.opsForValue().set(text, <span class="string">&quot;&quot;</span>, <span class="number">60</span> * <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">//            传入浏览器</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">            outputStream = response.getOutputStream();</span><br><span class="line">            ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, outputStream);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>import jakarta.servlet.ServletOutputStream;<br>import jakarta.servlet.http.HttpServletResponse;</p>
<p>这两个原先是java.servlet，会报错！我用的是springboot3，查找资料得知：</p>
<p>SpringBoot3已经不支持javax.servlet包里的HttpSession了，<strong>如果需要使用该类的话，需要导入jakarta.servlet包里的HttpSession</strong>。</p>
</blockquote>
<h2 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h2><p>加密工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密工具类 -- 提供了MD5加密算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DigestUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">encodingCharset</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对参数数据进行MD5加密的算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hmacSign</span><span class="params">(String aValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hmacSign(aValue, <span class="string">&quot;warehouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hmacSign</span><span class="params">(String aValue, String aKey)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> k_ipad[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="type">byte</span> k_opad[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="type">byte</span> keyb[];</span><br><span class="line">        <span class="type">byte</span> value[];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyb = aKey.getBytes(encodingCharset);</span><br><span class="line">            value = aValue.getBytes(encodingCharset);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            keyb = aKey.getBytes();</span><br><span class="line">            value = aValue.getBytes();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.fill(k_ipad, keyb.length, <span class="number">64</span>, (<span class="type">byte</span>) <span class="number">54</span>);</span><br><span class="line">        Arrays.fill(k_opad, keyb.length, <span class="number">64</span>, (<span class="type">byte</span>) <span class="number">92</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; keyb.length; i++) &#123;</span><br><span class="line">            k_ipad[i] = (<span class="type">byte</span>) (keyb[i] ^ <span class="number">0x36</span>);</span><br><span class="line">            k_opad[i] = (<span class="type">byte</span>) (keyb[i] ^ <span class="number">0x5c</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        md.update(k_ipad);</span><br><span class="line">        md.update(value);</span><br><span class="line">        <span class="type">byte</span> dg[] = md.digest();</span><br><span class="line">        md.reset();</span><br><span class="line">        md.update(k_opad);</span><br><span class="line">        md.update(dg, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        dg = md.digest();</span><br><span class="line">        <span class="keyword">return</span> toHex(dg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHex</span><span class="params">(<span class="type">byte</span> input[])</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(input.length * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> input[i] &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span> (current &lt; <span class="number">16</span>)</span><br><span class="line">                output.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            output.append(Integer.toString(current, <span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="响应结果封装类"><a href="#响应结果封装类" class="headerlink" title="响应结果封装类"></a>响应结果封装类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应结果封装类:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码常量:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_OK</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">//业务错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_ERR_BUSINESS</span> <span class="operator">=</span> <span class="number">501</span>;</span><br><span class="line">    <span class="comment">//用户未登录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_ERR_UNLOGINED</span> <span class="operator">=</span> <span class="number">502</span>;</span><br><span class="line">    <span class="comment">//系统错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_ERR_SYS</span> <span class="operator">=</span> <span class="number">503</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;<span class="comment">//状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> success;<span class="comment">//成功响应为true,失败响应为false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;<span class="comment">//响应信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;<span class="comment">//响应数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功响应的方法 -- 返回的Result中只封装了成功状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_OK,<span class="literal">true</span>,<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功响应的方法 -- 返回的Result中封装了成功状态码和响应信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_OK,<span class="literal">true</span>,message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功响应的方法 -- 返回的Result中封装了成功状态码和响应数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_OK,<span class="literal">true</span>,<span class="literal">null</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功响应的方法 -- 返回的Result中封装了成功状态码和响应信息和响应数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(String message, Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_OK,<span class="literal">true</span>,message, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应的方法 -- 返回的Result中封装了失败状态码和响应信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">err</span><span class="params">(<span class="type">int</span> errCode, String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(errCode,<span class="literal">false</span>, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应的方法 -- 返回的Result中封装了失败状态码和响应信息和响应数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">err</span><span class="params">(<span class="type">int</span> errCode,String message,Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(errCode,<span class="literal">false</span>,message, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整的pom-xml文件"><a href="#完整的pom-xml文件" class="headerlink" title="完整的pom.xml文件"></a>完整的pom.xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.pn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>warehouse_manager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>warehouse_manager<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;3.5.5&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash; 先排除mybatis-plus和spring整合的一个类 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;exclusions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;/exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/exclusions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;3.0.3&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--redis的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--fastjson的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.79<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--JSR-303的依赖(数据校验)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--验证码工具kaptcha的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--pinyin4j的依赖(将汉字转成拼音的工具)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.belerweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--commons-lang工具包(提供了很多工具类)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--jwt的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.18.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="完整的properties"><a href="#完整的properties" class="headerlink" title="完整的properties"></a>完整的properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring.application.name=warehouse_manager</span></span><br><span class="line"><span class="comment">#这里的路径和端口对应的是前端的VITE_WAREHOUSE_CONTEXT_PATH=http://localhost:9999/warehouse</span></span><br><span class="line"><span class="comment">#项目访问路径</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/warehouse</span></span><br><span class="line"><span class="comment">#访问端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="comment">#mybatis</span></span><br><span class="line"><span class="comment">#数据源</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/db_warehouse?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1114</span></span><br><span class="line"><span class="comment">#sql映射文件位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#实体类所在路径，包中所有实体类的别名默认是首字母小写</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.pn.entity</span></span><br><span class="line"><span class="comment">#开启驼峰</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#开启日志功能</span></span><br><span class="line"><span class="attr">mybatis.configuration-log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment">#redis</span></span><br><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.data.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#设置token时间,一小时</span></span><br><span class="line"><span class="attr">warehouse.expire-time</span>=<span class="string">3600</span></span><br><span class="line"><span class="comment">#图片上传地址</span></span><br><span class="line"><span class="attr">file.upload-path</span>=<span class="string">classpath:static/img/upload</span></span><br><span class="line"><span class="comment">#保存到数据库的地址路径</span></span><br><span class="line"><span class="attr">file.access-path</span>=<span class="string">/img/upload/</span></span><br></pre></td></tr></table></figure>

<h1 id="用户登录验证"><a href="#用户登录验证" class="headerlink" title="用户登录验证"></a>用户登录验证</h1><h2 id="mapper映射"><a href="#mapper映射" class="headerlink" title="mapper映射"></a>mapper映射</h2><p>user_info表的mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//user——info表的mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="comment">//    根据账号查询用户信息</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findUserByCode</span><span class="params">(String userCode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    根据账号查询用户信息</span></span><br><span class="line"><span class="comment">    public User findUserByCode(String userCode);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user_info where user_code=#&#123;userCode&#125; and is_delete=0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类"><a href="#service类" class="headerlink" title="service类"></a>service类</h2><p>定义接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//user_info表的servic接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="comment">//    根据账号查询用户的业务方法</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserBycode</span><span class="params">(String usercode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现服务接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.impl.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//注入Usermapper</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserBycode</span><span class="params">(String usercode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUserByCode(usercode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"><span class="comment">//注入UserService,是用于根据用户信息查询</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="comment">//    注入token</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtils tokenUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击登录按钮之后的请求</span></span><br><span class="line"><span class="comment">//    @RequestBody LoginUser loginUser接收前端传递登录的用户信息的json数据，其中，@RequestBody注解用于将HTTP请求的内容（例如JSON或XML数据）绑定到方法的参数上。</span></span><br><span class="line"><span class="comment">//    这里返回的是响应结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginUser loginUser)</span>&#123;</span><br><span class="line"><span class="comment">//        先校验验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">verificationCode</span> <span class="operator">=</span> loginUser.getVerificationCode();</span><br><span class="line">        <span class="keyword">if</span>(!(redisTemplate.hasKey(verificationCode)))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;验证码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        loginUser的格式如下：</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//   userCode:&quot;admin&quot;</span></span><br><span class="line"><span class="comment">//   userPwd:&quot;123456&quot;</span></span><br><span class="line"><span class="comment">//   verificationCode:&quot;xax4&quot;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//        先根据账号查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserBycode(loginUser.getUserCode());</span><br><span class="line"><span class="comment">//        账号存在</span></span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//         是是否审核</span></span><br><span class="line">            <span class="keyword">if</span>(user.getUserState().equals(WarehouseConstants.USER_STATE_PASS))&#123;</span><br><span class="line"><span class="comment">//             拿到从浏览器传入的密码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userPwd</span> <span class="operator">=</span> loginUser.getUserPwd();</span><br><span class="line"><span class="comment">//                进行md5加密</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> DigestUtil.hmacSign(userPwd);</span><br><span class="line"><span class="comment">//                判断密码是否正确</span></span><br><span class="line">                <span class="keyword">if</span>(s.equals(user.getUserPwd()))&#123;</span><br><span class="line"><span class="comment">//                    密码正确！重点！！</span></span><br><span class="line"><span class="comment">//                    需要状态码成功并且还要生成token,并且存储到了redis</span></span><br><span class="line">                    <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(user.getUserId(),user.getUserCode(),user.getUserName());</span><br><span class="line">                    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> tokenUtils.loginSign(currentUser, userPwd);</span><br><span class="line">                    <span class="comment">//                    将这个token也响应到了前端</span></span><br><span class="line">                    <span class="keyword">return</span> Result.ok(<span class="string">&quot;登录成功！&quot;</span>,token);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;账号未审核！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        不存在</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;账号不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里有一个bug就是，验证码的有效时间是3600s，也就是一个小时。上次得到的验证码只要不超过一个小时，我再输入（即便跟浏览器上显示的验证码图上的不一样），也是可以通过的。</p>
</blockquote>
<h1 id="用户登录限制"><a href="#用户登录限制" class="headerlink" title="用户登录限制"></a>用户登录限制</h1><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.pn.utils.WarehouseConstants;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的登录过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogimCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRedisTemplate</span><span class="params">(StringRedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) resp;</span><br><span class="line"><span class="comment">//      用于存放不需要过滤的路径</span></span><br><span class="line">        List&lt;String&gt; urlList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        urlList.add(<span class="string">&quot;/captcha/captchaImage&quot;</span>);</span><br><span class="line">        urlList.add(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"><span class="comment">//      获取到当前访问的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath();</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(urlList.contains(servletPath))&#123;</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//      其他请求是否携带token，判断redis是否存在</span></span><br><span class="line"><span class="comment">//        拿到请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(WarehouseConstants.HEADER_TOKEN_NAME);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasText(token)&amp;&amp;redisTemplate.hasKey(token))&#123;</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">err</span> <span class="operator">=</span> Result.err(Result.CODE_ERR_UNLOGINED, <span class="string">&quot;你尚未登录！&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSON.toJSONString(err);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.write(jsonStr);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="写配置类"><a href="#写配置类" class="headerlink" title="写配置类"></a>写配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.filter.LogimCheckFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"><span class="comment">//    注册原生servlet过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        创建bean</span></span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">filterRegistrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"><span class="comment">//        new自定义过滤器,这个再filter文件下写好了</span></span><br><span class="line">        <span class="type">LogimCheckFilter</span> <span class="variable">logimCheckFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LogimCheckFilter</span>();</span><br><span class="line"><span class="comment">//        手动注入redis模板</span></span><br><span class="line">        logimCheckFilter.setRedisTemplate(redisTemplate);</span><br><span class="line"><span class="comment">//        注册进去</span></span><br><span class="line">        filterRegistrationBean.setFilter(logimCheckFilter);</span><br><span class="line"><span class="comment">//        指定范围</span></span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="登录之后页面显示该用户名"><a href="#登录之后页面显示该用户名" class="headerlink" title="登录之后页面显示该用户名"></a>登录之后页面显示该用户名</h1><blockquote>
<p>用户名在我们的token中是有的，所以在上面的token工具类中我们是可以将token进行解析，然后获得该用户的信息。其中信息也包括了用户名！</p>
</blockquote>
<p>直接写控制类就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前用户信息的url接口</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/curr-user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">currentUser</span><span class="params">(<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===来来========&quot;</span>);</span><br><span class="line"><span class="comment">//        解析token</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(currentUser);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="登录页面之后加载菜单树"><a href="#登录页面之后加载菜单树" class="headerlink" title="登录页面之后加载菜单树"></a>登录页面之后加载菜单树</h1><blockquote>
<p>因为不同角色所能够使用的权限是不同的，所以其对应的菜单树也是不一样的</p>
<p>使用redis进行缓存，先从redis查看，如果没有再去数据库中找，找到后再存入redis中</p>
</blockquote>
<p>涉及到五种表：</p>
<p>①用户表②角色表③菜单表④用户与角色的中间表⑤角色与菜单的中间表</p>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Auth</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer authId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 父id为空或为0，表示一级权限</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String authName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String authDesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer authGrade;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1 模块 、2  列表、 3  按钮</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String authType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String authUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String authCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer authOrder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1 启用 、0 禁用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String authState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"><span class="comment">//追加属性,存放当前用户的菜单下的子级菜单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Auth&gt; childAuth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper映射-1"><a href="#mapper映射-1" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthMapper</span> &#123;</span><br><span class="line"><span class="comment">//    根据userid查询用户权限下的所有菜单</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">findAuthByUid</span><span class="params">(Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.AuthMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  根据userid查出权限菜单--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAuthByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;auth&quot;</span>&gt;</span></span><br><span class="line">    select t3.*</span><br><span class="line">    from user_role t1,role_auth t2,auth_info t3</span><br><span class="line">    where t1.role_id=t2.role_id and t2.auth_id=t3.auth_id</span><br><span class="line">    and t3.auth_state=1 and t3.auth_type!=3</span><br><span class="line">    and t1.user_id=#&#123;userId&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-1"><a href="#service类-1" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//user_info表的servic接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="comment">//    根据账号查询用户的业务方法</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserBycode</span><span class="params">(String usercode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Auth;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.AuthMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.AuthService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthMapper authMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">authTreeByuid</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line"><span class="comment">//        先从redis中查缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authTreeJson</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;authTree:&quot;</span> + userId);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(authTreeJson)) &#123;</span><br><span class="line"><span class="comment">//            json转List&lt;Auth&gt;</span></span><br><span class="line">            List&lt;Auth&gt; authTreeList = JSON.parseArray(authTreeJson, Auth.class);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> authTreeList;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Auth&gt; allAuthList = authMapper.findAuthByUid(userId);</span><br><span class="line">        List&lt;Auth&gt; authTreeList = allAuthToAuthTree(allAuthList, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//        在redis中缓存</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;authTree:&quot;</span>+userId,JSON.toJSONString(authTreeList));</span><br><span class="line">        <span class="keyword">return</span> authTreeList;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将所有权限(菜单)转成权限(菜单)树的递归算法</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Auth&gt; <span class="title function_">allAuthToAuthTree</span><span class="params">(List&lt;Auth&gt; allAuthList, Integer pid)</span> &#123;</span><br><span class="line">        <span class="comment">//获取父权限(菜单)id为参数parentId的所有权限(菜单)</span></span><br><span class="line">        <span class="comment">//【parentId最初为0,即最初查的是所有一级权限(菜单)】</span></span><br><span class="line">        List&lt;Auth&gt; authList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Auth auth : allAuthList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (auth.getParentId().equals(pid)) &#123;</span><br><span class="line">                authList.add(auth);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询List&lt;Auth&gt; authList中每个权限(菜单)的所有子级权限(菜单)</span></span><br><span class="line">        <span class="keyword">for</span> (Auth auth : authList) &#123;</span><br><span class="line">            List&lt;Auth&gt; childAuthList = allAuthToAuthTree(allAuthList, auth.getAuthId());</span><br><span class="line">            auth.setChildAuth(childAuthList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-1"><a href="#控制类-1" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthService authService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/auth-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">loadAuthTree</span><span class="params">(<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line"><span class="comment">//        从token中拿到userid</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        List&lt;Auth&gt; authTreeList = authService.authTreeByuid(userId);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(authTreeList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h1><blockquote>
<p>退出登录就是从redis中删除当前登录token的键就可以了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">logout</span><span class="params">(<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        redisTemplate.delete(token);</span><br><span class="line"><span class="comment">//        响应</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;退出系统&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="分页查看用户列表"><a href="#分页查看用户列表" class="headerlink" title="分页查看用户列表"></a>分页查看用户列表</h1><h2 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * user_info表的实体类:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> userId;<span class="comment">//用户id</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userCode;<span class="comment">//账号</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userName;<span class="comment">//用户名</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userPwd;<span class="comment">//用户密码</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userType;<span class="comment">//用户类型</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userState;<span class="comment">//用户状态</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String isDelete;<span class="comment">//删除状态</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> createBy;<span class="comment">//创建人</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回前端时,自动将Date转换成指定格式的json字符串</span></span><br><span class="line">	<span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> updateBy;<span class="comment">//修改人</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Date updateTime;<span class="comment">//修改时间</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String getCode;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> userId, String userCode, String userName, String userPwd,</span></span><br><span class="line"><span class="params">			String userType, String userState, String isDelete, <span class="type">int</span> createBy,</span></span><br><span class="line"><span class="params">			Date createTime, <span class="type">int</span> updateBy, Date updateTime)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.userId = userId;</span><br><span class="line">		<span class="built_in">this</span>.userCode = userCode;</span><br><span class="line">		<span class="built_in">this</span>.userName = userName;</span><br><span class="line">		<span class="built_in">this</span>.userPwd = userPwd;</span><br><span class="line">		<span class="built_in">this</span>.userType = userType;</span><br><span class="line">		<span class="built_in">this</span>.userState = userState;</span><br><span class="line">		<span class="built_in">this</span>.isDelete = isDelete;</span><br><span class="line">		<span class="built_in">this</span>.createBy = createBy;</span><br><span class="line">		<span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">		<span class="built_in">this</span>.updateBy = updateBy;</span><br><span class="line">		<span class="built_in">this</span>.updateTime = updateTime;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页信息实体类:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前页码</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每页显示行数</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总行数</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总页数</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//limit函数参数一每页起始行</span></span><br><span class="line">    <span class="keyword">private</span> Integer limitIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储当前页查询到的数据的List&lt;?&gt;集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; resultList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算总页数</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPageCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalNum%pageSize==<span class="number">0</span> ? totalNum/pageSize : totalNum/pageSize+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算limit函数参数一每页起始行</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getLimitIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize * (pageNum-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="mapper映射-2"><a href="#mapper映射-2" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询用户行数</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">findRowCount</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">//    分页查询用户方法</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findUserByPage</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span>Page page,<span class="meta">@Param(&quot;user&quot;)</span> User user)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        查询用户行数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public Integer findRowCount(User user);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findRowCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from user_info</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userCode!=null and userCode != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and user_code like concat(&#x27;%&#x27;,#&#123;userCode&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userType!=null and userType != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and user_Type =#&#123;userType&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userState!=null and userState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and user_State =#&#123;userState&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            and is_delete=0</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        分页查询用户方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public List&lt;User&gt; findUserByPage(@Param(&quot;page&quot;)Page page,@Param(&quot;user&quot;) User user);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select t1.*,t2.user_code getCode</span><br><span class="line">        from user_info t1,user_info t2</span><br><span class="line">        where t1.create_by =t2.user_id and t1.is_delete=0</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user.userCode!=null and user.userCode != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and t1.user_code like concat(&#x27;%&#x27;,#&#123;user.userCode&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user.userType!=null and user.userType != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and t1.user_Type =#&#123;user.userType&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user.userState!=null and user.userState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and t1.user_State =#&#123;user.userState&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        order by t1.create_time desc</span><br><span class="line">        limit #&#123;page.limitIndex&#125;,#&#123;page.pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-2"><a href="#service类-2" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分页查询用户</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryUserPage</span><span class="params">(Page page,User user)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryUserPage</span><span class="params">(Page page, User user)</span> &#123;</span><br><span class="line"><span class="comment">//        查询用户行数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rowCount</span> <span class="operator">=</span> userMapper.findRowCount(user);</span><br><span class="line"><span class="comment">//        分页查询所有信息</span></span><br><span class="line">        List&lt;User&gt; userByPage = userMapper.findUserByPage(page, user);</span><br><span class="line">        page.setTotalNum(rowCount);</span><br><span class="line">        page.setResultList(userByPage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-2"><a href="#控制类-2" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.pn.page.Page;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">userList</span><span class="params">(Page page, User user)</span>&#123;</span><br><span class="line">        page = userService.queryUserPage(page, user);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h1><h2 id="mapper映射-3"><a href="#mapper映射-3" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    添加用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        添加用户--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int insertUser(User user);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into user_info  values(</span><br><span class="line">            null,#&#123;userCode&#125;,#&#123;userName&#125;,#&#123;userPwd&#125;,null,0,0,#&#123;createBy&#125;,now(),null,null</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-3"><a href="#service类-3" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    添加用户</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="comment">//        添加先对账号判断是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> userMapper.findUserByCode(user.getUserCode());</span><br><span class="line">        <span class="keyword">if</span> (u!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;用户已存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        将密码做加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> DigestUtil.hmacSign(user.getUserPwd());</span><br><span class="line">        user.setUserPwd(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.insertUser(user);</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;用户添加成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-3"><a href="#控制类-3" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtils tokenUtils;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user, <span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span>String token)</span>&#123;</span><br><span class="line"><span class="comment">//      拿到当前的用户id</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        user.setCreateBy(userId);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.saveUser(user);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="启动-禁用用户"><a href="#启动-禁用用户" class="headerlink" title="启动&#x2F;禁用用户"></a>启动&#x2F;禁用用户</h1><h2 id="mapper映射-4"><a href="#mapper映射-4" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    启动/禁用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateUserState</span><span class="params">(Integer userId,String userState)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        启动/禁用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int updateUserState(Integer userId,String userState);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserState&quot;</span>&gt;</span></span><br><span class="line">        update user_info set user_state=#&#123;param2&#125; where user_id=#&#123;param1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-4"><a href="#service类-4" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    启动/禁用</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateUserState</span><span class="params">(Integer userId,String userState)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动或禁用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateUserState</span><span class="params">(Integer userId, String userState)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateUserState(userId, userState);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-4"><a href="#控制类-4" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/updateState&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateUserState</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.updateUserState(user.getUserId(), user.getUserState());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="分配角色"><a href="#分配角色" class="headerlink" title="分配角色"></a>分配角色</h1><h2 id="查询所有用户的角色"><a href="#查询所有用户的角色" class="headerlink" title="查询所有用户的角色"></a>查询所有用户的角色</h2><blockquote>
<p>我们使用注解版的方式将角色存入redis</p>
</blockquote>
<h3 id="在启动类添加"><a href="#在启动类添加" class="headerlink" title="在启动类添加"></a>在启动类添加</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启redis注解版缓存</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="comment">//map接口扫描器</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.pn.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WarehouseManagerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(WarehouseManagerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="role实体类"><a href="#role实体类" class="headerlink" title="role实体类"></a>role实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//implements Serializable 将 Role 对象正确地序列化，并将其存储到 Redis 缓存中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1 启用 0 禁用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String roleState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mapper映射-5"><a href="#mapper映射-5" class="headerlink" title="mapper映射"></a>mapper映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> &#123;</span><br><span class="line"><span class="comment">//    查询所有用户的角色</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findAllRole</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.RoleMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      查询所有用户的角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public List&lt;Role&gt; findAllRole();--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllRole&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">    select * from role where role_state=1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service类-5"><a href="#service类-5" class="headerlink" title="service类"></a>service类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleService</span>&#123;</span><br><span class="line"><span class="comment">//    查询所有用户角色</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">queryAllRoleo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Role;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.RoleMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.RoleService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;com.pn.service.impl.RoleServiceImpl&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RoleService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleMapper roleMapper;</span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;&#x27;all:role&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">queryAllRoleo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roleMapper.findAllRole();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制类-5"><a href="#控制类-5" class="headerlink" title="控制类"></a>控制类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Role;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.RoleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/role&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line"><span class="comment">//    查询所有用户的角色</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">roleList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Role&gt; roles = roleService.queryAllRoleo();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(roles);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询某个用户id所拥有的角色"><a href="#查询某个用户id所拥有的角色" class="headerlink" title="查询某个用户id所拥有的角色"></a>查询某个用户id所拥有的角色</h2><h3 id="mapper映射-6"><a href="#mapper映射-6" class="headerlink" title="mapper映射"></a>mapper映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据用户id查到角色列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findUserRoleByUid</span><span class="params">(Integer UserId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    根据用户id查到角色列表--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        public List&lt;Role&gt; findUserRoleByUid(Integer UserId);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserRoleByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">  select t2.* from user_role t1,role t2</span><br><span class="line">  where t1.role_id=t2.role_id</span><br><span class="line">  and t1.user_id=#&#123;userId&#125;</span><br><span class="line">  and t2.role_state=1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service类-6"><a href="#service类-6" class="headerlink" title="service类"></a>service类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据用户id查到角色列表</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">queryUserRoleByUid</span><span class="params">(Integer UserId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<blockquote>
<p>用户角色经常会变 所以不需要加入缓存中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">queryUserRoleByUid</span><span class="params">(Integer UserId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> roleMapper.findUserRoleByUid(UserId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制类-6"><a href="#控制类-6" class="headerlink" title="控制类"></a>控制类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RoleService roleService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    查询某个用户的角色</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user-role-list/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">userRoleList</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId)</span> &#123;</span><br><span class="line">    List&lt;Role&gt; userRoles = roleService.queryUserRoleByUid(userId);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(userRoles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分配角色-1"><a href="#分配角色-1" class="headerlink" title="分配角色"></a>分配角色</h2><h3 id="实体类-2"><a href="#实体类-2" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssignRoleDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; roleCheckList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mapper映射-7"><a href="#mapper映射-7" class="headerlink" title="mapper映射"></a>mapper映射</h3><ul>
<li>根据用户id删除该用户的角色</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分配之前应该先将该用户原有的角色进行删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUserRoleByUid</span><span class="params">(Integer userId)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    分配之前应该先将该用户原有的角色进行删除--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int deleteUserRoleByUid(Integer userId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserRoleByUid&quot;</span>&gt;</span></span><br><span class="line">        delete from user_role where user_id=#&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>根据角色名字查找角色id</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据角色名来查询其对应的id</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">findRoleIdByName</span><span class="params">(String roleNmae)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //    根据角色名来查询其对应的id--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public Integer findRoleIdByName(String roleNmae);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findRoleIdByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">    select role_id from role where role_name=#&#123;roleNmae&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>分配</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据用户的id，角色id，给用户分配角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">assignUserRole</span><span class="params">(UserRole userRole)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    根据用户的id，角色id，给用户分配角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int assignUserRole(UserRole userRole);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;assignUserRole&quot;</span>&gt;</span></span><br><span class="line">         insert into user_role values(null,#&#123;roleId&#125;,#&#123;userId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service类-7"><a href="#service类-7" class="headerlink" title="service类"></a>service类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分配角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assufbRole</span><span class="params">(AssignRoleDto assignRoleDto)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleMapper roleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleMapper userRoleMapper;</span><br><span class="line"><span class="comment">//    要加上事务处理</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assufbRole</span><span class="params">(AssignRoleDto assignRoleDto)</span> &#123;</span><br><span class="line"><span class="comment">//        首先先进行该用户角色的删除</span></span><br><span class="line">        userRoleMapper.deleteUserRoleByUid(assignRoleDto.getUserId());</span><br><span class="line">            List&lt;String&gt; roleNameList = assignRoleDto.getRoleCheckList();</span><br><span class="line">            <span class="keyword">for</span> (String roleNmae : roleNameList) &#123;</span><br><span class="line"><span class="comment">//                循环取出该角色的id</span></span><br><span class="line">                <span class="type">Integer</span> <span class="variable">roleId</span> <span class="operator">=</span> roleMapper.findRoleIdByName(roleNmae);</span><br><span class="line"><span class="comment">//                创建一个UserRole，存入两个id后进行添加</span></span><br><span class="line">                <span class="type">UserRole</span> <span class="variable">userRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRole</span>();</span><br><span class="line">                userRole.setRoleId(roleId);</span><br><span class="line">                userRole.setUserId(assignRoleDto.getUserId());</span><br><span class="line"><span class="comment">//              添加</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> userRoleMapper.assignUserRole(userRole);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制类-7"><a href="#控制类-7" class="headerlink" title="控制类"></a>控制类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    给用户分配角色</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/assignRole&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">assignUserRole</span><span class="params">(<span class="meta">@RequestBody</span> AssignRoleDto assignRoleDto)</span>&#123;</span><br><span class="line">        userService.assufbRole(assignRoleDto);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;成功分配&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h1><h2 id="mapper映射-8"><a href="#mapper映射-8" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setIsDeleteByUids</span><span class="params">(List&lt;Integer&gt; userIdList)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    删除用户--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int setIsDeleteByUids(List&lt;Integer&gt; userIdList);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;setIsDeleteByUids&quot;</span>&gt;</span></span><br><span class="line">        update user_info set is_delete=1 where user_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;userId&quot;</span>&gt;</span></span><br><span class="line">            #&#123;userId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-8"><a href="#service类-8" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">deleteUserByUids</span><span class="params">(List&lt;Integer&gt; userIdList)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.setIsDeleteByUids(userIdList);</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;用户删除成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;用户删除失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-8"><a href="#控制类-8" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除用户(单个)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteUser/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.deleteUserByUids(Arrays.asList(userId));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    删除用户（多个）</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteUserList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteUserByIds</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Integer&gt; userIdList)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.deleteUserByUids(userIdList);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改用户昵称和重置密码"><a href="#修改用户昵称和重置密码" class="headerlink" title="修改用户昵称和重置密码"></a>修改用户昵称和重置密码</h1><h2 id="mapper映射-9"><a href="#mapper映射-9" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据id修改用户名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setUserNameById</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">//    重置密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setPwdById</span><span class="params">(Integer userId,String password)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    根据id修改用户名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int SetUserNameById(User user);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;setUserNameById&quot;</span>&gt;</span></span><br><span class="line">        update user_info</span><br><span class="line">        set</span><br><span class="line">        user_name=#&#123;userName&#125;,update_by=#&#123;updateBy&#125;,update_time=now()</span><br><span class="line">        where user_id=#&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    //    重置密码--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int setPwdById(Integer userId,String password);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;setPwdById&quot;</span>&gt;</span></span><br><span class="line">        update user_info set user_pwd=#&#123;param2&#125; where user_id=#&#123;param1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-9"><a href="#service类-9" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据用户id修改用户名</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserById</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">//    重置密码</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserPedById</span><span class="params">(Integer userId)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//    修改用户名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserById</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.setUserNameById(user);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;用户修改成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;用户修改失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    重置密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserPedById</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line"><span class="comment">//加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> DigestUtil.hmacSign(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.setPwdById(userId, pwd);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;密码重置成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;密码重置失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-9"><a href="#控制类-9" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改用户名（根据id）</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserNameById</span><span class="params">(<span class="meta">@RequestBody</span> User user,<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        user.setUpdateBy(userId);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.setUserById(user);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    重置密码</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updatePwd/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserPwdById</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.setUserPedById(userId);</span><br><span class="line">        <span class="keyword">return</span>  result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="分页查看角色"><a href="#分页查看角色" class="headerlink" title="分页查看角色"></a>分页查看角色</h1><h2 id="实体类-3"><a href="#实体类-3" class="headerlink" title="实体类"></a>实体类</h2><blockquote>
<p>这里的创建时间需要格式化一下时间，我使用了注解的方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//implements Serializable 将 Role 对象正确地序列化，并将其存储到 Redis 缓存中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1 启用 0 禁用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String roleState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer createBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String getCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper映射-10"><a href="#mapper映射-10" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询角色行数</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">findRowRoleCount</span><span class="params">(Role role)</span>;</span><br><span class="line"><span class="comment">//    分页查询角色方法</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findRoleByPage</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page page, <span class="meta">@Param(&quot;role&quot;)</span> Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        查询角色行数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        public Integer findRowRoleCount(Role role);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findRowRoleCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">  select count(*) from role</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;roleName != null and roleName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and role_name like concat(&#x27;%&#x27;, #&#123;roleName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;roleCode != null and roleCode != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and role_code like concat(&#x27;%&#x27;, #&#123;roleCode&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;roleState != null and roleState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and role_state = #&#123;roleState&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        分页查询角色方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        public List&lt;Role&gt; findRoleByPage(@Param(&quot;page&quot;) Page page, @Param(&quot;role&quot;) Role role);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findRoleByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">  select t1.*, t2.user_code getCode from role t1, user_info t2</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  and t1.create_by = t2.user_id</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;role.roleName != null and role.roleName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.role_name like concat(&#x27;%&#x27;, #&#123;role.roleName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;role.roleCode != null and role.roleCode != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.role_code like concat(&#x27;%&#x27;, #&#123;role.roleCode&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;role.roleState != null and role.roleState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.role_state = #&#123;role.roleState&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  order by t1.create_time desc</span><br><span class="line">  limit #&#123;page.limitIndex&#125;,#&#123;page.pageSize&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-10"><a href="#service类-10" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询角色</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryRolePage</span><span class="params">(Page page,Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//    分页查询角色</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryRolePage</span><span class="params">(Page page, Role role)</span> &#123;</span><br><span class="line"><span class="comment">//        查询条数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rowRoleCount</span> <span class="operator">=</span> roleMapper.findRowRoleCount(role);</span><br><span class="line"><span class="comment">//        System.out.println(rowRoleCount);</span></span><br><span class="line"><span class="comment">//        分页查询</span></span><br><span class="line">        List&lt;Role&gt; roleByPage = roleMapper.findRoleByPage(page, role);</span><br><span class="line">        page.setTotalNum(rowRoleCount);</span><br><span class="line">        page.setResultList(roleByPage);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-10"><a href="#控制类-10" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分页查询角色</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/role-page-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">roleListPage</span><span class="params">(Page page, Role role)</span>&#123;</span><br><span class="line">    <span class="type">Page</span> <span class="variable">page1</span> <span class="operator">=</span> roleService.queryRolePage(page, role);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(page1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="添加角色"><a href="#添加角色" class="headerlink" title="添加角色"></a>添加角色</h1><h2 id="mapper映射-11"><a href="#mapper映射-11" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    添加角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertRole</span><span class="params">(Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //    添加角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int insertRole(Role role);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertRole&quot;</span>&gt;</span></span><br><span class="line">    insert into role values (</span><br><span class="line">        null,#&#123;roleName&#125;,#&#123;roleDesc&#125;,#&#123;roleCode&#125;,0,#&#123;createBy&#125;,now(),null,null</span><br><span class="line">    )</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-11"><a href="#service类-11" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    添加角色</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savaRole</span><span class="params">(Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<blockquote>
<p>添加之后记得要清除缓存！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:role&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savaRole</span><span class="params">(Role role)</span> &#123;</span><br><span class="line"><span class="comment">//        先进行判断角色是否存在</span></span><br><span class="line">        <span class="type">Role</span> <span class="variable">roleByNameOrCode</span> <span class="operator">=</span> roleMapper.findRoleByNameOrCode(role.getRoleName(), role.getRoleCode());</span><br><span class="line">        <span class="keyword">if</span>(roleByNameOrCode!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;角色已存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> roleMapper.insertRole(role);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;角色添加成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;角色已存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-11"><a href="#控制类-11" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> TokenUtils tokenUtils;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//添加角色</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/role-add&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">saveRole</span><span class="params">(<span class="meta">@RequestBody</span> Role role, <span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span> &#123;</span><br><span class="line">     <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">     <span class="type">int</span> <span class="variable">createBy</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">     role.setCreateBy(createBy);</span><br><span class="line">     <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> roleService.savaRole(role);</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="删除角色"><a href="#删除角色" class="headerlink" title="删除角色"></a>删除角色</h1><h2 id="mapper映射-12"><a href="#mapper映射-12" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeRoleById</span><span class="params">(Integer RoleId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    删除角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int removeRoleById(Integer RoleId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;removeRoleById&quot;</span>&gt;</span></span><br><span class="line">        delete from role where role_id=#&#123;RoleId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-12"><a href="#service类-12" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除角色</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">removeRole</span><span class="params">(Integer roleId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现（将redis的缓存删除）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除角色</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleAuthMapper roleAuthMapper;</span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:role&#x27;&quot;)</span></span><br><span class="line"><span class="comment">//    开启事务</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">removeRole</span><span class="params">(Integer roleId)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> roleMapper.removeRoleById(roleId);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            roleAuthMapper.removeRoleAuthByRid(roleId);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;角色删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;角色删除失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-12"><a href="#控制类-12" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//    删除角色</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role-delete/&#123;roleId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteRole</span><span class="params">(<span class="meta">@PathVariable</span> Integer roleId)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> roleService.removeRole(roleId);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="查看所有权限菜单树以及该角色拥有的权限菜单树"><a href="#查看所有权限菜单树以及该角色拥有的权限菜单树" class="headerlink" title="查看所有权限菜单树以及该角色拥有的权限菜单树"></a>查看所有权限菜单树以及该角色拥有的权限菜单树</h1><h2 id="mapper映射-13"><a href="#mapper映射-13" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询所有权限菜单</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">findAllAuth</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据角色id获取权限id</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAuthIdByRid</span><span class="params">(Integer roleId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    查询所有权限菜单--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public List&lt;Auth&gt; findAllAuth();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllAuth&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;auth&quot;</span>&gt;</span></span><br><span class="line">        select * from auth_info where auth_state=1 and auth_type!=3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //    根据角色id获取权限id--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public List&lt;Integer&gt; findAuthIdByRid(Integer roleId);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAuthIdByRid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">        select auth_id from role_auth where role_id =#&#123;roleId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-13"><a href="#service类-13" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查找所有权限菜单树</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">allAuthTree</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询角色中的权限id</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">queryRoleAuthId</span><span class="params">(Integer roleId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//查找所有权限的菜单树</span></span><br><span class="line"><span class="comment">//    指定缓存的键</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;&#x27;all:authTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">allAuthTree</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        先查所有权限菜单</span></span><br><span class="line">        List&lt;Auth&gt; allAuthList = authMapper.findAllAuth();</span><br><span class="line"><span class="comment">//        转成菜单树</span></span><br><span class="line">        List&lt;Auth&gt; authTreeList = allAuthToAuthTree(allAuthList, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> authTreeList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询角色中的权限id</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">queryRoleAuthId</span><span class="params">(Integer roleId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roleAuthMapper.findAuthIdByRid(roleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-13"><a href="#控制类-13" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Auth;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.AuthService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthService authService;</span><br><span class="line"><span class="comment">//    响应所有权限的菜单树</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/auth-tree&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">LoadAllAuth</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Auth&gt; allAuth = authService.allAuthTree();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(allAuth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查看该角色的菜单表</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role-auth&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">roleAuth</span><span class="params">(Integer roleId)</span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;id是&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(roleId);</span></span><br><span class="line">        List&lt;Integer&gt; authList = roleService.queryRoleAuthId(roleId);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;=============&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(authList);</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(authList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改角色权限"><a href="#修改角色权限" class="headerlink" title="修改角色权限"></a>修改角色权限</h1><h2 id="实体类-4"><a href="#实体类-4" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收给角色分配的请求json数据的dto类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssignAuthDto</span> &#123;</span><br><span class="line"><span class="comment">//    角色id</span></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line"><span class="comment">//    权限id</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; authIds;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper映射-14"><a href="#mapper映射-14" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.UserRole;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRoleMapper</span> &#123;</span><br><span class="line"><span class="comment">//    分配之前应该先将该用户原有的角色进行删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUserRoleByUid</span><span class="params">(Integer userId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    根据用户的id，角色id，给用户分配角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">assignUserRole</span><span class="params">(UserRole userRole)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.UserRoleMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    //    分配之前应该先将该用户原有的角色进行删除--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int deleteUserRoleByUid(Integer userId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserRoleByUid&quot;</span>&gt;</span></span><br><span class="line">        delete from user_role where user_id=#&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    //    根据用户的id，角色id，给用户分配角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int assignUserRole(UserRole userRole);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;assignUserRole&quot;</span>&gt;</span></span><br><span class="line">         insert into user_role values(null,#&#123;roleId&#125;,#&#123;userId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-14"><a href="#service类-14" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分配角色的权限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveRoleAuth</span><span class="params">(AssignAuthDto assignAuthDto)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分配角色的权限</span></span><br><span class="line"><span class="comment">//    开启事务</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveRoleAuth</span><span class="params">(AssignAuthDto assignAuthDto)</span> &#123;</span><br><span class="line"><span class="comment">//        先删除该角色的所有权限</span></span><br><span class="line">        roleAuthMapper.removeRoleAuthByRid(assignAuthDto.getRoleId());</span><br><span class="line"><span class="comment">//分配角色</span></span><br><span class="line">        List&lt;Integer&gt; authList = assignAuthDto.getAuthIds();</span><br><span class="line">        <span class="keyword">for</span> (Integer authId:authList)&#123;</span><br><span class="line">            <span class="type">RoleAuth</span> <span class="variable">roleAuth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleAuth</span>();</span><br><span class="line">            roleAuth.setRoleId(assignAuthDto.getRoleId());</span><br><span class="line">            roleAuth.setAuthId(authId);</span><br><span class="line">            roleAuthMapper.insertRoleAuth(roleAuth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-14"><a href="#控制类-14" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    给角色分配权限</span></span><br><span class="line"><span class="comment">//    传来的是json串数据&#123;roleId: &quot;17&quot;, authIds: [61, 62]&#125;</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/auth-grant&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">grantAuth</span><span class="params">(<span class="meta">@RequestBody</span> AssignAuthDto assignAuthDto)</span>&#123;</span><br><span class="line">        roleService.saveRoleAuth(assignAuthDto);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;权限分配成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改角色描述"><a href="#修改角色描述" class="headerlink" title="修改角色描述"></a>修改角色描述</h1><h2 id="mapper映射-15"><a href="#mapper映射-15" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改角色描述</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">setDescByRid</span><span class="params">(Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //修改角色描述--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public  int setDescByRid(Role role);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;setDescByRid&quot;</span>&gt;</span></span><br><span class="line">        update role set role_desc=#&#123;roleDesc&#125;,update_by=#&#123;updateBy&#125;,update_time=now()</span><br><span class="line">        where role_id=#&#123;roleId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-15"><a href="#service类-15" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改角色描述</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setRoleByRid</span><span class="params">(Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改角色描述</span></span><br><span class="line"><span class="meta">@CacheEvict(key = &quot;&#x27;all:role&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">setRoleByRid</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> roleMapper.setDescByRid(role);</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;角色描述修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;角色描述修改失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-15"><a href="#控制类-15" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改角色描述</span></span><br><span class="line"><span class="comment">//    传来的还是json&#123;roleId: 18, roleName: &quot;测试&quot;, roleDesc: &quot;&quot;&#125;</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role-update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateRoleMs</span><span class="params">(<span class="meta">@RequestBody</span> Role role,<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">updateUserId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        role.setUpdateBy(updateUserId);</span><br><span class="line">        <span class="keyword">return</span> roleService.setRoleByRid(role);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>项目记录</category>
      </categories>
  </entry>
  <entry>
    <title>动力恒合仓库项目2</title>
    <url>/2024/04/28/warehouse2/</url>
    <content><![CDATA[<h1 id="商品列表"><a href="#商品列表" class="headerlink" title="商品列表"></a>商品列表</h1><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer productId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer storeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer brandId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String productNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer productInvent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer typeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer supplyId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer placeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer unitId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String introduce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 0 下架 1 上架</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String upDownState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal inPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal salePrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal memPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String imgs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date productDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date suppDate;</span><br><span class="line"><span class="comment">//    =======追加属性=======</span></span><br><span class="line"><span class="comment">//    品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line"><span class="comment">//    供应商</span></span><br><span class="line">    <span class="keyword">private</span> String supplyName;</span><br><span class="line"><span class="comment">//    地名</span></span><br><span class="line">    <span class="keyword">private</span> String placeName;</span><br><span class="line"><span class="comment">//    分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"><span class="comment">//    是否过期</span></span><br><span class="line">    <span class="keyword">private</span> Integer isOverDate;</span><br><span class="line"><span class="comment">//    仓库名称</span></span><br><span class="line">    <span class="keyword">private</span> String storeName;</span><br><span class="line"><span class="comment">//    单位</span></span><br><span class="line">    <span class="keyword">private</span> String unitName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper类"><a href="#mapper类" class="headerlink" title="mapper类"></a>mapper类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.pn.page.Page;</span><br><span class="line"><span class="keyword">import</span> io.lettuce.core.dynamic.annotation.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line"><span class="comment">//    查询商品行数</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">findProductRowCount</span><span class="params">(Product product)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    分页查询商品方法</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">findProductPage</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page page,<span class="meta">@Param(&quot;product&quot;)</span> Product product)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  //    查询商品行数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public Integer findProductRowCount(Product product);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findProductRowCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">  select count(*)</span><br><span class="line">  from product t1,brand t2,product_type t3,supply t4,place t5</span><br><span class="line">  where t1.brand_id=t2.brand_id and t1.type_id=t3.type_id and t1.supply_id=t4.supply_id and t1.place_id=t5.place_id</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;storeId != null&quot;</span>&gt;</span></span><br><span class="line">    and t1.store_id = #&#123;storeId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;productName != null and productName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.product_name like concat(&#x27;%&#x27;,#&#123;productName&#125;,&#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!= null and brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t2.brand_name like concat(&#x27;%&#x27;, #&#123;brandName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeName != null and typeName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t3.type_name like concat(&#x27;%&#x27;, #&#123;typeName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;supplyName != null and supplyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t4.supply_name like concat(&#x27;%&#x27;, #&#123;supplyName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;placeName != null and placeName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t5.place_name like concat(&#x27;%&#x27;, #&#123;placeName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;upDownState != null and upDownState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.up_down_state = #&#123;upDownState&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isOverDate==1&quot;</span>&gt;</span></span><br><span class="line">    and t1.supp_date <span class="symbol">&amp;lt;</span>=now()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isOverDate==0&quot;</span>&gt;</span></span><br><span class="line">    and t1.supp_date <span class="symbol">&amp;gt;</span>now()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  //    分页查询商品方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public List&lt;Product&gt; findProductPage(@Param(&quot;page&quot;) Page page,@Param(&quot;product&quot;) Product product);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findProductPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">    select t1.*, t2.brand_name brandName, t3.type_name typeName,t4.supply_name supplyName,</span><br><span class="line">           t5.place_name placeName, t6.unit_name unitName,t7.store_name storeName</span><br><span class="line">    from product t1,brand t2,product_type t3,supply t4,place t5,unit t6,store t7</span><br><span class="line">    where t1.brand_id=t2.brand_id and t1.type_id=t3.type_id and t1.supply_id=t4.supply_id and t1.place_id=t5.place_id</span><br><span class="line">      and t1.unit_id=t6.unit_id and t1.store_id=t7.store_id</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.storeId != null&quot;</span>&gt;</span></span><br><span class="line">      and t1.store_id = #&#123;product.storeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.productName != null and product.productName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t1.product_name like concat(&#x27;%&#x27;,#&#123;product.productName&#125;,&#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.brandName!= null and product.brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t2.brand_name like concat(&#x27;%&#x27;, #&#123;product.brandName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.typeName != null and product.typeName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t3.type_name like concat(&#x27;%&#x27;, #&#123;product.typeName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.supplyName != null and product.supplyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t4.supply_name like concat(&#x27;%&#x27;, #&#123;product.supplyName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.placeName != null and product.placeName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t5.place_name like concat(&#x27;%&#x27;, #&#123;placeName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.upDownState != null and product.upDownState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t1.up_down_state = #&#123;product.upDownState&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.isOverDate==1&quot;</span>&gt;</span></span><br><span class="line">      and t1.supp_date <span class="symbol">&amp;lt;</span>=now()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.isOverDate==0&quot;</span>&gt;</span></span><br><span class="line">      and t1.supp_date <span class="symbol">&amp;gt;</span>now()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    order by t1.create_time desc</span><br><span class="line">    limit #&#123;page.limitIndex&#125;, #&#123;page.pageSize&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类"><a href="#service类" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.pn.page.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line"><span class="comment">//    分页查询所有商品</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryProductPage</span><span class="params">(Page page, Product product)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.pn.page.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.ProductService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    分页查询所有商品</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryProductPage</span><span class="params">(Page page, Product product)</span> &#123;</span><br><span class="line"><span class="comment">//        查询行数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> productMapper.findProductRowCount(product);</span><br><span class="line">        List&lt;Product&gt; productPage = productMapper.findProductPage(page, product);</span><br><span class="line">        page.setTotalNum(count);</span><br><span class="line">        page.setResultList(productPage);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"><span class="comment">//    分页查询所有商品</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;product-page-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">productListPage</span><span class="params">(Page page, Product product)</span>&#123;</span><br><span class="line">        page = productService.queryProductPage(page, product);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(page);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改过滤器"><a href="#修改过滤器" class="headerlink" title="修改过滤器"></a>修改过滤器</h2><blockquote>
<p>图片要显示出来，所有过滤要添加白名单</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath();</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(urlList.contains(servletPath)||servletPath.contains(<span class="string">&quot;/img/upload&quot;</span>))&#123;</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h1 id="查看商品类别"><a href="#查看商品类别" class="headerlink" title="查看商品类别"></a>查看商品类别</h1><h2 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品分类表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductType</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer typeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeDesc;</span><br><span class="line"><span class="comment">//    追加</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ProductType&gt; ChildProductCategory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper映射"><a href="#mapper映射" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.ProductType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductTypeMapper</span> &#123;</span><br><span class="line"><span class="comment">//    查询商品分类</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ProductType&gt; <span class="title function_">findAllProductType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.ProductTypeMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  //    查询商品分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public List&lt;ProductType&gt; findAllProductType();--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllProductType&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;productType&quot;</span>&gt;</span></span><br><span class="line">    select * from product_type</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-1"><a href="#service类-1" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.ProductType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductTypeService</span>&#123;</span><br><span class="line"><span class="comment">//    查询所有商品的分类树</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ProductType&gt; <span class="title function_">productTypeTree</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.ProductType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.ProductTypeMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.ProductTypeService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;com.pn.service.impl.ProductTypeServiceImpl&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductTypeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductTypeService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductTypeMapper productTypeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    查询所有商品的分类树</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;&#x27;all:typeTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ProductType&gt; <span class="title function_">productTypeTree</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;ProductType&gt; productTypeList = productTypeMapper.findAllProductType();</span><br><span class="line">        List&lt;ProductType&gt; productTree = allTypeToTypeTree(productTypeList, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> productTree;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将查询到的所有商品分类List&lt;ProductType&gt;转成商品分类树List&lt;ProductType&gt;的算法</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ProductType&gt; <span class="title function_">allTypeToTypeTree</span><span class="params">(List&lt;ProductType&gt; allTypeList,</span></span><br><span class="line"><span class="params">                                                Integer parentId)</span>&#123;</span><br><span class="line"><span class="comment">//一级</span></span><br><span class="line">        List&lt;ProductType&gt; typeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ProductType productType : allTypeList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(productType.getParentId().equals(parentId))&#123;</span><br><span class="line">                typeList.add(productType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ProductType productType : typeList) &#123;</span><br><span class="line">            List&lt;ProductType&gt; childTypeList =</span><br><span class="line">                    allTypeToTypeTree(allTypeList, productType.getTypeId());</span><br><span class="line">            productType.setChildProductCategory(childTypeList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> typeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-1"><a href="#控制类-1" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询所有商品分类树</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductTypeService productTypeService;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category-tree&quot;)</span></span><br><span class="line"><span class="keyword">public</span>  Result <span class="title function_">loadProductTree</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;ProductType&gt; typeTreeList = productTypeService.productTypeTree();</span><br><span class="line">    <span class="keyword">return</span> Result.ok(typeTreeList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="商品的图片上传"><a href="#商品的图片上传" class="headerlink" title="商品的图片上传"></a>商品的图片上传</h1><h2 id="控制类-2"><a href="#控制类-2" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将配置文件的file.upload-path属性值注入给控制器的uploadPath属性,</span></span><br><span class="line"><span class="comment">    * 其为图片上传到项目的目录路径(类路径classes即resources下的static/img/upload);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;file.upload-path&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String uploadPath;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 上传图片的url接口/product/img-upload</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 参数MultipartFile file对象封装了上传的图片;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@CrossOrigin</span>表示该url接口允许跨域请求;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@CrossOrigin</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/img-upload&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">uploadImg</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//拿到图片上传到的目录(类路径classes下的static/img/upload)的File对象</span></span><br><span class="line">           <span class="type">File</span> <span class="variable">uploadDirFile</span> <span class="operator">=</span> ResourceUtils.getFile(uploadPath);</span><br><span class="line">           <span class="comment">//拿到图片上传到的目录的磁盘路径</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">uploadDirPath</span> <span class="operator">=</span> uploadDirFile.getAbsolutePath();</span><br><span class="line">           <span class="comment">//拿到图片保存到的磁盘路径</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">fileUploadPath</span> <span class="operator">=</span> uploadDirPath + <span class="string">&quot;\\&quot;</span> + file.getOriginalFilename();</span><br><span class="line">           <span class="comment">//保存图片</span></span><br><span class="line">           file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(fileUploadPath));</span><br><span class="line">           <span class="comment">//成功响应</span></span><br><span class="line">           <span class="keyword">return</span> Result.ok(<span class="string">&quot;图片上传成功！&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           <span class="comment">//失败响应</span></span><br><span class="line">           <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;图片上传失败！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="商品添加"><a href="#商品添加" class="headerlink" title="商品添加"></a>商品添加</h1><h2 id="mapper映射-1"><a href="#mapper映射-1" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  根据型号查询商品是否存在</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findProductByNum</span><span class="params">(String productNum)</span>;</span><br><span class="line"><span class="comment">//    商品添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertProduct</span><span class="params">(Product product)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //  根据型号查询商品是否存在--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public Product findProductByNum(String productNum);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findProductByNum&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">    select * from product where product_num=#&#123;productNum&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  //    商品添加--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int insertProduct(Product product);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertProduct&quot;</span>&gt;</span></span><br><span class="line">    insert into product values (</span><br><span class="line">    null, #&#123;storeId&#125;, #&#123;brandId&#125;, #&#123;productName&#125;, #&#123;productNum&#125;,</span><br><span class="line">    #&#123;productInvent&#125;, #&#123;typeId&#125;, #&#123;supplyId&#125;, #&#123;placeId&#125;, #&#123;unitId&#125;,</span><br><span class="line">    #&#123;introduce&#125;, 0, #&#123;inPrice&#125;, #&#123;salePrice&#125;, #&#123;memPrice&#125;, now(),</span><br><span class="line">    null, #&#123;createBy&#125;, null, #&#123;imgs&#125;, #&#123;productDate&#125;, #&#123;suppDate&#125;</span><br><span class="line">    )</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-2"><a href="#service类-2" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加商品</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savaProduct</span><span class="params">(Product product)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Value(&quot;$&#123;file.access-path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String fileAccessPath;</span><br><span class="line">    <span class="comment">//添加商品</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savaProduct</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">        <span class="comment">//        先判断是否存在相同的商品编号</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productByNum</span> <span class="operator">=</span> productMapper.findProductByNum(product.getProductNum());</span><br><span class="line">        <span class="keyword">if</span>(productByNum!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//            已经存在</span></span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;商品已经存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        图片路径拼接一下类路径</span></span><br><span class="line">        product.setImgs(fileAccessPath + product.getImgs());</span><br><span class="line"><span class="comment">//        添加商品</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productMapper.insertProduct(product);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;插入商品成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;商品插入失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-3"><a href="#控制类-3" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtils tokenUtils;</span><br><span class="line"><span class="comment">//    商品添加</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/product-add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addProduct</span><span class="params">(<span class="meta">@RequestBody</span> Product product, <span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line"><span class="comment">//        获取到当前用户的id</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">createUserId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        product.setCreateBy(createUserId);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productService.savaProduct(product);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>商品的上架、删除（单个、批量）跟之前用户是一样的，不再赘述</p>
</blockquote>
<h1 id="商品的修改"><a href="#商品的修改" class="headerlink" title="商品的修改"></a>商品的修改</h1><h2 id="mapper映射-2"><a href="#mapper映射-2" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据商品id修改商品的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateProductById</span><span class="params">(Product product)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //根据商品id修改商品的方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int updateProductById(Product product);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateProductById&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--商品上下架状态、创建时间、创建者字段值不用改--&gt;</span></span><br><span class="line">    update product set store_id = #&#123;storeId&#125;, brand_id = #&#123;brandId&#125;,</span><br><span class="line">    product_name = #&#123;productName&#125;, product_num = #&#123;productNum&#125;,</span><br><span class="line">    product_invent = #&#123;productInvent&#125;, type_id = #&#123;typeId&#125;,</span><br><span class="line">    supply_id = #&#123;supplyId&#125;, place_id = #&#123;placeId&#125;, unit_id = #&#123;unitId&#125;,</span><br><span class="line">    introduce = #&#123;introduce&#125;, in_price = #&#123;inPrice&#125;, sale_price = #&#123;salePrice&#125;,</span><br><span class="line">    mem_price = #&#123;memPrice&#125;, update_time = now(), update_by = #&#123;updateBy&#125;,</span><br><span class="line">    imgs = #&#123;imgs&#125;, product_date = #&#123;productDate&#125;, supp_date = #&#123;suppDate&#125;</span><br><span class="line">    where product_id = #&#123;productId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-3"><a href="#service类-3" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改商品的业务方法</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">updateProduct</span><span class="params">(Product product)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Value(&quot;$&#123;file.access-path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessPath;</span><br><span class="line">    <span class="comment">//修改商品的业务方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateProduct</span><span class="params">(Product product)</span> &#123;</span><br><span class="line"><span class="comment">//        先判断是否修改了存在的型号（不包括本身自己，如果是本身自己表示没改型号）</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productByNum</span> <span class="operator">=</span> productMapper.findProductByNum(product.getProductNum());</span><br><span class="line">        <span class="keyword">if</span>(productByNum!=<span class="literal">null</span> &amp;&amp; !productByNum.getProductId().equals(product.getProductId()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;你修改的型号已存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          处理商品上传的图片的访问地址:</span></span><br><span class="line"><span class="comment">          如果product对象的imgs属性值没有以/img/upload/开始,说明商品的图片</span></span><br><span class="line"><span class="comment">          被修改了即上传了新的图片,那么product对象的imgs属性值只是图片的名称,</span></span><br><span class="line"><span class="comment">          则给图片名称前拼接/img/upload构成商品新上传的图片的访问地址;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(!product.getImgs().startsWith(accessPath))&#123;</span><br><span class="line">            product.setImgs(accessPath+product.getImgs());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据商品id修改商品信息</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productMapper.updateProductById(product);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;商品修改成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;商品修改失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-4"><a href="#控制类-4" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改商品</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/product-update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateProduct</span><span class="params">(<span class="meta">@RequestBody</span> Product product,<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        <span class="comment">//        获取到当前用户的id</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">uptateUserId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        product.setUpdateBy(uptateUserId);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productService.updateProduct(product);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="采购"><a href="#采购" class="headerlink" title="采购"></a>采购</h1><h2 id="mapper映射-3"><a href="#mapper映射-3" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加采购单</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertPurchase</span><span class="params">(Purchase purchase)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //添加采购单--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int insertPurchase(Purchase purchase);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertPurchase&quot;</span>&gt;</span></span><br><span class="line">    insert into buy_list values(</span><br><span class="line">    null, #&#123;productId&#125;, #&#123;storeId&#125;, #&#123;buyNum&#125;, null, now(),</span><br><span class="line">    #&#123;supplyId&#125;, #&#123;placeId&#125;, #&#123;buyUser&#125;, #&#123;phone&#125;, 0</span><br><span class="line">    )</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-4"><a href="#service类-4" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加采购单</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">savePurchase</span><span class="params">(Purchase purchase)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PurchaseMapper purchaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    添加采购单</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savePurchase</span><span class="params">(Purchase purchase)</span> &#123;</span><br><span class="line">        purchase.setFactBuyNum(purchase.getBuyNum());</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> purchaseMapper.insertPurchase(purchase);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;采购单添加成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;采购单添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-5"><a href="#控制类-5" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PurchaseService purchaseService;</span><br><span class="line"><span class="comment">//    添加采购单</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/purchase-add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addPurchase</span><span class="params">(<span class="meta">@RequestBody</span> Purchase purchase)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> purchaseService.savePurchase(purchase);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>还有一个出库操作，也是一样的。</p>
<p>其中采购和出库都会跳转到对应的采购管理和出库管理，到里面进行详细的操作之后才会对商品列表中库存的数量造成改变。</p>
</blockquote>
<h1 id="商品分类-添加-删除-修改"><a href="#商品分类-添加-删除-修改" class="headerlink" title="商品分类-添加&#x2F;删除&#x2F;修改"></a>商品分类-添加&#x2F;删除&#x2F;修改</h1><h2 id="mapper映射-4"><a href="#mapper映射-4" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//根据分类编码查询商品分类</span></span><br><span class="line">    <span class="keyword">public</span> ProductType <span class="title function_">findTypeByCode</span><span class="params">(String typeCode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    添加商品分类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertProductType</span><span class="params">(ProductType productType)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    根据父级id或者子级id删除分类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeProductType</span><span class="params">(Integer typeId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    修改分类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateProductType</span><span class="params">(ProductType productType)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //根据分类编码查询商品分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public ProductType findTypeByCode(String typeCode);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTypeByCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.pn.entity.ProductType&quot;</span>&gt;</span></span><br><span class="line">    select * from product_type where type_code = #&#123;typeCode&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  //    添加商品分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int insertProductType(ProductType productType);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertProductType&quot;</span>&gt;</span></span><br><span class="line">    insert into product_type values(</span><br><span class="line">    null, #&#123;parentId&#125;, #&#123;typeCode&#125;, #&#123;typeName&#125;, #&#123;typeDesc&#125;</span><br><span class="line">    )</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  //    根据父级id或者子级id删除分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int removeProductType(Integer typeId);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;removeProductType&quot;</span>&gt;</span></span><br><span class="line">    delete from product_type where type_id=#&#123;typeId&#125; or parent_id=#&#123;typeId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  //    修改分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int updateProductType(ProductType productType);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateProductType&quot;</span>&gt;</span></span><br><span class="line">      update product_type set</span><br><span class="line">      type_name = #&#123;typeName&#125;, type_desc = #&#123;typeDesc&#125;</span><br><span class="line">      where type_id = #&#123;typeId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-5"><a href="#service类-5" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//校验分类编码是否已存在</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryTypeByCode</span><span class="params">(String typeCode)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加商品分类</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveProductType</span><span class="params">(ProductType productType)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     根据父级id或者子级id删除分类</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteType</span><span class="params">(Integer typeId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    修改分类</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setProductType</span><span class="params">(ProductType productType)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//校验分类编码是否已存在</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryTypeByCode</span><span class="params">(String typeCode)</span> &#123;</span><br><span class="line">        <span class="comment">//根据分类编码查询商品分类</span></span><br><span class="line">        <span class="type">ProductType</span> <span class="variable">productType</span> <span class="operator">=</span> productTypeMapper.findTypeByCode(typeCode);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(productType==<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加商品分类</span></span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:typeTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveProductType</span><span class="params">(ProductType productType)</span> &#123;</span><br><span class="line">        <span class="comment">//添加商品分类</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productTypeMapper.insertProductType(productType);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;分类添加成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;分类添加失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     根据父级id或者子级id删除分类</span></span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:typeTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteType</span><span class="params">(Integer typeId)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productTypeMapper.removeProductType(typeId);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;分类删除成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;分类删除失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    修改分类</span></span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:typeTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setProductType</span><span class="params">(ProductType productType)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productTypeMapper.updateProductType(productType);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;分类修改成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;分类修改失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-6"><a href="#控制类-6" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    校验分类编码是否已存在</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/verify-type-code&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">checkTypeCode</span><span class="params">(String typeCode)</span>&#123;</span><br><span class="line">        <span class="comment">//执行业务</span></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productTypeService.queryTypeByCode(typeCode);</span><br><span class="line">        <span class="comment">//响应</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//添加分类</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/type-add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addProductType</span><span class="params">(<span class="meta">@RequestBody</span> ProductType productType)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productTypeService.saveProductType(productType);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    根据父级id或者子级id删除分类</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/type-delete/&#123;typeId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteType</span><span class="params">(<span class="meta">@PathVariable</span> Integer typeId)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productTypeService.deleteType(typeId);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    修改分类</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/type-update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateType</span><span class="params">(<span class="meta">@RequestBody</span> ProductType productType)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productTypeService.setProductType(productType);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>项目记录</category>
      </categories>
  </entry>
  <entry>
    <title>八股文——数据库篇</title>
    <url>/2024/05/03/%E5%85%AB%E8%82%A1%E6%96%87%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AF%87/</url>
    <content><![CDATA[<h1 id="MySQ优化"><a href="#MySQ优化" class="headerlink" title="MySQ优化"></a>MySQ优化</h1><h2 id="如何定位慢查询"><a href="#如何定位慢查询" class="headerlink" title="如何定位慢查询"></a>如何定位慢查询</h2><h3 id="慢查询有哪些"><a href="#慢查询有哪些" class="headerlink" title="慢查询有哪些"></a>慢查询有哪些</h3><ul>
<li>聚合查询——临时表</li>
<li>多表查询——优化sql表结构</li>
<li>表数据量过大查询——添加索引</li>
<li>深度分页查询</li>
</ul>
<blockquote>
<p>页面加载过慢，接口压测试响应时间过长</p>
</blockquote>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>第一种：开源工具</strong></p>
<ul>
<li>调试工具：Arthas</li>
<li>运维工具：Prometheus、Skywalking</li>
</ul>
<p><strong>第二种：MySQL自带慢日志</strong>（调试阶段）</p>
<p>在mysql配置文件&#x2F;etc&#x2F;my.cnf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#开启慢日志，并且超过2s的进行记录</span><br><span class="line">slow_query_log=1</span><br><span class="line">long_query_time=2</span><br></pre></td></tr></table></figure>

<h2 id="如何分析sql语句"><a href="#如何分析sql语句" class="headerlink" title="如何分析sql语句"></a>如何分析sql语句</h2><p>可以在sql语句前面增加<strong>EXPLALN&#x2F;DESC</strong>来分析</p>
<ul>
<li>通过<strong>key</strong>和<strong>key_len</strong>检查是否命中了索引</li>
<li>通过<strong>type</strong>字段查看是否有进一步优化空间</li>
<li>通过<strong>extra</strong>建议判断是否出现回表，出现了可以试试添加索引或者修改返回字段来修复</li>
</ul>
<h2 id="聚簇索引（聚集）"><a href="#聚簇索引（聚集）" class="headerlink" title="聚簇索引（聚集）"></a>聚簇索引（聚集）</h2><table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">含义</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">聚集索引</td>
<td align="center">将数据存储与索引放在一块，索引结构的叶子节点<strong>保存了行数据</strong></td>
<td><strong>必须有，且只有一个</strong></td>
</tr>
<tr>
<td align="center">二级索引（非聚集索引）</td>
<td align="center">将数据和索引分开，索引结构的叶子节点关联的是对应<strong>主键值</strong></td>
<td>可以有多个</td>
</tr>
</tbody></table>
<blockquote>
<p>回表查询就是当查询的时候是查二级索引，然后得到了对应的主键，主键再通过聚集索引得到整行的数据。</p>
</blockquote>
<h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>指的是查询使用了索引，并且需要返回的列，<strong>在该索引中已经全部都能找到</strong></p>
<p><strong>需要回表查询的不是覆盖索引</strong></p>
<p>例如，id是主键，那么也就是聚集索引；我再创建一个二级索引name；</p>
<p>如果我通过名字来查询id和name，那就不需要回表；</p>
<p>如果我通过名字来查询id和name以及其他字段，那就需要回表。</p>
<h2 id="索引创建原则"><a href="#索引创建原则" class="headerlink" title="索引创建原则"></a>索引创建原则</h2><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><ul>
<li>主键索引</li>
<li>唯一索引</li>
<li>根据业务创建的索引（复合索引）</li>
</ul>
<h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul>
<li>数据量大，查询比较频繁</li>
<li>针对经常作为查询条件、排序、分组的操作字段建立索引</li>
<li>尽量选择区分度高的作为索引</li>
<li>如果是字符串类型并且比较长的的字段建立索引，可以采用前缀索引</li>
<li>尽量选择联合索引</li>
<li>控制索引数量</li>
<li>如果索引不能存储null，创建的时候使用NOT NULL约束</li>
</ul>
<h2 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h2><ul>
<li>违法<strong>最左前缀</strong>法则</li>
</ul>
<p>例如，我的索引是id、name、address，但是查询的时候判断条件的顺序得是id或id、name或id、name、address，否则索引失效。</p>
<ul>
<li>范围<strong>查询右边的列</strong>不能使用索引</li>
<li>索引列上进行<strong>运算操作</strong>索引会失效</li>
<li><strong>字符串不加单引号</strong>，造成索引失效</li>
<li>模糊查询有<strong>可能</strong>索引失效（<strong>以%开头会失效，如果仅仅是尾部%就不会失效</strong>）</li>
</ul>
<h2 id="sql优化的总结"><a href="#sql优化的总结" class="headerlink" title="sql优化的总结"></a>sql优化的总结</h2><ul>
<li>表的优化设计</li>
<li>索引优化</li>
<li>sql语句优化</li>
<li>主从复制、读写分离</li>
<li>分库分表</li>
</ul>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="事务特性"><a href="#事务特性" class="headerlink" title="事务特性"></a>事务特性</h2><ul>
<li>A原子性</li>
<li>C一致性</li>
<li>I隔离性</li>
<li>D持久性</li>
</ul>
<h2 id="并发事务"><a href="#并发事务" class="headerlink" title="并发事务"></a>并发事务</h2><table>
<thead>
<tr>
<th align="center">问题</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">脏读</td>
<td align="center">一个事务读到另一个事务还未提交的数据</td>
</tr>
<tr>
<td align="center">不可重复读</td>
<td align="center">一个事务读取同一条数据，但是读两次的数据不同（这里读取到的是已经提交了的）</td>
</tr>
<tr>
<td align="center">幻读</td>
<td align="center">一个事务按照条件查询的时候没有对应数据行，但是在插入数据的时候，又发现这行数据已经存在了</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">隔离级别</th>
<th align="center">丢失修改</th>
<th align="center">脏读</th>
<th align="center">不可重复读</th>
<th align="center">幻读</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Read uncommitted未提交读</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">Read committed读已提交</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">Repeatable Read(<code>默认</code>)可重复读</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">Serializable串行化</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
<h2 id="redo-log和undo-log"><a href="#redo-log和undo-log" class="headerlink" title="redo log和undo log"></a>redo log和undo log</h2><ul>
<li>read log记录数据页的物理变化，服务宕机可以用来同步数据（<code>持久性</code>）</li>
<li>undo log记录的是逻辑日志，事务回滚的时候通过逆操作恢复原来的数据（<code>原子性和一致性</code>）</li>
</ul>
<h2 id="mvcc"><a href="#mvcc" class="headerlink" title="mvcc"></a>mvcc</h2><p>mvcc是多版本并发控制，指的是维护一个数据的多个版本，使得读写操作没有冲突。</p>
<p>不同事务或者相同的事务对同一条数据进行修改，会导致该记录的undolog生成一条<strong>记录版本链表</strong>，其中头部是最新的旧纪录，尾部是最早的旧纪录。</p>
<p><img src="/assets/1714716129468.png" alt="71471612946" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="MySQL主从同步原理"><a href="#MySQL主从同步原理" class="headerlink" title="MySQL主从同步原理"></a>MySQL主从同步原理</h1><p>核心是<code>二进制日志</code>，记录了DDL（数据定义语言）和DML（数据操作语言）语句</p>
<p><img src="/assets/1714716265960.png" alt="71471626596" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>master主库在事务提交的时候，把数据变更记录在二进制日志文件Binlog中</li>
<li>从库读取主库的二进制日志文件Binlog，写入从库的中继日志Relay log</li>
<li>slave重做中继日志中的事件，将改变反映它自己的数据</li>
</ul>
<h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><h2 id="垂直拆分"><a href="#垂直拆分" class="headerlink" title="垂直拆分"></a>垂直拆分</h2><ul>
<li><strong>垂直拆库</strong>：以<code>表</code>为依据，根据业务将不同的表拆分到不同的库中</li>
<li><strong>垂直拆表</strong>：以<code>字段</code>为依据，根据字段属性将不同字段拆分到不同的表中</li>
</ul>
<blockquote>
<p>垂直分表：冷热数据分离，减少IO过度争抢，两表互不影响。</p>
</blockquote>
<h2 id="水平拆分"><a href="#水平拆分" class="headerlink" title="水平拆分"></a>水平拆分</h2><ul>
<li><strong>水平分库</strong>：将一个库的数据拆分到多个库中（有路由规则）</li>
<li><strong>水平分表</strong>：将一个表的数据拆分到多个表中（可以在同一个库中，也有路由规则）</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>八股文——框架篇</title>
    <url>/2024/05/03/%E5%85%AB%E8%82%A1%E6%96%87%E2%80%94%E2%80%94%E6%A1%86%E6%9E%B6%E7%AF%87/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="Spring框架中的单例bean不是线程安全的"><a href="#Spring框架中的单例bean不是线程安全的" class="headerlink" title="Spring框架中的单例bean不是线程安全的"></a>Spring框架中的单例bean不是线程安全的</h2><p>spring框架中有一个@Scope注解，默认的值是singleton单例的</p>
<p>因为spring在的bean在都是注入无状态的对接，就没有线程安全的问题；如果定义了可修改的成员变量，就要考虑线程安全问题，可以使用<strong>多例</strong>或者<strong>加锁</strong>进行解决</p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>AOP称为面向切面编程，用于将那些与业务无关，但是对多个对象产生影响的<strong>公共行为和逻辑抽取并封装为一个可重用的模块</strong>，这个模块被命名为切面。可以减少系统中的重复代码，降低模块间的耦合度，同时提高了系统的可维护性。</p>
<h3 id="常用的场景"><a href="#常用的场景" class="headerlink" title="常用的场景"></a>常用的场景</h3><ul>
<li>记录操作日志</li>
<li>缓存处理</li>
<li>spring中内置的事务处理</li>
</ul>
<h2 id="spring中事务失效的场景"><a href="#spring中事务失效的场景" class="headerlink" title="spring中事务失效的场景"></a>spring中事务失效的场景</h2><ul>
<li>异常捕获处理</li>
</ul>
<p>如果事务中自己处理掉了异常，那么事务通知无法知悉。（也就是<strong>try catch</strong>自己处理的时候会导致这样的情况）</p>
<p>可以在catch块添加throw new RuntimeException(e)抛出</p>
<ul>
<li>抛出检查异常</li>
</ul>
<p>spring默认只会回滚非检查异常，解决的话可以更改配置</p>
<ul>
<li>非public方法</li>
</ul>
<h1 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h1><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><p><code>@SpringBootApplication</code>是一个<strong>组合注解</strong>，启动了自动配置、组件扫描等关键功能，包含以下三个主要注解：</p>
<ul>
<li><strong>@SpringBootConfiguration</strong>:等同于@Configuration，声明当前是一个配置类</li>
<li><strong>@ComponentScan</strong>:组件扫描，默认扫面当前引导类所在的包以及子包</li>
<li><strong>@EnableAutoConfiguration</strong>:SpringBoot实现自动化配置的核心注解</li>
</ul>
<h2 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h2><ul>
<li>spring</li>
</ul>
<p><img src="/assets/1714725550255.png" alt="71472555025" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>springmvc</li>
</ul>
<p><img src="/assets/1714725621570.png" alt="71472562157" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>springboot</li>
</ul>
<p><img src="/assets/1714725708798.png" alt="71472570879" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="支持延迟加载"><a href="#支持延迟加载" class="headerlink" title="支持延迟加载"></a>支持延迟加载</h2><p>mybatis支持延迟加载，但是默认没开启</p>
<p>其延迟加载意思是在需要用到数据的时候才进行加载，不需要的时候不加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lazyLoadingEnabled=true</span><br></pre></td></tr></table></figure>

<h2 id="一级二级缓存"><a href="#一级二级缓存" class="headerlink" title="一级二级缓存"></a>一级二级缓存</h2><ul>
<li><strong>一级缓存</strong>（<code>默认</code>）：基于PerpetualCache的HashMap本地缓存，其存储<strong>作用域为session</strong>，当session进行flush或者close之后，该session中所有的cache就将清空</li>
<li><strong>二级缓存</strong>：基于<strong>namespace</strong>（命名空间）和<strong>mapper</strong>的作用域起作用的，不是依赖于SQLsession，默认也是采用PerpetualCache的HashMap存储</li>
</ul>
<blockquote>
<p>当某个作用域进行了增删改的操作，那么默认该作用域的所有select缓存被清空clear</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>八股文——JVM篇</title>
    <url>/2024/05/20/%E5%85%AB%E8%82%A1%E6%96%87%E2%80%94%E2%80%94JVM/</url>
    <content><![CDATA[<h1 id="JVM组成"><a href="#JVM组成" class="headerlink" title="JVM组成"></a>JVM组成</h1><p>JVM是java程序的运行环境，二进制字节码运行环境</p>
<ul>
<li>一次编写，到处运行</li>
<li>自动内存管理，垃圾回收机制</li>
</ul>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>线程<strong>私有</strong>的，保存内部的字节码行号，用于<strong>记录正在执行的字节码指令的地址</strong>。</p>
<h2 id="java堆"><a href="#java堆" class="headerlink" title="java堆"></a>java堆</h2><p>线程<strong>共享</strong>的区域，主要用来保护<strong>对象实例、数组</strong>等，当堆没有内存空间分配给实例，也无法再扩展的时候，抛出OutOfMemoryError异常。</p>
<p><img src="/assets/1716102882919.png" alt="71610288291" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>jdk1.7和1.8区别：</p>
<ul>
<li>1.7有一个永久代，存储类信息，静态变量，常量，编译后的代码</li>
<li>1.8除去了永久代，把数据存储到了本地内存的<strong>元空间</strong>中，<strong>防止内存溢出</strong></li>
</ul>
</blockquote>
<p><img src="/assets/1716102901653.png" alt="71610290165" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>年轻代：Eden放新创的对象，S0&#x2F;S1放幸存者区（垃圾回收后还在）</li>
<li>老年代：主要保存生命周期较长的对象（多次垃圾回收后还在）</li>
</ul>
<h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><ul>
<li>每个线程运行时候<strong>需要的内存</strong>称为虚拟机栈</li>
<li>每个栈由多个<strong>栈帧</strong>（frame）组成，对应着每次<strong>方法调用时候所占的内存</strong></li>
<li>每个<strong>线程只能对应一个活动的栈帧</strong>，表示正在执行的那个方法</li>
</ul>
<h3 id="垃圾回收是否设计栈内存？"><a href="#垃圾回收是否设计栈内存？" class="headerlink" title="垃圾回收是否设计栈内存？"></a>垃圾回收是否设计栈内存？</h3><p>垃圾回收主要指的是堆内存，当栈帧弹栈的时候，内存就会释放。</p>
<h3 id="栈内存分配越大越好吗？"><a href="#栈内存分配越大越好吗？" class="headerlink" title="栈内存分配越大越好吗？"></a>栈内存分配越大越好吗？</h3><p>不是，默认内存是1024k。<strong>栈内存过大会导致线程数变少</strong></p>
<h3 id="方法内的局部变量是否线程安全？"><a href="#方法内的局部变量是否线程安全？" class="headerlink" title="方法内的局部变量是否线程安全？"></a>方法内的局部变量是否线程安全？</h3><ul>
<li>如果方法内局部变量没有逃离方法的作用范围，它就是线程安全的</li>
<li>如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全</li>
</ul>
<h3 id="栈内存溢出的现象"><a href="#栈内存溢出的现象" class="headerlink" title="栈内存溢出的现象"></a>栈内存溢出的现象</h3><ul>
<li>栈帧过多导致栈内存溢出，例如递归调用</li>
<li>栈帧过大</li>
</ul>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><ul>
<li>方法区是各个线程<strong>共享的内存区域</strong></li>
<li>主要存储<strong>类信息</strong>，运行时的<strong>常量池</strong></li>
<li>虚拟机启动的时候创建，关闭虚拟机的时候释放</li>
<li>如果方法区域中的内存无法满足分配请求，会抛出OutOfMemoryError:Metaspace</li>
</ul>
<h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><ul>
<li>看作一张表，虚拟机指令根据这张常量表找到要执行的<strong>方法名、参数类型、字面量等</strong>信息</li>
<li>当类被加载的时候，常量池信息会放入运行时的常量池，并把里面的<strong>符号地址变为真实</strong></li>
</ul>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><ul>
<li>并不属于JVM内存结构，不由JVM进行管理，是虚拟机系统内存</li>
<li>常见的NIO操作，用于数据缓冲区，<strong>分配回收成本较高</strong>，但是读<strong>写性能高</strong>，不受JVM内存回收管理</li>
</ul>
<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>JVM只会运行二进制文件，类加载器作用就是<strong>将字节码文件加载到JVM中</strong>，从而让java程序能够启动起来。</p>
<ul>
<li><strong>启动类</strong>加载器：JAVA_HOME&#x2F;jre&#x2F;lib</li>
<li><strong>扩展类</strong>加载器：JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext</li>
<li><strong>应用类</strong>加载器：classpath下的类</li>
<li><strong>自定义类</strong>加载器：自定义类集成classLoader，实现自定义类加载规则</li>
</ul>
<blockquote>
<p>双亲委派机制</p>
<ul>
<li>避免一个类被重复加载，当父类加载后则不需要重复加载，保证唯一性</li>
<li>为了安全，保证类库api不会被修改</li>
</ul>
</blockquote>
<h2 id="类装载过程"><a href="#类装载过程" class="headerlink" title="类装载过程"></a>类装载过程</h2><ul>
<li><strong>加载</strong>（查找和导入class文件）</li>
<li><strong>验证</strong>（准确性）</li>
<li><strong>准备</strong>（类变量分配内存和初始值）</li>
<li><strong>解析</strong>（符号引用换直接引用）</li>
<li><strong>初始化</strong>（堆类的静态变量静态代码块初始化）</li>
<li><strong>使用</strong>（JVM开始从入口方法执行用户的程序代码）</li>
<li><strong>卸载</strong>（执行完毕销毁class对象）</li>
</ul>
<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><h2 id="对象被垃圾回收的条件"><a href="#对象被垃圾回收的条件" class="headerlink" title="对象被垃圾回收的条件"></a>对象被垃圾回收的条件</h2><p>如果一个对象或者多个对象没有任何的引用指向它了，那么这个对象现在就是垃圾，如果<strong>定位了垃圾</strong>，可能会被垃圾回收器回收。</p>
<h3 id="定位垃圾的方式"><a href="#定位垃圾的方式" class="headerlink" title="定位垃圾的方式"></a>定位垃圾的方式</h3><ul>
<li>引用计数法</li>
<li>可达性分析算法</li>
</ul>
<h2 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h2><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><p>根据可达性分析算法得出的垃圾进行标记，对这些标记为可回收的内容进行垃圾回收。</p>
<blockquote>
<p>优点：标记和清除的速度较快</p>
<p>缺点：碎片化较为严重，内存不连贯</p>
</blockquote>
<h3 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h3><p>解决了碎片化的问题，将回收之后进行了整理；其多了一步移动内存位置步骤，性能会有所影响。</p>
<h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>有一块一样大小的内存，将存活的对象复制过去并且整理；</p>
<p>在垃圾比较多的情况下效率高，清理之后也没有碎片。但内存使用率较低。</p>
<h2 id="JVM有哪些垃圾回收器"><a href="#JVM有哪些垃圾回收器" class="headerlink" title="JVM有哪些垃圾回收器"></a>JVM有哪些垃圾回收器</h2><ul>
<li>串行垃圾收集器</li>
<li>并行垃圾收集器</li>
<li>CMS（并发）垃圾收集器</li>
<li>G1垃圾收集器，作用新生代和老年代</li>
</ul>
<h2 id="不同类型引用的垃圾回收"><a href="#不同类型引用的垃圾回收" class="headerlink" title="不同类型引用的垃圾回收"></a>不同类型引用的垃圾回收</h2><h3 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>();</span><br></pre></td></tr></table></figure>

<p>只有所有GC Roots对象都不通过强引用引用该对象，该对象才能被垃圾回收</p>
<h3 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="type">SoftReferences</span> <span class="variable">softReferences</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">SoftReferences</span>(user);</span><br></pre></td></tr></table></figure>

<p>仅有软引用引用该对象的时候，在垃圾回收后，<strong>内存仍不足</strong>的时候会再次发出垃圾回收</p>
<h3 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User user =new User();</span><br><span class="line">WeakReference weakReference = new WeakReference(user);</span><br></pre></td></tr></table></figure>

<p>仅有弱引用引用该对象的时候，在垃圾回收的时候，<strong>无论内存是否充足</strong>，都会回收弱引用对象</p>
<h3 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">ReferenceQueue referenceQueue= <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>();</span><br><span class="line">PhantomReference phantomReference=<span class="keyword">new</span> <span class="title class_">PhantomReference</span>(user,referenceQueue);</span><br></pre></td></tr></table></figure>

<p>必须配合<strong>引用队列</strong>使用，被引用对象回收的时候，会将虚引用入队，由Reference Handler线程调用虚引用相关方法释放直接内存。</p>
<h1 id="JVM实践"><a href="#JVM实践" class="headerlink" title="JVM实践"></a>JVM实践</h1><h2 id="JVM调优参数设置位置"><a href="#JVM调优参数设置位置" class="headerlink" title="JVM调优参数设置位置"></a>JVM调优参数设置位置</h2><ul>
<li>war包部署在tomcat的在<code>TOMCAT_HOME/bin/catalina.sh</code>文件</li>
<li>jar包部署在<code>启动参数</code>中设置</li>
</ul>
<h2 id="调优参数"><a href="#调优参数" class="headerlink" title="调优参数"></a>调优参数</h2><ul>
<li>堆空间大小</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xms：设置堆的初始化大小</span><br><span class="line">-Xmx：堆的最大大小</span><br><span class="line">默认单位字节</span><br></pre></td></tr></table></figure>

<ul>
<li>虚拟机栈设置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Xss:对每个线程大小的调整</span><br></pre></td></tr></table></figure>

<ul>
<li>年轻代Eden区和两个Survivor区大小比例</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XXSurvivorRatio=8</span><br><span class="line">survivor:eden=2:8</span><br></pre></td></tr></table></figure>

<ul>
<li>年轻代晋升老年代阈值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:MaxTenuringThreshold=&lt;threshold&gt;</span><br><span class="line">默认15，取值0-15</span><br></pre></td></tr></table></figure>

<ul>
<li>设置垃圾回收收集器</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-XX:+&lt;收集器名&gt;</span><br></pre></td></tr></table></figure>

<h2 id="调优工具"><a href="#调优工具" class="headerlink" title="调优工具"></a>调优工具</h2><h3 id="命令工具"><a href="#命令工具" class="headerlink" title="命令工具"></a>命令工具</h3><ul>
<li>jps进程状态信息</li>
<li>jstack进程内线程堆栈信息</li>
<li>jmap查看堆转信息</li>
<li>jhat堆转储快照分析工具</li>
<li>jstat统计JVM监测工具</li>
</ul>
<h3 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h3><ul>
<li>jconsole用于jvm的内存，线程，类的监控</li>
<li>VisualVM能够监控线程，内存情况</li>
</ul>
<h2 id="java内存泄露的排查思路"><a href="#java内存泄露的排查思路" class="headerlink" title="java内存泄露的排查思路"></a>java内存泄露的排查思路</h2><ul>
<li>获取堆内存快照dump（jmap，启动的时候可以加参数自动生成dump文件生成在哪个位置）</li>
<li>VisualVM分析dump文件</li>
<li>通过查看堆信息的情况，定位内存溢出问题</li>
</ul>
<h2 id="CPU飙高排查方案与思路"><a href="#CPU飙高排查方案与思路" class="headerlink" title="CPU飙高排查方案与思路"></a>CPU飙高排查方案与思路</h2><ul>
<li>可以使用top命令查看cpu的情况（显示哪个进程占用的cpu较高）</li>
<li>再看这个进程中线程情况ps命令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps H -eo pid,tid,%cpu | grep &lt;pid&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以再次使用jstack命令（这个命令后面接着的是进程id，可以看到该进程中的线程具体问题，但这里的线程是十六进制的）</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>八股文——并发编程篇</title>
    <url>/2024/05/20/%E5%85%AB%E8%82%A1%E6%96%87%E2%80%94%E2%80%94%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%AF%87/</url>
    <content><![CDATA[<h1 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h1><h2 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h2><ul>
<li>进程是正在运行程序的实例，<strong>进程中包含了线程</strong>，每个线程执行不同的任务</li>
<li>不同的进程使用不同的内存空间，<strong>当前进程下的所有线程可以共享内存空间</strong></li>
<li><strong>线程更轻量</strong>，线程上下文切换成本一般比进程上下文切换成本低</li>
</ul>
<h2 id="并发和并行的区别"><a href="#并发和并行的区别" class="headerlink" title="并发和并行的区别"></a>并发和并行的区别</h2><p>单核：实际是串行</p>
<ul>
<li>并发：同一时间<strong>应对</strong>多件事情的能力（有竞争）</li>
<li>并行：同一时间动手<strong>做</strong>多件事情的能力</li>
</ul>
<h2 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h2><ul>
<li><strong>继承Thread类</strong></li>
</ul>
<p><img src="/assets/1715084549982.png" alt="71508454998" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><strong>实现runnable接口</strong></li>
</ul>
<p><img src="/assets/1715084572087.png" alt="71508457208" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li><strong>实现callable接口</strong>（有返回值）</li>
</ul>
<p><img src="/assets/1715084604251.png" alt="71508460425" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>这里的泛型跟call()的返回值要一致</p>
<ul>
<li><strong>线程池创建线程</strong>（项目用得多）</li>
</ul>
<p><img src="/assets/1715084698964.png" alt="71508469896" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p><strong>Runnable和Callable的区别：</strong></p>
<ul>
<li>Runnable接口的run方法<strong>没有返回值</strong></li>
<li>Callable接口的run方法<strong>有返回值</strong>，是<strong>泛型</strong>，和Future、FutureTask配合可以用来<strong>获取异步执行的结果</strong></li>
<li>Callable接口的run方法允许抛出异常；另一个只能内部消化，不能上抛</li>
</ul>
</blockquote>
<blockquote>
<p>线程的run()和start()有什么区别：</p>
<ul>
<li>start()：是<strong>开启一个线程</strong>，通过该线程可以调用run方法执行run中定义的逻辑代码，start方法只能被调用一次</li>
<li>run()：封装了要被执行的代码，可以被调用多次，就是一个<strong>普通方法</strong>，不会创建新的线程</li>
</ul>
</blockquote>
<h2 id="线程按顺序执行"><a href="#线程按顺序执行" class="headerlink" title="线程按顺序执行"></a>线程按顺序执行</h2><p>在线程中使用<strong>join</strong>方法解决线程顺序执行</p>
<blockquote>
<p>t.join()</p>
<p>将此线程进行阻塞，等t结束之后才继续执行</p>
</blockquote>
<h2 id="notify-和notifyAll-有什么区别"><a href="#notify-和notifyAll-有什么区别" class="headerlink" title="notify()和notifyAll()有什么区别"></a>notify()和notifyAll()有什么区别</h2><ul>
<li>notify只是<strong>唤醒一个</strong>wait线程（随机）</li>
<li>notifyall是<strong>唤醒所有</strong>wait线程</li>
</ul>
<h2 id="java中的wait和sleep异同点"><a href="#java中的wait和sleep异同点" class="headerlink" title="java中的wait和sleep异同点"></a>java中的wait和sleep异同点</h2><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><p>都是让当前线程<strong>暂时放弃cpu的使用权，进入阻塞状态</strong></p>
<h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul>
<li>归属不同：sleep(long)是<strong>Thread的静态方法</strong>，wait(),wait(long)都是<strong>Object成员方法，每个对象都有</strong></li>
<li>醒来的时机不同：<ul>
<li>加了long时间的，相应毫秒之后醒来</li>
<li>而wait可以被notify&#x2F;notifyall唤醒，其中<strong>wait()一直不被唤醒就一直等待</strong></li>
<li><strong>都可以被打断唤醒</strong></li>
</ul>
</li>
<li>锁特性不同：<ul>
<li><strong>wait必须先获取wait对象的锁</strong>，sleep不需要</li>
<li><strong>wait执行之后会释放对象锁</strong>，允许其他线程获得该对象锁</li>
<li><strong>sleep</strong>如果在<strong>synchronized</strong>代码块执行，<strong>不会释放对象锁</strong></li>
</ul>
</li>
</ul>
<h2 id="如何停止一个正在运行的线程"><a href="#如何停止一个正在运行的线程" class="headerlink" title="如何停止一个正在运行的线程"></a>如何停止一个正在运行的线程</h2><ul>
<li>使用<strong>退出标志</strong>，正常退出</li>
<li>使用stop方法强行退出（不推荐 作废）</li>
<li>使用<strong>interrupt</strong>方法中的中断线程<ul>
<li>如果打断的线程（wait、slepp、join）会<strong>抛出异常</strong></li>
<li>打断正常的线程，可以根据<strong>打断状态来标记</strong>是否退出（跟第一个是一样的）</li>
</ul>
</li>
</ul>
<h1 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h1><h2 id="JMM（java内存模型）"><a href="#JMM（java内存模型）" class="headerlink" title="JMM（java内存模型）"></a>JMM（java内存模型）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>JMM定义了<strong>共享内存中多线程程序读写操作的行为规范</strong>，通过这些规则来规范对内存的读写操作从而保证指令的<strong>正确性</strong></p>
<h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul>
<li>JMM把内存分为两块，一块是<strong>私有线程的工作区域</strong>（工作内存，互不能访问），一块是<strong>所有线程的共享区域</strong>（主内存）</li>
<li>线程跟线程之间的相互隔离的，线程跟线程的交互需要通过主内存</li>
</ul>
<h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>全称是<strong>比较再交换</strong>，体现的一种<strong>乐观锁</strong>的思想，在<strong>无锁的情况下保证线程操作共享数据的原子性</strong></p>
<p>在操作共享变量的时候使用的自旋锁，其效率更高；但是如果是频繁或者竞争激烈，效率就不高</p>
<h2 id="volatile的理解"><a href="#volatile的理解" class="headerlink" title="volatile的理解"></a>volatile的理解</h2><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，具备两层语言</p>
<ul>
<li><p><strong>保证线程的可见性</strong>（当共享变量被其中一个线程改变之后，其他的线程也可见）</p>
</li>
<li><p><strong>禁止进行指令重排序</strong>（在读写共享变量的时候加入不同的屏障，防止其他读写操作越过屏障，从而阻止了重排序的效果）</p>
</li>
</ul>
<h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p><strong>抽象队列同步器</strong>，<strong>悲观锁</strong>，需要<strong>手动开启和关闭</strong>，在锁竞争激烈的情况下提供多种解决方案</p>
<ul>
<li>阻塞锁</li>
<li>信号锁</li>
<li>倒计时锁</li>
</ul>
<p>维护了一个先进先出的双向队列，队列中存储了排队的进程；AQS中有一个state属性（资源）<strong>，默认是0（无锁）</strong>，如果有线程来了改为1（有锁），直到用完了之后释放锁变为0</p>
<p>也分为公平&#x2F;非公平，新来的是竞争还是排队？</p>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>可重入锁（基于AQS和CAS），相对synchronized具备以下：</p>
<ul>
<li>可中断</li>
<li>可设置超时时间</li>
<li>可设置公平锁</li>
<li>支持多个条件变量</li>
<li>支持重入（synchronized也支持）</li>
</ul>
<h2 id="死锁的排查"><a href="#死锁的排查" class="headerlink" title="死锁的排查"></a>死锁的排查</h2><ul>
<li>在idea中的<strong>Terminal</strong>命令端输入</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jps:查看jvm中运行的进程状态</span><br><span class="line">jstack：查看进程内线程的堆栈信息</span><br><span class="line">jstack -l 进程id</span><br></pre></td></tr></table></figure>

<ul>
<li>可视化工具jconsole，在java安装目录<strong>bin目录下启动jconsole.exe</strong></li>
<li>故障处理工具VisualVM在java安装目录<strong>bin目录下启动jvisualvm.exe</strong></li>
</ul>
<h2 id="导致并发程序出现问题的根本原因"><a href="#导致并发程序出现问题的根本原因" class="headerlink" title="导致并发程序出现问题的根本原因"></a>导致并发程序出现问题的根本原因</h2><ul>
<li>原子性</li>
<li>可见性</li>
<li>有序性</li>
</ul>
<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="线程池核心参数和原理"><a href="#线程池核心参数和原理" class="headerlink" title="线程池核心参数和原理"></a>线程池核心参数和原理</h2><h3 id="核心参数"><a href="#核心参数" class="headerlink" title="核心参数"></a>核心参数</h3><p><img src="/assets/1715352137361.png" alt="71535213736" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>corePoolSize:核心线程数目</li>
<li>maximumPoolSize:<strong>最大线程数目&#x3D;核心线程+救急线程最大数目</strong></li>
<li>keepAliveTime:急救线程的生存时间，如果<strong>生存时间没有新任务，此线程就会释放</strong></li>
<li>unit:急救时间的生存<strong>单位</strong></li>
<li>workQueue:当没有空闲核心线程的时候，新来的任务会到此队排队，<strong>队列满了会创建急救线程执行任务</strong></li>
<li>threadFactory:线程工厂</li>
<li>handler:拒绝策略</li>
</ul>
<h3 id="执行原理"><a href="#执行原理" class="headerlink" title="执行原理"></a>执行原理</h3><p><img src="/assets/1715352826448.png" alt="71535282644" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="常见的阻塞队列"><a href="#常见的阻塞队列" class="headerlink" title="常见的阻塞队列"></a>常见的阻塞队列</h2><ul>
<li>ArrayBlockingQueue:基于数组结构的有界阻塞队列，先进先出</li>
<li>**LinkedBlockingQueue:**基于链表结构的有界阻塞队列（默认无界），先进先出</li>
<li>DelayedWorkQueue:优先级队列，保证每次出队的任务是当前队列执行时间靠前的</li>
<li>SynchronousQueue:不存储元素的阻塞队列，每个插入操作必须等待一个移出操作</li>
</ul>
<h2 id="如何确定核心线程数"><a href="#如何确定核心线程数" class="headerlink" title="如何确定核心线程数"></a>如何确定核心线程数</h2><p>N为CPU核数</p>
<ul>
<li>io密集任务（文件读写、DB读写、网络请求等，高并发执行时间短的）：<strong>2N+1</strong></li>
<li>CPU密集任务（计算型代码、Bitmap转换、Gson转换等，并发不高执行时间长的）：<strong>N+1</strong></li>
</ul>
<h2 id="线程池的种类"><a href="#线程池的种类" class="headerlink" title="线程池的种类"></a>线程池的种类</h2><ul>
<li>newFixedThreadPool:创建一个定长的线程池，可以控制线程的最大并发数</li>
<li>newSingleThreadExecutor:创建一个单线程化的线程池，只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序执行</li>
<li>newCachedThreadPool:创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程</li>
<li>newScheduledThreadPool:可以执行延迟任务的线程池，支持定时周期性执行任务</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>八股文——框微服务篇</title>
    <url>/2024/05/20/%E5%85%AB%E8%82%A1%E6%96%87%E2%80%94%E2%80%94%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="SPring-Cloud"><a href="#SPring-Cloud" class="headerlink" title="SPring Cloud"></a>SPring Cloud</h1><h2 id="五大组件"><a href="#五大组件" class="headerlink" title="五大组件"></a>五大组件</h2><ul>
<li>Eureka注册中心</li>
<li>Ribbon负载均衡</li>
<li>Feign远程调用</li>
<li>Hystrix服务熔断</li>
<li>Zuul&#x2F;Gateway网关</li>
</ul>
<h2 id="springcould如何实现服务注册发现"><a href="#springcould如何实现服务注册发现" class="headerlink" title="springcould如何实现服务注册发现"></a>springcould如何实现服务注册发现</h2><p>常见的注册中心作用是：<strong>服务注册</strong>和<strong>发现</strong></p>
<p>常见注册中心有：<strong>eureka&#x2F;nocas&#x2F;zookeeper</strong></p>
<h3 id="eureka"><a href="#eureka" class="headerlink" title="eureka"></a>eureka</h3><ul>
<li><strong>服务注册</strong>：服务提供者需要把自己的信息注册到eureka，由eureka保存这些信息（服务名称、ip、端口等）</li>
<li><strong>服务发现</strong>：消费者向eureka拉取服务列表信息，如果服务提供者有集群，则消费者会利用<strong>负载均衡</strong>算法选择一个发起调用</li>
<li><strong>服务监控</strong>：服务提供者会每隔30s向eureka<strong>发送心跳</strong>，报告健康状态，如果在90s内没有收到心跳，那么从eureka剔除</li>
</ul>
<h3 id="eureka和nocas的区别"><a href="#eureka和nocas的区别" class="headerlink" title="eureka和nocas的区别"></a>eureka和nocas的区别</h3><ul>
<li>nocas可以设置是否为临时实例，如果是，那么也是心跳机制（<code>默认</code>，AP）；如果不是（CP），那么nocas会主<strong>动询问</strong>非临时实例是否存活，非临时实例不会被剔除。</li>
<li>并且如果信息更新了，nocas可以<strong>主动推送</strong>，而eureka需要消费者自己拉取。</li>
<li>nocas支持了<strong>配置中心</strong></li>
</ul>
<h2 id="Ribbon如何实现负载均衡"><a href="#Ribbon如何实现负载均衡" class="headerlink" title="Ribbon如何实现负载均衡"></a>Ribbon如何实现负载均衡</h2><h3 id="常用策略"><a href="#常用策略" class="headerlink" title="常用策略"></a>常用策略</h3><ul>
<li>RoundRobinRule**:简单轮询**服务列表选择服务器</li>
<li>WeightedRespoonseTimeRule:按照<strong>权重</strong>来选择服务器，权重越小的响应时间越长</li>
<li>RandomRule:<strong>随机</strong>选择一个<strong>可用</strong>的服务器</li>
<li>ZoneAvoidanceRule（<code>默认</code>）:区域敏感策略，以<strong>区域可用</strong>的服务器为基础进行服务器的选择。使用zone对服务器进行分类，这个zone可以理解为一个机房机架等，如何对zone内的多个服务进行轮询。</li>
</ul>
<h3 id="自定义负载均衡"><a href="#自定义负载均衡" class="headerlink" title="自定义负载均衡"></a>自定义负载均衡</h3><ul>
<li><strong>全局</strong>：创建类实现IRule接口，可以指定负载均衡策略</li>
<li><strong>局部</strong>：在客户端的配置文件中，可以配置某一个服务调用的负载均衡策略</li>
</ul>
<h2 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h2><p>一个服务失败，导致整条链路的服务都失败</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li><strong>服务降级</strong></li>
</ul>
<p>服务自我保护的一种方式，或者保护下游服务的一种方式，确保服务不会收到请求突增影响变得不可用，确保服务不会崩溃。一般在实际开发<strong>与feign接口整合，编写降低逻辑</strong></p>
<ul>
<li><strong>服务熔断</strong></li>
</ul>
<p>默认是关闭的，需要手动打开。如果检测到<strong>10s内请求失败达到50%<strong>，触发熔断机制，然后</strong>每隔5s</strong>重新尝试请求微服务，如果不能响应继续走熔断机制。（循环）直到微服务可达，关闭熔断机制，恢复正常请求。</p>
<h3 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h3><p>限流</p>
<h2 id="微服务如何监控"><a href="#微服务如何监控" class="headerlink" title="微服务如何监控"></a>微服务如何监控</h2><p>常见的使用Skywalking，可以快速定位问题、性能的分析、服务关系、服务告警。</p>
<h1 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h1><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul>
<li>Tomcat设置最大连接数（适合单机）</li>
<li><strong>Nginx漏桶算法</strong></li>
<li><strong>网关令牌桶算法</strong></li>
<li>自定义拦截器</li>
</ul>
<h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><p>存储固定数量的请求，漏桶以<strong>固定的速率漏出</strong>请求。</p>
<h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><p><strong>固定速率生成令牌</strong>，存入令牌桶，桶满了之后暂停生成。只有申请到令牌的请求才可以被处理，如果没有会被阻塞或者丢弃。</p>
<p>（令牌一般存在redis）</p>
<h1 id="CAP和BASE"><a href="#CAP和BASE" class="headerlink" title="CAP和BASE"></a>CAP和BASE</h1><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><ul>
<li>C一致性s</li>
<li>A可用性</li>
<li>P分区容错性</li>
</ul>
<blockquote>
<p>无法同时满足三个</p>
</blockquote>
<h2 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h2><ul>
<li>BA基本可以</li>
<li>S软状态：在一定时间内允许出现中间状态（临时不一致）</li>
<li>E最终一致性</li>
</ul>
<h1 id="分布式服务的接口幂等性"><a href="#分布式服务的接口幂等性" class="headerlink" title="分布式服务的接口幂等性"></a>分布式服务的接口幂等性</h1><h2 id="幂等定义"><a href="#幂等定义" class="headerlink" title="幂等定义"></a>幂等定义</h2><p><strong>多次调用</strong>方法或者接口<strong>不会改变业务状态</strong>，可以保证<strong>重复调用</strong>的结果和<strong>单次调用</strong>的<strong>结果一致</strong>。</p>
<table>
<thead>
<tr>
<th align="center">请求方式</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GET</td>
<td align="center">天然幂等</td>
</tr>
<tr>
<td align="center">POST</td>
<td align="center"><strong>新增，不是幂等</strong></td>
</tr>
<tr>
<td align="center">PUT</td>
<td align="center"><strong>绝对值更新是幂等；增量更新不是幂等</strong></td>
</tr>
<tr>
<td align="center">DELETE</td>
<td align="center">幂等</td>
</tr>
</tbody></table>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ul>
<li>数据库唯一索引（可以解决新增的问题）</li>
<li>token+redis（新增和修改）</li>
<li>分布式锁（新增和修改）</li>
</ul>
<h1 id="分布式任务调度"><a href="#分布式任务调度" class="headerlink" title="分布式任务调度"></a>分布式任务调度</h1><p>常见的——<strong>xxl-job</strong></p>
<h2 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h2><ul>
<li>解决集群任务的重复执行问题</li>
<li>cron表达式定义灵活</li>
<li>定时任务失败了，重试和统计</li>
<li>任务量大，分片执行</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>八股文——消息中间件篇</title>
    <url>/2024/05/20/%E5%85%AB%E8%82%A1%E6%96%87%E2%80%94%E2%80%94%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="生产者确认机制"><a href="#生产者确认机制" class="headerlink" title="生产者确认机制"></a>生产者确认机制</h2><p>RabbitMQ提供了publisher confirm机制来避免消息发送到MQ过程中丢失。消息发送到MQ之后，会返回一个结果给发送者表示消息处理成功</p>
<p>如果消息失败：</p>
<ul>
<li>回调方法即使重发</li>
<li>记录日志</li>
<li>保存数据库然后定时重发，发送成功之后删除表中的数据</li>
</ul>
<h2 id="信息持久化"><a href="#信息持久化" class="headerlink" title="信息持久化"></a>信息持久化</h2><p>MQ默认是内存存储信息，开启持久化可以确保缓存在MQ中的信息不会丢失</p>
<ul>
<li>交换机持久化</li>
<li>队列持久化</li>
<li>消息持久化（<code>默认</code>）</li>
</ul>
<h2 id="消费者确认"><a href="#消费者确认" class="headerlink" title="消费者确认"></a>消费者确认</h2><p>消费者处理消息之后可以向MQ发送ack回执，MQ收到ack回执之后才会删除该消息。</p>
<ul>
<li>manual：手动ack，业务结束之后调用api发送ack</li>
<li>auto（常用）：自动ack，由spring检测istener代码是否出现异常，没有异常就返回ack，由异常就返回nack</li>
</ul>
<blockquote>
<p>会设置一个重试次数</p>
</blockquote>
<ul>
<li>none：关闭ack，MQ假定消费者获取信息之后会成功处理，因此消息投递之后会立即被删除</li>
</ul>
<h2 id="RabbitMQ消息的重复消费"><a href="#RabbitMQ消息的重复消费" class="headerlink" title="RabbitMQ消息的重复消费"></a>RabbitMQ消息的重复消费</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul>
<li>网络抖动</li>
<li>消费者挂了</li>
</ul>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>每条消息设置一个唯一的标识id</li>
<li>幂等方案：分布式锁、数据库锁（悲观锁、乐观锁）但是性能会没那么好</li>
</ul>
<h2 id="死信交换机（RabbitMQ延迟队列）"><a href="#死信交换机（RabbitMQ延迟队列）" class="headerlink" title="死信交换机（RabbitMQ延迟队列）"></a>死信交换机（RabbitMQ延迟队列）</h2><p>场景：<strong>超时订单</strong>，在多少时间内完成支付；<strong>限时优惠</strong>；<strong>定时发布</strong>；</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>延迟队列&#x3D;<strong>死信交换机</strong>+<strong>TTL</strong>（生存时间）</p>
<p>满足下面一点可以称为<strong>死信（不会被消费，可能直接丢弃掉）交换机</strong>：</p>
<ul>
<li>消费者使用过basic.reject或basic.nack<strong>声明消费失败</strong>，并且消息的requeue参数设置false</li>
<li>消息是一个过期消息，<strong>超时无人消费</strong></li>
<li>要投递的队列<strong>消息堆积满</strong>了，最早的消息可能成为死信</li>
</ul>
<blockquote>
<p>如果队列配置了<strong>dead-letter-exchange</strong>属性，指定了一个交换机，那么队列的死信就会投递到这个交换机中，而这个交换机称为死信交换机</p>
</blockquote>
<p><strong>TTL</strong>两种情况：</p>
<ul>
<li>消息所在的队列设置了存活时间</li>
<li>消息本身设置了存活时间</li>
</ul>
<blockquote>
<p>两个都有，按照最短的为准</p>
</blockquote>
<p>###插件</p>
<p><strong>DelayExchange</strong>插件，需要装在RabbitMQ中</p>
<ul>
<li>声明一个交换机，添加delayed为True</li>
<li>发送信息的时候，添加x-delay头，值为超时时间</li>
</ul>
<h2 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h2><h3 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3><p>生产者发送消息超过了消费者处理消息的速度，就会导致队列中的信息堆积，直到队列存储消息达到了上限。之后发送的消息就会成为死信，可能会被丢弃。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>增加更多消费者，提高消费速度</li>
<li>在消费者内开启线程池加快消息处理速度（cpu，看硬件情况）</li>
<li>扩大队列容积，提高堆积上限</li>
</ul>
<blockquote>
<p><strong>惰性队列</strong></p>
<ul>
<li>接收存储到<strong>磁盘</strong>而不是内存</li>
<li>消费者要消费消息的时候才会从磁盘中读取并加载到内存</li>
<li>支持数百万条消息存储</li>
</ul>
</blockquote>
<h2 id="RabbitMQ高可用性"><a href="#RabbitMQ高可用性" class="headerlink" title="RabbitMQ高可用性"></a>RabbitMQ高可用性</h2><ul>
<li>镜像模式集群</li>
<li>仲裁队列（<strong>强一致性，采用Raft协议</strong>）</li>
</ul>
<h1 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h1><h2 id="如何保证消息不丢失"><a href="#如何保证消息不丢失" class="headerlink" title="如何保证消息不丢失"></a>如何保证消息不丢失</h2><ul>
<li>设置异步发送</li>
<li>消息重试（可以设置次数）</li>
<li>发送确认机制（acks&#x3D;0&#x2F;1(&#96;&#96;默认&#96;)&#x2F;all）</li>
</ul>
<blockquote>
<p>producer-&gt;leader-&gt;follower(环线)</p>
</blockquote>
<ul>
<li>消费者<code>默认</code><strong>自动按期提交</strong>已经消费的偏移量（5s一次）</li>
</ul>
<blockquote>
<p>可能出现重平衡的情况，重复消费或者丢失数据</p>
<p>可以改为：同步提交、异步提交、同步+异步组合提交</p>
</blockquote>
<h2 id="消费顺序"><a href="#消费顺序" class="headerlink" title="消费顺序"></a>消费顺序</h2><ul>
<li>发送信息的时候指定分区号</li>
<li>发送信息按相同业务设置相同的key</li>
</ul>
<h2 id="kafka高可用机制"><a href="#kafka高可用机制" class="headerlink" title="kafka高可用机制"></a>kafka高可用机制</h2><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>一个kafka集群由多个broker实例组成，即使一台宕机，也不耽误其他broker继续对外服务</p>
<h3 id="复制机制"><a href="#复制机制" class="headerlink" title="复制机制"></a>复制机制</h3><ul>
<li>一个topic有多个分区，每分区都有<strong>多个副本</strong>，有一个leader，其余都是follower，副本存储在不同的follower中</li>
<li>所有的分区副本的内容都是相同的，如果leader发生故障，会将其中一个follower提升为leader（<strong>优先选择ISR同步复制保存的follower</strong>），保证系统容错性和高可用性</li>
</ul>
<h2 id="kafka数据清理机制"><a href="#kafka数据清理机制" class="headerlink" title="kafka数据清理机制"></a>kafka数据清理机制</h2><ul>
<li>根据消息<strong>保留的时间</strong>，超过指定时间就会触发清理（默认7天）</li>
<li>根据topic<strong>存储的数据大小</strong>，超过所占的日志文件大小大于一定阈值（默认1G）.开始删除最久的消息（需要<strong>手动开启</strong>）</li>
</ul>
<h2 id="kafka高性能设计"><a href="#kafka高性能设计" class="headerlink" title="kafka高性能设计"></a>kafka高性能设计</h2><ul>
<li>消息分区</li>
<li>顺序读写</li>
<li>页缓存</li>
<li>零拷贝（并不是不拷贝，而是减少拷贝次数）</li>
<li>消息压缩</li>
<li>分批发生</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>八股文——设计模式篇</title>
    <url>/2024/05/20/%E5%85%AB%E8%82%A1%E6%96%87%E2%80%94%E2%80%94%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul>
<li>抽象产品：定义了产品规范，描述了产品的主要特征和功能</li>
<li>具体产品：实现或者继承抽象产品的子类</li>
<li>具体工厂：提供了创建产品的方法，调用者通过该方法来获取产品</li>
</ul>
<p>（解耦合，但还是有一定的耦合）</p>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul>
<li>抽象工厂：提供了创建产品的接口，调用者通过它来访问具体工厂的工厂方法来创建产品</li>
<li>具体工厂：主要实现抽象工厂中的抽象方法，完成具体产品的创建</li>
<li>抽象产品：定义了产品规范，描述了产品的主要特征和功能</li>
<li>具体产品：提供了创建产品的方法，调用者通过该方法来获取产品</li>
</ul>
<p>（遵循了开闭原则，不用改源代码，加新的具体工厂和产品就可以）</p>
<p>过于复杂的话应付不过来</p>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可以<strong>生产多个等级的产品</strong>；一个超级工厂创建其他工厂，该超级工厂又称为其他工厂的工厂。</p>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户；通过对算法进行封装，把使用算法的责任和算法的实现分割，并委派给不用的对象对这些算法进行管理。</p>
<ul>
<li>抽象策略类：抽象角色，通常由一个接口或者抽象类实现，此角色给出所有的具体策略所需要的接口。</li>
<li>具体策略类：实现了抽象策略定义的接口，提供具体算法实现或行为。</li>
<li>环境类：持有一个策略类的引用，最终给客户端调用。</li>
</ul>
<blockquote>
<p>策略类之间可以自由切换，易于扩展，避免使用多重条件选择语句，充分体现面向对象的设计思想</p>
<p>客户端必须知道所有策略类，并自行决定使用哪一个，策略模式将造成产生很多策略类</p>
</blockquote>
<h2 id="工厂-策略"><a href="#工厂-策略" class="headerlink" title="工厂+策略"></a>工厂+策略</h2><p><img src="/assets/1716128013913.png" alt="71612801391" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="责任链设计模式"><a href="#责任链设计模式" class="headerlink" title="责任链设计模式"></a>责任链设计模式</h1><p>避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一个对象记住其下一个对象的引用而连成一条链；当有请求发生的时候，可以沿着这条链传递，直到有对象处理它为止。</p>
<ul>
<li>抽象处理者角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接</li>
<li>具体处理者角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以则处理，否则将该请求转给后继者</li>
<li>客户类角色：创建处理链，并向链头的具体处理者对象提交请求，不关系处理细节和请求传递过程</li>
</ul>
<blockquote>
<p>优点:</p>
<p>降低了对象之间的耦合度，增强了系统的可扩展性，增强了给对象指派职责的灵活性，责任链简化了对象之间的连接，责任分担。</p>
<p>缺点：</p>
<p>对较长的职责链，请求的处理可能涉及多个处理对象，系统性能将收到一定影响；职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，可能导致循环调用。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>八股文——集合篇</title>
    <url>/2024/05/20/%E5%85%AB%E8%82%A1%E6%96%87%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E7%AF%87/</url>
    <content><![CDATA[<p><img src="/assets/1714849629679.png" alt="71484962967" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="数组的索引"><a href="#数组的索引" class="headerlink" title="数组的索引"></a>数组的索引</h2><p>寻址公式&#x3D;数组的首地址+索引*存储数据类型的大小</p>
<p>（所以索引从0开始，这样比较高效）</p>
<h2 id="ArrayList底层的实现原理"><a href="#ArrayList底层的实现原理" class="headerlink" title="ArrayList底层的实现原理"></a>ArrayList底层的实现原理</h2><ul>
<li>底层是<strong>动态数组</strong>实现的</li>
<li>其初始化容量为0，当<strong>第一次</strong>添加数据的时候才会初始化容量为<strong>10</strong></li>
<li>进行扩容是原来的<strong>1.5倍</strong>，每次扩容都需<strong>要拷贝数组</strong></li>
<li>当添加数据时：<ul>
<li>确保数组已经使用的长度加一之后足够存下下一个数据</li>
<li>计算数组的容量，如果当前数组已使用长度+1后大于当前数组长度，则<strong>调用grow方法扩容</strong></li>
<li>确保新增数据有地方存储之后，则将新元素添加位于size的位置上</li>
<li>添加成功返回布尔值</li>
</ul>
</li>
</ul>
<blockquote>
<p>ArrayList list&#x3D;new ArrayList(10)扩容了几次？</p>
<p><code>0次</code></p>
<p>这里是指定了10的容量，暂不需要扩容</p>
</blockquote>
<h2 id="数组和List的转换"><a href="#数组和List的转换" class="headerlink" title="数组和List的转换"></a>数组和List的转换</h2><h3 id="数组-List"><a href="#数组-List" class="headerlink" title="数组-&gt;List"></a>数组-&gt;List</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> array2List&#123;</span><br><span class="line">    String[] strs=&#123;<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>&#125;;</span><br><span class="line">    List&lt;String&gt; list=Arrays.asList(strs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只是引用，并没有新建，所以当数组发生改变的时候，List也会相应改变</p>
</blockquote>
<h3 id="List-数组"><a href="#List-数组" class="headerlink" title="List-&gt;数组"></a>List-&gt;数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> list2Array&#123;</span><br><span class="line">    List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    String[] array=list.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[list.size()])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当List改变之后，数组不改变</p>
</blockquote>
<h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><h2 id="单项链表和双向链表"><a href="#单项链表和双向链表" class="headerlink" title="单项链表和双向链表"></a>单项链表和双向链表</h2><ul>
<li>单向只有一个方向，结点只有一个后继指针</li>
<li>双向支持两个方向，每个结点不止有一个后继指针next指向后面的结点，还有一个前驱指针prev指向前面的结点</li>
</ul>
<h2 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h2><ul>
<li>底层数据结构<ul>
<li>ArrayList是<strong>动态数组</strong>的数据结构实现的</li>
<li>LinkedList是<strong>双向链表</strong>的数据结构实现的</li>
</ul>
</li>
<li>操作数据效率<ul>
<li>ArrayList查找使用下标其效率会更快一点</li>
<li>其他查找&#x2F;删除&#x2F;新增&#x2F;更新的时间复杂度都差不多</li>
</ul>
</li>
<li>内存空间占用<ul>
<li>ArrayList底层是数组，内存连续，<strong>节省内存</strong></li>
<li>LinkedList是双向链表，和两个指针，<strong>更占用内存</strong></li>
</ul>
</li>
<li>线程安全：<strong>都不是线程安全</strong></li>
</ul>
<blockquote>
<p>尽量在方法内使用，可以使用线程安全（加锁，性能差点）</p>
</blockquote>
<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="HashMap实现原理"><a href="#HashMap实现原理" class="headerlink" title="HashMap实现原理"></a>HashMap实现原理</h2><p>其数据结构：<strong>hash表结构&#x3D;数组+链表&#x2F;红黑树</strong></p>
<ul>
<li>添加数据的时候，计算key的值确定元素在数组下的下标<ul>
<li>key相同则替换</li>
<li>不同则存入链表&#x2F;红黑树</li>
</ul>
</li>
<li>获取数据通过key的hash计算数组下标获取元素</li>
</ul>
<blockquote>
<p>jdk1.7和jdk1.8的区别：</p>
<p>1.8之前没有红黑树，之后才有。</p>
<p>只有链表<strong>长度大于8并且数组长度大于等于64</strong>才转为红黑树，如果树的结点<strong>小于等于临界值6</strong>，退回链表</p>
</blockquote>
<h2 id="HashMap的扩容机制"><a href="#HashMap的扩容机制" class="headerlink" title="HashMap的扩容机制"></a>HashMap的扩容机制</h2><p>扩容流程</p>
<ul>
<li>第一次初始化的时候，数组容量16，设置阈值&#x3D;<strong>容量*0.75</strong>（12）</li>
<li>后面只要需要的容量大于阈值，那就进行扩容，扩容大小是原先的<strong>两倍</strong></li>
<li>新建数组-遍历旧数组赋值</li>
</ul>
<h2 id="避免死循环"><a href="#避免死循环" class="headerlink" title="避免死循环"></a>避免死循环</h2><p>在1.7的jdk中会出现链表的死循环问题，主要原因是因为有使用了头插法。</p>
<p>在1.8之后使用了<strong>尾插法</strong>解决了这个问题</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
</search>
