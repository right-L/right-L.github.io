<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/2024/03/25/docker/</url>
    <content><![CDATA[<h1 id="Docker概念"><a href="#Docker概念" class="headerlink" title="Docker概念"></a>Docker概念</h1><h2 id="Docker理念"><a href="#Docker理念" class="headerlink" title="Docker理念"></a>Docker理念</h2><p>解决了<strong>运行环境</strong>和<strong>配置</strong>问题的软件容器，方便做持续集成并有助于<strong>整体发布</strong>的容器虚拟化技术。</p>
<h2 id="Docker与传统虚拟机的之前的区别"><a href="#Docker与传统虚拟机的之前的区别" class="headerlink" title="Docker与传统虚拟机的之前的区别"></a>Docker与传统虚拟机的之前的区别</h2><p>Docker容器是在<strong>操作系统层面上</strong>实现虚拟化，直接服用本地主机的操作系统；而传统虚拟机则是在<strong>硬件层面</strong>实现虚拟化。两者相比，前者启动<strong>速度更快</strong>，<strong>占用体积小</strong>。</p>
<ul>
<li>传统虚拟机技术是虚拟出一套硬件之后，在其运行一个完整的操作系统，在该系统上再运行所需的应用进程。</li>
<li>容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且没有进行硬件虚拟。因此更加轻便。</li>
<li>每个容器之间互相隔离，每个容器有自己的文件系统，容器之间进程不会互相影响，能区分计算资源。</li>
</ul>
<h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><ul>
<li>镜像</li>
<li>容器</li>
<li>仓库</li>
</ul>
<h1 id="下载Docker"><a href="#下载Docker" class="headerlink" title="下载Docker"></a>下载Docker</h1><blockquote>
<p>我是在centos7下安装的，其Docker下载地址如下：</p>
<p>[<strong><a href="https://docs.docker.com/get-docker/">https://docs.docker.com/get-docker/</a></strong></p>
<p>centos教程如下：</p>
<p>[<strong><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></strong></p>
<p>注意：作者的下载的时候是在2024&#x2F;3，最新下载教程或许有出入，最新最好跟官网教程相同步~</p>
</blockquote>
<h2 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br></pre></td></tr></table></figure>

<h2 id="安装gcc-c"><a href="#安装gcc-c" class="headerlink" title="安装gcc-c++"></a>安装gcc-c++</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install gcc- c++</span><br></pre></td></tr></table></figure>

<h2 id="安装yum-utils软件包"><a href="#安装yum-utils软件包" class="headerlink" title="安装yum-utils软件包"></a>安装yum-utils软件包</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h2 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h2 id="软件包更新"><a href="#软件包更新" class="headerlink" title="软件包更新"></a>软件包更新</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<h2 id="安装docker引擎、containerd-和-Docker-Compose"><a href="#安装docker引擎、containerd-和-Docker-Compose" class="headerlink" title="安装docker引擎、containerd 和 Docker Compose"></a>安装docker引擎、containerd 和 Docker Compose</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">re -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h2><ul>
<li><p>启动docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
</li>
<li><p>看docker摘要信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><ul>
<li><p>列出本地主机上的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker iamges</span><br><span class="line">#包含历史</span><br><span class="line">docker iamges -a</span><br><span class="line">#只显示id</span><br><span class="line">docker iamges -q</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询某个镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search xxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取某个镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看镜像&#x2F;容器&#x2F;数据卷所占的空间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi xxx(名字或者id)</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>docker虚悬镜像：</p>
<p>仓库名、标签都是none的镜像</p>
<p>其查看命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker iamge ls -f dangling=true</span><br></pre></td></tr></table></figure>

<p>删除命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker iamge prune</span><br><span class="line">y</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><ul>
<li><p>新建+启动容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run[options] iamge[commamd]</span><br><span class="line">#options说明：</span><br><span class="line">--name=&quot;容器新名字&quot;</span><br><span class="line">-d:后台运行</span><br><span class="line">-i:交互模式运行，通常与-t一起</span><br><span class="line">-t:为容器重新分配一个伪输出终端</span><br><span class="line">-P：随机端口映射</span><br><span class="line">-p:指定端口映射</span><br></pre></td></tr></table></figure>
</li>
<li><p>列出正在运行的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps[options]</span><br><span class="line">#options说明：</span><br><span class="line">-a:当前正在运行+历史运行过的</span><br><span class="line">-l:最近创建的</span><br><span class="line">-n:最近n个</span><br><span class="line">-q:静默模式，只显示编号</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#不启动新的进程，用exit退出导致容器停止</span><br><span class="line">docker attach</span><br><span class="line">#推荐，启动新的进程。不会导致容器停止</span><br><span class="line">docker exec</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#run进去，exit退出，容器停止</span><br><span class="line">exit</span><br><span class="line">#run进去，ctrl+p+q退出，容器不停止</span><br><span class="line">ctrl+p+q</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动已经停止的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器id或者名字</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop</span><br></pre></td></tr></table></figure>
</li>
<li><p>强制停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker kill</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看容器logs</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker logs 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看容器内部细节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure>
</li>
<li><p>从容器内拷贝文件到主机上（容器-&gt;主机），也就是复制容器里面的东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:容器内路径 目的主机路径</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入导出容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#导出</span><br><span class="line">docker export 容器id &gt; 文件名.tar</span><br><span class="line">#导入</span><br><span class="line">cat 文件名.tar |docker import -镜像用户:镜像版本号</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交容器副本使之成为一个新的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 要创建的目标镜像名:版本号 </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="私用镜像仓库"><a href="#私用镜像仓库" class="headerlink" title="私用镜像仓库"></a>私用镜像仓库</h2><ul>
<li><p>下载registry镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 5000:5000 -v 宿主机文件目录地址:容器中文件目录地址 --privileged=true registry</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看该私服仓库里有哪些镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -XGET http://ip地址:5000/v2/_catalog</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用tat命令对镜像进行修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag 要修改的镜像名字 ip地址:5000/新镜像名字:版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件使之支持http</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;insecure-registries&quot;: [&quot;ip地址:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将修改好的镜像推送到私服库里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push id地址:5000/镜像名字:版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们可以直接在私服库里拉取我们推送进去的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull id地址:5000/镜像名字:版本</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v 宿主机文件目录地址:容器中文件目录地址 --privileged=true</span><br></pre></td></tr></table></figure>

<p><strong>–privileged&#x3D;true</strong>命令，扩大容器的权限解决挂载目录没有<strong>权限</strong>的问题。</p>
<p>卷就是目录或者文件，存在于一个或者多个容器中。卷的设计目的就是数据的<strong>持久化</strong>，完全<strong>独立于容器的生命周期</strong>，因此docker<strong>不会在容器删除时删除其挂载的数据卷</strong>。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>数据卷可以在容器之间共享或者重用数据</li>
<li>卷中的更改可以直接实时生效</li>
<li>数据卷中的更改不会包含在镜像的更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li><p>如果容器停止了，但是我在宿主机继续在映射文件中做了修改，那么重新开启容器也依旧会有该修改。</p>
</li>
<li><p>在run的时候加-v设置数据卷，设置一次就可以，设置的时候可以设置多个卷。</p>
</li>
<li><p>查看数据卷 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除数据卷</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker volume rm 数据卷名称或者id</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>不管是容器中删除该<strong>文件</strong>还是宿主机删除<strong>文件</strong>，都会删除不见。其容器卷的目的不是备份！！主要目的是数据持久化！</p>
<p>但是容器删除了，删除容器之前没有删除容器里的文件，宿主机对应的文件还是会有的！注意两种区别！</p>
</blockquote>
<h1 id="容器的继承共享"><a href="#容器的继承共享" class="headerlink" title="容器的继承共享"></a>容器的继承共享</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --privileged=true --volumes-from 父类容器 --name 新容器名字 镜像名字</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>可以理解为复制了一个容器，但是有点不一样的是，他还继承了数据卷，也就是新建的这个容器中，也可以将文件创建好映射到他们之间。</strong></p>
<p><strong>（谁死了都没事，活了还是可以看到！）</strong></p>
</blockquote>
<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="创建-运行"><a href="#创建-运行" class="headerlink" title="创建+运行"></a>创建+运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name t1 tomcat</span><br></pre></td></tr></table></figure>

<h2 id="404问题"><a href="#404问题" class="headerlink" title="404问题"></a>404问题</h2><blockquote>
<p>发现最新版的tomcat在容器内运行的时候，在网页中访问localhost:8080会报404</p>
</blockquote>
<p>解决方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line">#删除webapps</span><br><span class="line">rm -r webapps</span><br><span class="line">#重命名</span><br><span class="line">mv webapps.dist webapps</span><br></pre></td></tr></table></figure>

<blockquote>
<p>也可以直接使用tomcat8，就没有这个问题了~</p>
</blockquote>
<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h2 id="需要设置容器卷"><a href="#需要设置容器卷" class="headerlink" title="需要设置容器卷"></a>需要设置容器卷</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --privileged=true -v /rightl/mysql/log:/var/log/mysql -v /rightl/mysql/data:/var/lib/mysql -v /rightl/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 --name mysql mysql:5.7</span><br></pre></td></tr></table></figure>

<h2 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id /bin/bsah</span><br><span class="line">mysql -u root -p</span><br><span class="line">#可以使用以下命令来查看</span><br><span class="line">show variables like &#x27;character%&#x27;;</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p>因为我已经设置 了数据卷了，所以我直接在我自己宿主机下的&#x2F;rightl&#x2F;mysql&#x2F;conf下更改即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim my.cnf</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置之后记得要重启容器再查看一次哈~</p>
</blockquote>
<h2 id="mysql中数据卷的好处"><a href="#mysql中数据卷的好处" class="headerlink" title="mysql中数据卷的好处"></a>mysql中数据卷的好处</h2><p>因为我做了数据卷，如果容器被删了，但是我宿主机中的这些文件不会删，那么在重创建一个容器的时候，映射也是宿主机的这几个文件，那么我新建的这个mysql容器也会保留住之前删掉的容器里面mysql的数据库所有信息！！</p>
<h2 id="高级篇——主从复制"><a href="#高级篇——主从复制" class="headerlink" title="高级篇——主从复制"></a>高级篇——主从复制</h2><h3 id="run一个主mysql容器"><a href="#run一个主mysql容器" class="headerlink" title="run一个主mysql容器"></a>run一个主mysql容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3307:3306 --name mysql-master -v /mydata/mysql-master/log:/var/log/mysql -v /mydata/mysql-master/data:/var/lib/mysql -v /mydata/mysql-master/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos100 ~]# cd /mydata/mysql-master/conf/</span><br><span class="line">[root@centos100 conf]# vim my.cnf</span><br><span class="line">[root@centos100 conf]# cat my.cnf </span><br><span class="line">[mysqld]</span><br><span class="line">server_id=101</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">binlog_format=mixed</span><br><span class="line">expire_logs_days=7</span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>

<h3 id="重新启动该容器后，创建数据同步用户"><a href="#重新启动该容器后，创建数据同步用户" class="headerlink" title="重新启动该容器后，创建数据同步用户"></a>重新启动该容器后，创建数据同步用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line">GRANT REPLICATION SLAVE,REPLICATION CLIENT ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<h3 id="run一个从mysql容器"><a href="#run一个从mysql容器" class="headerlink" title="run一个从mysql容器"></a>run一个从mysql容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3308:3306 --name mysql-slave -v /mydata/mysql-slave/log:/var/log/mysql -v /mydata/mysql-slave/data:/var/lib/mysql -v /mydata/mysql-slave/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@centos100 ~]# cd /mydata/mysql-slave/conf/</span><br><span class="line">[root@centos100 conf]# vim my.cnf</span><br><span class="line">[root@centos100 conf]# cat my.cnf </span><br><span class="line">[mysqld]</span><br><span class="line">server_id=102</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">log-bin=mall-mysql-bin</span><br><span class="line">binlog_cache_size=1M</span><br><span class="line">binlog_format=mixed</span><br><span class="line">expire_logs_days=7</span><br><span class="line">slave_skip_errors=1062</span><br><span class="line">relay_log=mall-mysql-relay-bin</span><br><span class="line">log_slave_updates=1</span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure>

<h3 id="进入主mysql"><a href="#进入主mysql" class="headerlink" title="进入主mysql"></a>进入主mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711343789974.png" alt="71134378997" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="进入从mysql"><a href="#进入从mysql" class="headerlink" title="进入从mysql"></a>进入从mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST=&#x27;192.168.22.131&#x27;, MASTER_USER=&#x27;slave&#x27;, MASTER_PASSWORD=&#x27;123456&#x27;, MASTER_PORT=3307, MASTER_LOG_FILE=&#x27;mall-mysql-bin.000001&#x27;, MASTER_LOG_POS=617, MASTER_CONNECT_RETRY=30;</span><br></pre></td></tr></table></figure>

<p>开启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711343862735.png" alt="71134386273" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>验证：主mysql创建的数据库在从mysql可以看到，即成功</p>
</blockquote>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="修改redis的conf配置文件"><a href="#修改redis的conf配置文件" class="headerlink" title="修改redis的conf配置文件"></a>修改redis的conf配置文件</h2><p><img src="/assets/1711343453816.png" alt="71134345381" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="run容器"><a href="#run容器" class="headerlink" title="run容器"></a>run容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis01 --privileged=true -v /app/redis/redis.conf:/etc/redis/redis.conf -v /app/redis/data:/data -d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure>

<h2 id="高级篇——redis集群"><a href="#高级篇——redis集群" class="headerlink" title="高级篇——redis集群"></a>高级篇——redis集群</h2><h3 id="run六个redis容器"><a href="#run六个redis容器" class="headerlink" title="run六个redis容器"></a>run六个redis容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis-node-1 --net host --privileged=true -v /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6381</span><br><span class="line">docker run -d --name redis-node-2 --net host --privileged=true -v /data/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6382</span><br><span class="line">docker run -d --name redis-node-3 --net host --privileged=true -v /data/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6383</span><br><span class="line">docker run -d --name redis-node-4 --net host --privileged=true -v /data/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6384</span><br><span class="line">docker run -d --name redis-node-5 --net host --privileged=true -v /data/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6385</span><br><span class="line">docker run -d --name redis-node-6 --net host --privileged=true -v /data/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6386</span><br></pre></td></tr></table></figure>

<h3 id="进入6381"><a href="#进入6381" class="headerlink" title="进入6381"></a>进入6381</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-node-1 /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 192.168.22.131:6381 192.168.22.131:6382 192.168.22.131:6383 192.168.22.131:6384 192.168.22.131:6385 192.168.22.131:6386 --cluster-replicas 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>redis集群一共有<strong>16384个槽位</strong>，以上命令会直接平均分配给三个主机</p>
</blockquote>
<p><img src="/assets/1711344273535.png" alt="71134427353" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="存储数据的时候需要-p-端口-c"><a href="#存储数据的时候需要-p-端口-c" class="headerlink" title="存储数据的时候需要-p 端口 -c"></a>存储数据的时候需要-p 端口 -c</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6381 -c</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711344352120.png" alt="71134435212" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>会根据槽的分配，每个存储的数据分配的主redis有所不同。所以可以看到存储的时候，会反复横跳，可能到1也可能到3的redis。</p>
</blockquote>
<h3 id="检测分配"><a href="#检测分配" class="headerlink" title="检测分配"></a>检测分配</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster check 192.168.22.131:6381</span><br></pre></td></tr></table></figure>

<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name redis-node-7 --net host --privileged=true -v /data/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6387</span><br><span class="line">docker run -d --name redis-node-8 --net host --privileged=true -v /data/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6388</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it redis-node-7 /bin/bash</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.22.131:6387 192.168.22.131:6381</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时已经把7加入进去了，但是check可以发现槽还没有分配！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 192.168.22.131:6381</span><br></pre></td></tr></table></figure>

<p><strong>（16384&#x2F;4&#x3D;4096）</strong></p>
<p><img src="/assets/1711344743921.png" alt="71134474392" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>这里其实不是重新分配，是每家匀过去一点</p>
</blockquote>
<p>最后把从节点加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node 192.168.22.131:6388 192.168.22.131:6387 --cluster-slave --cluster-master-id f1ecbda8c42a84de065df6833975895443acc0bf</span><br></pre></td></tr></table></figure>

<h3 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node 192.168.22.131:6388 ca7e601832d1e3ca2860d425e4c767445e03dceb</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#把6387的4096槽位都给6381（也可以匀3次）</span><br><span class="line">#然后把6387也删了</span><br></pre></td></tr></table></figure>

<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><blockquote>
<p><strong>假设主机宕机了，从机会不会上位？会的！！！</strong></p>
<p><strong>即便原先的主机活了，但是不会变回主机了，还是从机</strong></p>
</blockquote>
<h1 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>创建&#x2F;myfile文件夹，写Dockerfile文件</p>
<p>创建一个centos7的容器，并且在里面下载vim等一些东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line">RUN yum -y install glibc.i686</span><br><span class="line">RUN mkdir /usr/local/java</span><br><span class="line">ADD jdk-8u181-linux-x64.tar.gz /usr/local/java</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/java/jdk1.8.0_181</span><br><span class="line">ENV JRE_HOME $JAVA_HOME/jre</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">ENV PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;success----------ok&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<p>构建（后面有个空格加一个点）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t centosnew:1.1 .</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>（一开始我使用的最新版centos报错，然后是因为centos8的原因</strong></p>
<p><strong>参考：<a href="https://mdnice.com/writing/46d5098506284e2db99d17363b067692%EF%BC%89">https://mdnice.com/writing/46d5098506284e2db99d17363b067692）</a></strong></p>
<p><strong>运行时候：</strong></p>
<p><strong>docker run -it centosnew:1.1</strong></p>
<p><strong>注意：可以不输入&#x2F;bin&#x2F;bash、并且呢在文件的时候add自带解压哈！</strong></p>
</blockquote>
<h1 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h1><p><img src="/assets/1711345463933.png" alt="71134546393" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看网络</span><br><span class="line">docker network ls</span><br><span class="line">#查看网络源数据</span><br><span class="line">docker network inspect xxx</span><br><span class="line">#删除网络</span><br><span class="line">docker network rm xxx</span><br></pre></td></tr></table></figure>

<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。需要定义一个yaml格式的配置文件<strong>docker-compose.yml</strong>，写<strong>好多个容器之间的调用关系</strong>，只需要一个命令就可以<strong>同时启动&#x2F;关闭</strong>这些容器。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<p>最新的不需要额外下载compose，自带了。并且没有短线连接了！</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看帮助</span><br><span class="line">docker compose -h</span><br><span class="line">#启动</span><br><span class="line">docker compose up</span><br><span class="line">#启动并且后台运行</span><br><span class="line">docker compose up -d</span><br><span class="line">#停止并且删除</span><br><span class="line">docker compose down</span><br><span class="line">#展现正在运行的</span><br><span class="line">docker compose ps</span><br><span class="line">#展现运行过的（包括历史）</span><br><span class="line">docker compose top</span><br><span class="line">#检查配置</span><br><span class="line">docker compose config</span><br><span class="line">#有问题才输出</span><br><span class="line">docker compose config -q</span><br></pre></td></tr></table></figure>

<h1 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h1><h2 id="run一个容器"><a href="#run一个容器" class="headerlink" title="run一个容器"></a>run一个容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data --name portainer portainer/portainer</span><br></pre></td></tr></table></figure>

<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip地址:9000</span><br></pre></td></tr></table></figure>

<p><img src="/assets/1711352576673.png" alt="71135257667" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2024/03/03/SpringBoot/</url>
    <content><![CDATA[<h1 id="springboot的第一个helloword"><a href="#springboot的第一个helloword" class="headerlink" title="springboot的第一个helloword"></a>springboot的第一个helloword</h1><h2 id="快速生成一个项目"><a href="#快速生成一个项目" class="headerlink" title="快速生成一个项目"></a>快速生成一个项目</h2><h3 id="可以在spring官网上用以下方式"><a href="#可以在spring官网上用以下方式" class="headerlink" title="可以在spring官网上用以下方式"></a>可以在spring官网上用以下方式</h3><p><img src="/assets/1698196929347.png" alt="69819692934" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>这里添加了<strong>springweb</strong>的依赖，生成之后文件夹会有以下：</p>
<p><img src="/assets/1698196955000.png" alt="69819695500" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="可以直接在idea中生成一个springboot项目（推荐）"><a href="#可以直接在idea中生成一个springboot项目（推荐）" class="headerlink" title="可以直接在idea中生成一个springboot项目（推荐）"></a>可以直接在idea中生成一个springboot项目（推荐）</h3><p> <img src="/assets/1698197100320.png" alt="69819710032" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698197150100.png" alt="69819715010" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>启动之后会显示以下<strong>（成功）</strong>：</p>
<p><img src="/assets/1698197193501.png" alt="69819719350" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>浏览器访问本地8080：</p>
<p><img src="/assets/1698197213950.png" alt="69819721395" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="启动后下面有一行报错"><a href="#启动后下面有一行报错" class="headerlink" title="启动后下面有一行报错"></a>启动后下面有一行报错</h3><blockquote>
<p>报错显示：An incompatible version [1.2.23] of the Apache Tomcat Native library is installed</p>
<p>原因：似乎是因为tomcat的版本问题</p>
<p>解决方案参考：<a href="https://blog.csdn.net/rej177/article/details/128223813">https://blog.csdn.net/rej177/article/details/128223813</a></p>
</blockquote>
<p> <img src="/assets/1698197394956.png" alt="69819739495" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h3 id="编写hellowrod"><a href="#编写hellowrod" class="headerlink" title="编写hellowrod"></a>编写hellowrod</h3><p><img src="/assets/1698197446208.png" alt="69819744620" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698197454255.png" alt="69819745425" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>回顾一下spring里的@RequesMapping(&#x2F;hello)，表示当前用户<strong>访问&#x2F;hello路径</strong>的时候将会调用它所注释的方法。</p>
<p>其中它可以被更具体的注释代替，如下：</p>
<p>@GetMapping()表示处理get请求</p>
<p>@PostMapping()表示处理post请求</p>
<p>@PutMapping()表示处理put请求</p>
<p>@DeleteMapping()表示处理delete请求</p>
</blockquote>
<h2 id="进行项目的打包"><a href="#进行项目的打包" class="headerlink" title="进行项目的打包"></a>进行项目的打包</h2><p> <img src="/assets/1698197551373.png" alt="69819755137" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>原先有遇见过报错，后面找到原因是因为配置文件中有中文，出现了<strong>乱码</strong>，解决方案如下（但是后面推荐用yaml文件作为配置文件，比较方便)</p>
</blockquote>
<p><img src="/assets/1698197741285.png" alt="69819774128" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>打包好之后可以看到一个jar文件：</p>
<p> <img src="/assets/1698198251755.png" alt="69819825175" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>打开shell执行以下即可运行（<strong>ctrl+c</strong>停止）：</p>
<p><img src="/assets/1698198276653.png" alt="69819827665" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="更改启动后的画面"><a href="#更改启动后的画面" class="headerlink" title="更改启动后的画面"></a>更改启动后的画面</h2><p> <img src="/assets/1698198408847.png" alt="69819840884" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698198429788.png" alt="69819842978" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<blockquote>
<p>可以在网站上找：<a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a></p>
<p>修改<strong>resources&#x2F;banner.txt</strong>文件即可</p>
</blockquote>
<h1 id="配置文件的基本使用"><a href="#配置文件的基本使用" class="headerlink" title="配置文件的基本使用"></a>配置文件的基本使用</h1><h2 id="两种配置文件的格式"><a href="#两种配置文件的格式" class="headerlink" title="两种配置文件的格式"></a>两种配置文件的格式</h2><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><p>key&#x3D;value</p>
<h3 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a>application.yaml</h3><p>key:空格 value</p>
<h2 id="yaml的好处"><a href="#yaml的好处" class="headerlink" title="yaml的好处"></a>yaml的好处</h2><p>可以存许多不同类型的数值</p>
<p> <img src="/assets/1698199063469.png" alt="69819906346" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rigthl</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2002</span><span class="string">/11/14</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">study</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">狗崽</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">dog:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">狗崽</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="使用yaml进行数据注入"><a href="#使用yaml进行数据注入" class="headerlink" title="使用yaml进行数据注入"></a>使用yaml进行数据注入</h2><h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><h4 id="dog"><a href="#dog" class="headerlink" title="dog"></a>dog</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rightl.lab2.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class="line"><span class="comment">//@Component的意思是标识一个类为Spring容器管理的组件，会被spring自动扫描并且注册为bean</span></span><br><span class="line"><span class="comment">//为了更好的区别还有以下：</span></span><br><span class="line"><span class="comment">//@Service: 用于标识服务层的组件。</span></span><br><span class="line"><span class="comment">//@Repository: 用于标识数据访问层的组件，通常用于DAO类。</span></span><br><span class="line"><span class="comment">//@Controller: 用于标识控制器层的组件，通常用于Spring MVC中的Controller类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line"><span class="comment">//    @Value(&quot;狗崽&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    @Value(&quot;2&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="person"><a href="#person" class="headerlink" title="person"></a>person</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rightl.lab2.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, Integer age, Boolean happy, Date birth, Map&lt;String, Object&gt; maps, List&lt;Object&gt; lists, Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getHappy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHappy</span><span class="params">(Boolean happy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.happy = happy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirth</span><span class="params">(Date birth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birth = birth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getMaps</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaps</span><span class="params">(Map&lt;String, Object&gt; maps)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">getLists</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLists</span><span class="params">(List&lt;Object&gt; lists)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lists = lists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">getDog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDog</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, happy=&quot;</span> + happy +</span><br><span class="line">                <span class="string">&quot;, birth=&quot;</span> + birth +</span><br><span class="line">                <span class="string">&quot;, maps=&quot;</span> + maps +</span><br><span class="line">                <span class="string">&quot;, lists=&quot;</span> + lists +</span><br><span class="line">                <span class="string">&quot;, dog=&quot;</span> + dog +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rightl.lab2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rightl.lab2.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> com.rightl.lab2.pojo.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lab2ApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="comment">//    @Autowired注解用于自动装配Spring Bean。</span></span><br><span class="line"><span class="comment">//    当一个类中的字段、构造函数或方法被@Autowired注解标记时，Spring容器会自动在容器中查找匹配的Bean，</span></span><br><span class="line"><span class="comment">//    并将其注入到标记了@Autowired的地方。</span></span><br><span class="line"><span class="comment">//    @Qualifier注解与@Autowired一起使用，用于指定具体的Bean名称，以解决多个同类型的Bean存在时的歧义性问题。</span></span><br><span class="line"><span class="comment">//    如果一个接口有多个实现类，或者一个类有多个子类，通过@Qualifier可以明确指定要注入的Bean。</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(dog);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Dog&#123;name=&#x27;狗崽&#x27;, age=&#x27;2&#x27;&#125;</span><br><span class="line">Person&#123;name=&#x27;rigthl&#x27;, age=21, happy=true, birth=Thu Nov 14 00:00:00 CST 2002, maps=&#123;k1=v1, k2=v2&#125;, lists=[study, java, python], dog=Dog&#123;name=&#x27;狗崽&#x27;, age=&#x27;2&#x27;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用properties进行数据注入"><a href="#使用properties进行数据注入" class="headerlink" title="使用properties进行数据注入"></a>使用properties进行数据注入</h2><p>（不推荐，麻烦）</p>
<p> <img src="/assets/1698199256293.png" alt="69819925629" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="配置文件的其他注意事项"><a href="#配置文件的其他注意事项" class="headerlink" title="配置文件的其他注意事项"></a>配置文件的其他注意事项</h2><h3 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h3><p> <img src="/assets/1698289890102.png" alt="69828989010" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>可以写在以上的四个位置，有<strong>优先级</strong>：</p>
<ul>
<li>file:.&#x2F;config&#x2F;</li>
<li>file:.&#x2F;</li>
<li>classpath:&#x2F;config&#x2F;</li>
<li>classpath:&#x2F;</li>
</ul>
<h3 id="yaml文件可以使用—用来分割不同的环境配置"><a href="#yaml文件可以使用—用来分割不同的环境配置" class="headerlink" title="yaml文件可以使用—用来分割不同的环境配置"></a>yaml文件可以使用—用来分割不同的环境配置</h3><blockquote>
<p>默认最后一个优先级最高(此时的端口号是8081)</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果给加上以下代码(给配置文件起个名字，新版本跟之前的不一样)，端口就是8080</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">config:</span></span><br><span class="line">		<span class="attr">activate:</span></span><br><span class="line">			<span class="attr">on-profile:</span> <span class="string">tests</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用以下代码，用来调用其想要的配置文件,端口就是8081</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">tests</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">tests</span></span><br></pre></td></tr></table></figure>

<h1 id="自动装配原理"><a href="#自动装配原理" class="headerlink" title="自动装配原理"></a>自动装配原理</h1><ul>
<li>springboot启动会加载大量的自动配置类</li>
<li>我们看需要的功能有没有在springboot中默认写好的自动配置类中</li>
<li>看自动配置类中到底配置了哪些组件</li>
<li>给容器自动配置类添加组件的时候，会从properties类中获取某些属性，在配置文件中指定这些属性的值：<ul>
<li>xxxAutoConfigurartion:自动配置类</li>
<li>xxxProperties:封装配置文件中相关属性</li>
</ul>
</li>
</ul>
<p>可以在yaml文件中写以下，运行的时候可以看到哪些自动配置类<strong>是否生效</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h1 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h1><h2 id="webjars"><a href="#webjars" class="headerlink" title="webjars"></a>webjars</h2><blockquote>
<p>网址：<a href="https://www.webjars.org/">https://www.webjars.org/</a></p>
<p>可以在里面找到想要的，例如我要jquery的maven</p>
</blockquote>
<p> <img src="/assets/1698291489338.png" alt="69829148933" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>那么在依赖里面加入上面那段即可</p>
<h2 id="静态资源默认的位置"><a href="#静态资源默认的位置" class="headerlink" title="静态资源默认的位置"></a>静态资源默认的位置</h2><ul>
<li><p>webjars</p>
<p>访问：locahost:8080&#x2F;webjars&#x2F;</p>
</li>
</ul>
<p> <img src="/assets/1698291651596.png" alt="69829165159" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul>
<li>pubilc</li>
<li>static</li>
<li>resources</li>
</ul>
<p> <img src="/assets/1698291725996.png" alt="69829172599" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​	访问：localhost:&#x2F;8080&#x2F;</p>
<p> <img src="/assets/1698291824944.png" alt="69829182494" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>resource&gt;static（默认）&gt;public</p>
<blockquote>
<p>对于静态资源的位置也可以在yaml配置文件中进行修改，但是一般不建议修改！</p>
</blockquote>
<h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><p>这里把首页直接放在static中，并且命名为index.html，在浏览器中直接访问8080即可</p>
<blockquote>
<p>idea中，如果想要快速把html格式生成，使用快捷键**!+tab**</p>
</blockquote>
<p> <img src="/assets/1698292122038.png" alt="69829212203" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<h2 id="ico"><a href="#ico" class="headerlink" title="ico"></a>ico</h2><blockquote>
<p>截至现在暂时最新的使用方法是直接讲ico文件命名为favicon，放入static中即可，springboot会自动识别并且用作网站图标。</p>
<p>其他方式也有：</p>
<p>如果你放在了不同的路径，在yaml文件中配置一下即可</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">mvc:</span></span><br><span class="line">		<span class="attr">favicon:</span></span><br><span class="line">			<span class="attr">static-path-pattern:</span> <span class="string">/path/xxxxx</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/assets/1698292427172.png" alt="69829242717" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p> <img src="/assets/1698292449293.png" alt="69829244929" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title>阅读指南</title>
    <url>/2024/03/02/hello-world/</url>
    <content><![CDATA[<p><strong>欢迎各位来到我的<code>BLOG~</code></strong></p>
<blockquote>
<p>​	博客主要用于写个人的学习笔记以及生活杂七杂八的记录。</p>
<p>​	初心是希望能够<strong>记录自己不断进步的足迹</strong>以及<strong>生活美好点滴</strong>！</p>
<p>​	如博客中有文章有<strong>疑问</strong>or<strong>错误</strong>可以点击首页的——“联系我📫”，将您想对我说的发送至邮箱~</p>
</blockquote>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
  </entry>
  <entry>
    <title>动力恒合仓库项目2</title>
    <url>/2024/04/28/warehouse2/</url>
    <content><![CDATA[<h1 id="商品列表"><a href="#商品列表" class="headerlink" title="商品列表"></a>商品列表</h1><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer productId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer storeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer brandId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String productNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer productInvent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer typeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer supplyId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer placeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer unitId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String introduce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 0 下架 1 上架</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String upDownState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal inPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal salePrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal memPrice;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String imgs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date productDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date suppDate;</span><br><span class="line"><span class="comment">//    =======追加属性=======</span></span><br><span class="line"><span class="comment">//    品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line"><span class="comment">//    供应商</span></span><br><span class="line">    <span class="keyword">private</span> String supplyName;</span><br><span class="line"><span class="comment">//    地名</span></span><br><span class="line">    <span class="keyword">private</span> String placeName;</span><br><span class="line"><span class="comment">//    分类名称</span></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"><span class="comment">//    是否过期</span></span><br><span class="line">    <span class="keyword">private</span> Integer isOverDate;</span><br><span class="line"><span class="comment">//    仓库名称</span></span><br><span class="line">    <span class="keyword">private</span> String storeName;</span><br><span class="line"><span class="comment">//    单位</span></span><br><span class="line">    <span class="keyword">private</span> String unitName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper类"><a href="#mapper类" class="headerlink" title="mapper类"></a>mapper类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.pn.page.Page;</span><br><span class="line"><span class="keyword">import</span> io.lettuce.core.dynamic.annotation.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> &#123;</span><br><span class="line"><span class="comment">//    查询商品行数</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">findProductRowCount</span><span class="params">(Product product)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    分页查询商品方法</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">findProductPage</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page page,<span class="meta">@Param(&quot;product&quot;)</span> Product product)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  //    查询商品行数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public Integer findProductRowCount(Product product);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findProductRowCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">  select count(*)</span><br><span class="line">  from product t1,brand t2,product_type t3,supply t4,place t5</span><br><span class="line">  where t1.brand_id=t2.brand_id and t1.type_id=t3.type_id and t1.supply_id=t4.supply_id and t1.place_id=t5.place_id</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;storeId != null&quot;</span>&gt;</span></span><br><span class="line">    and t1.store_id = #&#123;storeId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;productName != null and productName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.product_name like concat(&#x27;%&#x27;,#&#123;productName&#125;,&#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName!= null and brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t2.brand_name like concat(&#x27;%&#x27;, #&#123;brandName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;typeName != null and typeName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t3.type_name like concat(&#x27;%&#x27;, #&#123;typeName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;supplyName != null and supplyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t4.supply_name like concat(&#x27;%&#x27;, #&#123;supplyName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;placeName != null and placeName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t5.place_name like concat(&#x27;%&#x27;, #&#123;placeName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;upDownState != null and upDownState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.up_down_state = #&#123;upDownState&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isOverDate==1&quot;</span>&gt;</span></span><br><span class="line">    and t1.supp_date <span class="symbol">&amp;lt;</span>=now()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;isOverDate==0&quot;</span>&gt;</span></span><br><span class="line">    and t1.supp_date <span class="symbol">&amp;gt;</span>now()</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  //    分页查询商品方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public List&lt;Product&gt; findProductPage(@Param(&quot;page&quot;) Page page,@Param(&quot;product&quot;) Product product);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findProductPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">    select t1.*, t2.brand_name brandName, t3.type_name typeName,t4.supply_name supplyName,</span><br><span class="line">           t5.place_name placeName, t6.unit_name unitName,t7.store_name storeName</span><br><span class="line">    from product t1,brand t2,product_type t3,supply t4,place t5,unit t6,store t7</span><br><span class="line">    where t1.brand_id=t2.brand_id and t1.type_id=t3.type_id and t1.supply_id=t4.supply_id and t1.place_id=t5.place_id</span><br><span class="line">      and t1.unit_id=t6.unit_id and t1.store_id=t7.store_id</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.storeId != null&quot;</span>&gt;</span></span><br><span class="line">      and t1.store_id = #&#123;product.storeId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.productName != null and product.productName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t1.product_name like concat(&#x27;%&#x27;,#&#123;product.productName&#125;,&#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.brandName!= null and product.brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t2.brand_name like concat(&#x27;%&#x27;, #&#123;product.brandName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.typeName != null and product.typeName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t3.type_name like concat(&#x27;%&#x27;, #&#123;product.typeName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.supplyName != null and product.supplyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t4.supply_name like concat(&#x27;%&#x27;, #&#123;product.supplyName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.placeName != null and product.placeName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t5.place_name like concat(&#x27;%&#x27;, #&#123;placeName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.upDownState != null and product.upDownState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and t1.up_down_state = #&#123;product.upDownState&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.isOverDate==1&quot;</span>&gt;</span></span><br><span class="line">      and t1.supp_date <span class="symbol">&amp;lt;</span>=now()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;product.isOverDate==0&quot;</span>&gt;</span></span><br><span class="line">      and t1.supp_date <span class="symbol">&amp;gt;</span>now()</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    order by t1.create_time desc</span><br><span class="line">    limit #&#123;page.limitIndex&#125;, #&#123;page.pageSize&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类"><a href="#service类" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.pn.page.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line"><span class="comment">//    分页查询所有商品</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryProductPage</span><span class="params">(Page page, Product product)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.pn.page.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.ProductService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    分页查询所有商品</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryProductPage</span><span class="params">(Page page, Product product)</span> &#123;</span><br><span class="line"><span class="comment">//        查询行数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> productMapper.findProductRowCount(product);</span><br><span class="line">        List&lt;Product&gt; productPage = productMapper.findProductPage(page, product);</span><br><span class="line">        page.setTotalNum(count);</span><br><span class="line">        page.setResultList(productPage);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"><span class="comment">//    分页查询所有商品</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;product-page-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">productListPage</span><span class="params">(Page page, Product product)</span>&#123;</span><br><span class="line">        page = productService.queryProductPage(page, product);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(page);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改过滤器"><a href="#修改过滤器" class="headerlink" title="修改过滤器"></a>修改过滤器</h2><blockquote>
<p>图片要显示出来，所有过滤要添加白名单</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath();</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(urlList.contains(servletPath)||servletPath.contains(<span class="string">&quot;/img/upload&quot;</span>))&#123;</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h1 id="查看商品类别"><a href="#查看商品类别" class="headerlink" title="查看商品类别"></a>查看商品类别</h1><h2 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品分类表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductType</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer typeId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String typeDesc;</span><br><span class="line"><span class="comment">//    追加</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ProductType&gt; ChildProductCategory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper映射"><a href="#mapper映射" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.ProductType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductTypeMapper</span> &#123;</span><br><span class="line"><span class="comment">//    查询商品分类</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ProductType&gt; <span class="title function_">findAllProductType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.ProductTypeMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  //    查询商品分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public List&lt;ProductType&gt; findAllProductType();--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllProductType&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;productType&quot;</span>&gt;</span></span><br><span class="line">    select * from product_type</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-1"><a href="#service类-1" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.ProductType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductTypeService</span>&#123;</span><br><span class="line"><span class="comment">//    查询所有商品的分类树</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ProductType&gt; <span class="title function_">productTypeTree</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.ProductType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.ProductTypeMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.ProductTypeService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;com.pn.service.impl.ProductTypeServiceImpl&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductTypeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductTypeService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductTypeMapper productTypeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    查询所有商品的分类树</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;&#x27;all:typeTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ProductType&gt; <span class="title function_">productTypeTree</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;ProductType&gt; productTypeList = productTypeMapper.findAllProductType();</span><br><span class="line">        List&lt;ProductType&gt; productTree = allTypeToTypeTree(productTypeList, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> productTree;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将查询到的所有商品分类List&lt;ProductType&gt;转成商品分类树List&lt;ProductType&gt;的算法</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;ProductType&gt; <span class="title function_">allTypeToTypeTree</span><span class="params">(List&lt;ProductType&gt; allTypeList,</span></span><br><span class="line"><span class="params">                                                Integer parentId)</span>&#123;</span><br><span class="line"><span class="comment">//一级</span></span><br><span class="line">        List&lt;ProductType&gt; typeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ProductType productType : allTypeList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(productType.getParentId().equals(parentId))&#123;</span><br><span class="line">                typeList.add(productType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ProductType productType : typeList) &#123;</span><br><span class="line">            List&lt;ProductType&gt; childTypeList =</span><br><span class="line">                    allTypeToTypeTree(allTypeList, productType.getTypeId());</span><br><span class="line">            productType.setChildProductCategory(childTypeList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> typeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-1"><a href="#控制类-1" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询所有商品分类树</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProductTypeService productTypeService;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/category-tree&quot;)</span></span><br><span class="line"><span class="keyword">public</span>  Result <span class="title function_">loadProductTree</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;ProductType&gt; typeTreeList = productTypeService.productTypeTree();</span><br><span class="line">    <span class="keyword">return</span> Result.ok(typeTreeList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="商品的图片上传"><a href="#商品的图片上传" class="headerlink" title="商品的图片上传"></a>商品的图片上传</h1><h2 id="控制类-2"><a href="#控制类-2" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将配置文件的file.upload-path属性值注入给控制器的uploadPath属性,</span></span><br><span class="line"><span class="comment">    * 其为图片上传到项目的目录路径(类路径classes即resources下的static/img/upload);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;file.upload-path&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String uploadPath;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 上传图片的url接口/product/img-upload</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 参数MultipartFile file对象封装了上传的图片;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@CrossOrigin</span>表示该url接口允许跨域请求;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@CrossOrigin</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/img-upload&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Result <span class="title function_">uploadImg</span><span class="params">(MultipartFile file)</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//拿到图片上传到的目录(类路径classes下的static/img/upload)的File对象</span></span><br><span class="line">           <span class="type">File</span> <span class="variable">uploadDirFile</span> <span class="operator">=</span> ResourceUtils.getFile(uploadPath);</span><br><span class="line">           <span class="comment">//拿到图片上传到的目录的磁盘路径</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">uploadDirPath</span> <span class="operator">=</span> uploadDirFile.getAbsolutePath();</span><br><span class="line">           <span class="comment">//拿到图片保存到的磁盘路径</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">fileUploadPath</span> <span class="operator">=</span> uploadDirPath + <span class="string">&quot;\\&quot;</span> + file.getOriginalFilename();</span><br><span class="line">           <span class="comment">//保存图片</span></span><br><span class="line">           file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(fileUploadPath));</span><br><span class="line">           <span class="comment">//成功响应</span></span><br><span class="line">           <span class="keyword">return</span> Result.ok(<span class="string">&quot;图片上传成功！&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           <span class="comment">//失败响应</span></span><br><span class="line">           <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;图片上传失败！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1 id="商品添加"><a href="#商品添加" class="headerlink" title="商品添加"></a>商品添加</h1><h2 id="mapper映射-1"><a href="#mapper映射-1" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  根据型号查询商品是否存在</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">findProductByNum</span><span class="params">(String productNum)</span>;</span><br><span class="line"><span class="comment">//    商品添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertProduct</span><span class="params">(Product product)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //  根据型号查询商品是否存在--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public Product findProductByNum(String productNum);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findProductByNum&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;product&quot;</span>&gt;</span></span><br><span class="line">    select * from product where product_num=#&#123;productNum&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  //    商品添加--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int insertProduct(Product product);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertProduct&quot;</span>&gt;</span></span><br><span class="line">    insert into product values (</span><br><span class="line">    null, #&#123;storeId&#125;, #&#123;brandId&#125;, #&#123;productName&#125;, #&#123;productNum&#125;,</span><br><span class="line">    #&#123;productInvent&#125;, #&#123;typeId&#125;, #&#123;supplyId&#125;, #&#123;placeId&#125;, #&#123;unitId&#125;,</span><br><span class="line">    #&#123;introduce&#125;, 0, #&#123;inPrice&#125;, #&#123;salePrice&#125;, #&#123;memPrice&#125;, now(),</span><br><span class="line">    null, #&#123;createBy&#125;, null, #&#123;imgs&#125;, #&#123;productDate&#125;, #&#123;suppDate&#125;</span><br><span class="line">    )</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-2"><a href="#service类-2" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加商品</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savaProduct</span><span class="params">(Product product)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Value(&quot;$&#123;file.access-path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String fileAccessPath;</span><br><span class="line">    <span class="comment">//添加商品</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savaProduct</span><span class="params">(Product product)</span> &#123;</span><br><span class="line">        <span class="comment">//        先判断是否存在相同的商品编号</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productByNum</span> <span class="operator">=</span> productMapper.findProductByNum(product.getProductNum());</span><br><span class="line">        <span class="keyword">if</span>(productByNum!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//            已经存在</span></span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;商品已经存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        图片路径拼接一下类路径</span></span><br><span class="line">        product.setImgs(fileAccessPath + product.getImgs());</span><br><span class="line"><span class="comment">//        添加商品</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productMapper.insertProduct(product);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;插入商品成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;商品插入失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-3"><a href="#控制类-3" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtils tokenUtils;</span><br><span class="line"><span class="comment">//    商品添加</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/product-add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addProduct</span><span class="params">(<span class="meta">@RequestBody</span> Product product, <span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line"><span class="comment">//        获取到当前用户的id</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">createUserId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        product.setCreateBy(createUserId);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productService.savaProduct(product);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>商品的上架、删除（单个、批量）跟之前用户是一样的，不再赘述</p>
</blockquote>
<h1 id="商品的修改"><a href="#商品的修改" class="headerlink" title="商品的修改"></a>商品的修改</h1><h2 id="mapper映射-2"><a href="#mapper映射-2" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据商品id修改商品的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateProductById</span><span class="params">(Product product)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //根据商品id修改商品的方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int updateProductById(Product product);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateProductById&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--商品上下架状态、创建时间、创建者字段值不用改--&gt;</span></span><br><span class="line">    update product set store_id = #&#123;storeId&#125;, brand_id = #&#123;brandId&#125;,</span><br><span class="line">    product_name = #&#123;productName&#125;, product_num = #&#123;productNum&#125;,</span><br><span class="line">    product_invent = #&#123;productInvent&#125;, type_id = #&#123;typeId&#125;,</span><br><span class="line">    supply_id = #&#123;supplyId&#125;, place_id = #&#123;placeId&#125;, unit_id = #&#123;unitId&#125;,</span><br><span class="line">    introduce = #&#123;introduce&#125;, in_price = #&#123;inPrice&#125;, sale_price = #&#123;salePrice&#125;,</span><br><span class="line">    mem_price = #&#123;memPrice&#125;, update_time = now(), update_by = #&#123;updateBy&#125;,</span><br><span class="line">    imgs = #&#123;imgs&#125;, product_date = #&#123;productDate&#125;, supp_date = #&#123;suppDate&#125;</span><br><span class="line">    where product_id = #&#123;productId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-3"><a href="#service类-3" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改商品的业务方法</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">updateProduct</span><span class="params">(Product product)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Value(&quot;$&#123;file.access-path&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessPath;</span><br><span class="line">    <span class="comment">//修改商品的业务方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateProduct</span><span class="params">(Product product)</span> &#123;</span><br><span class="line"><span class="comment">//        先判断是否修改了存在的型号（不包括本身自己，如果是本身自己表示没改型号）</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">productByNum</span> <span class="operator">=</span> productMapper.findProductByNum(product.getProductNum());</span><br><span class="line">        <span class="keyword">if</span>(productByNum!=<span class="literal">null</span> &amp;&amp; !productByNum.getProductId().equals(product.getProductId()))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;你修改的型号已存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          处理商品上传的图片的访问地址:</span></span><br><span class="line"><span class="comment">          如果product对象的imgs属性值没有以/img/upload/开始,说明商品的图片</span></span><br><span class="line"><span class="comment">          被修改了即上传了新的图片,那么product对象的imgs属性值只是图片的名称,</span></span><br><span class="line"><span class="comment">          则给图片名称前拼接/img/upload构成商品新上传的图片的访问地址;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(!product.getImgs().startsWith(accessPath))&#123;</span><br><span class="line">            product.setImgs(accessPath+product.getImgs());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据商品id修改商品信息</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productMapper.updateProductById(product);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;商品修改成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;商品修改失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-4"><a href="#控制类-4" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改商品</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/product-update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateProduct</span><span class="params">(<span class="meta">@RequestBody</span> Product product,<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        <span class="comment">//        获取到当前用户的id</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">uptateUserId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        product.setUpdateBy(uptateUserId);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productService.updateProduct(product);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="采购"><a href="#采购" class="headerlink" title="采购"></a>采购</h1><h2 id="mapper映射-3"><a href="#mapper映射-3" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加采购单</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertPurchase</span><span class="params">(Purchase purchase)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //添加采购单--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int insertPurchase(Purchase purchase);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertPurchase&quot;</span>&gt;</span></span><br><span class="line">    insert into buy_list values(</span><br><span class="line">    null, #&#123;productId&#125;, #&#123;storeId&#125;, #&#123;buyNum&#125;, null, now(),</span><br><span class="line">    #&#123;supplyId&#125;, #&#123;placeId&#125;, #&#123;buyUser&#125;, #&#123;phone&#125;, 0</span><br><span class="line">    )</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-4"><a href="#service类-4" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加采购单</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">savePurchase</span><span class="params">(Purchase purchase)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PurchaseMapper purchaseMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    添加采购单</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savePurchase</span><span class="params">(Purchase purchase)</span> &#123;</span><br><span class="line">        purchase.setFactBuyNum(purchase.getBuyNum());</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> purchaseMapper.insertPurchase(purchase);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;采购单添加成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;采购单添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-5"><a href="#控制类-5" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PurchaseService purchaseService;</span><br><span class="line"><span class="comment">//    添加采购单</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/purchase-add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addPurchase</span><span class="params">(<span class="meta">@RequestBody</span> Purchase purchase)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> purchaseService.savePurchase(purchase);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>还有一个出库操作，也是一样的。</p>
<p>其中采购和出库都会跳转到对应的采购管理和出库管理，到里面进行详细的操作之后才会对商品列表中库存的数量造成改变。</p>
</blockquote>
<h1 id="商品分类-添加-删除-修改"><a href="#商品分类-添加-删除-修改" class="headerlink" title="商品分类-添加&#x2F;删除&#x2F;修改"></a>商品分类-添加&#x2F;删除&#x2F;修改</h1><h2 id="mapper映射-4"><a href="#mapper映射-4" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//根据分类编码查询商品分类</span></span><br><span class="line">    <span class="keyword">public</span> ProductType <span class="title function_">findTypeByCode</span><span class="params">(String typeCode)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    添加商品分类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertProductType</span><span class="params">(ProductType productType)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    根据父级id或者子级id删除分类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeProductType</span><span class="params">(Integer typeId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    修改分类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateProductType</span><span class="params">(ProductType productType)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //根据分类编码查询商品分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public ProductType findTypeByCode(String typeCode);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTypeByCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.pn.entity.ProductType&quot;</span>&gt;</span></span><br><span class="line">    select * from product_type where type_code = #&#123;typeCode&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  //    添加商品分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int insertProductType(ProductType productType);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertProductType&quot;</span>&gt;</span></span><br><span class="line">    insert into product_type values(</span><br><span class="line">    null, #&#123;parentId&#125;, #&#123;typeCode&#125;, #&#123;typeName&#125;, #&#123;typeDesc&#125;</span><br><span class="line">    )</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  //    根据父级id或者子级id删除分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int removeProductType(Integer typeId);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;removeProductType&quot;</span>&gt;</span></span><br><span class="line">    delete from product_type where type_id=#&#123;typeId&#125; or parent_id=#&#123;typeId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  //    修改分类--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int updateProductType(ProductType productType);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateProductType&quot;</span>&gt;</span></span><br><span class="line">      update product_type set</span><br><span class="line">      type_name = #&#123;typeName&#125;, type_desc = #&#123;typeDesc&#125;</span><br><span class="line">      where type_id = #&#123;typeId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-5"><a href="#service类-5" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//校验分类编码是否已存在</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryTypeByCode</span><span class="params">(String typeCode)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加商品分类</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveProductType</span><span class="params">(ProductType productType)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     根据父级id或者子级id删除分类</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteType</span><span class="params">(Integer typeId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    修改分类</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setProductType</span><span class="params">(ProductType productType)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//校验分类编码是否已存在</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">queryTypeByCode</span><span class="params">(String typeCode)</span> &#123;</span><br><span class="line">        <span class="comment">//根据分类编码查询商品分类</span></span><br><span class="line">        <span class="type">ProductType</span> <span class="variable">productType</span> <span class="operator">=</span> productTypeMapper.findTypeByCode(typeCode);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(productType==<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加商品分类</span></span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:typeTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveProductType</span><span class="params">(ProductType productType)</span> &#123;</span><br><span class="line">        <span class="comment">//添加商品分类</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productTypeMapper.insertProductType(productType);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;分类添加成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;分类添加失败！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     根据父级id或者子级id删除分类</span></span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:typeTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteType</span><span class="params">(Integer typeId)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productTypeMapper.removeProductType(typeId);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;分类删除成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;分类删除失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    修改分类</span></span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:typeTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setProductType</span><span class="params">(ProductType productType)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> productTypeMapper.updateProductType(productType);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;分类修改成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS, <span class="string">&quot;分类修改失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-6"><a href="#控制类-6" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    校验分类编码是否已存在</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/verify-type-code&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">checkTypeCode</span><span class="params">(String typeCode)</span>&#123;</span><br><span class="line">        <span class="comment">//执行业务</span></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productTypeService.queryTypeByCode(typeCode);</span><br><span class="line">        <span class="comment">//响应</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//添加分类</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/type-add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addProductType</span><span class="params">(<span class="meta">@RequestBody</span> ProductType productType)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productTypeService.saveProductType(productType);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    根据父级id或者子级id删除分类</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/type-delete/&#123;typeId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteType</span><span class="params">(<span class="meta">@PathVariable</span> Integer typeId)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productTypeService.deleteType(typeId);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    修改分类</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/type-update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateType</span><span class="params">(<span class="meta">@RequestBody</span> ProductType productType)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> productTypeService.setProductType(productType);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>项目记录</category>
      </categories>
  </entry>
  <entry>
    <title>动力恒合仓库项目1</title>
    <url>/2024/04/19/warehouse/</url>
    <content><![CDATA[<h1 id="基础后端搭建"><a href="#基础后端搭建" class="headerlink" title="基础后端搭建"></a>基础后端搭建</h1><h2 id="整合mybatis步骤"><a href="#整合mybatis步骤" class="headerlink" title="整合mybatis步骤"></a>整合mybatis步骤</h2><ul>
<li>引入依赖，在pom.xml中引入mysql驱动等</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">warehouse_manager</span></span><br><span class="line"><span class="comment">#这里的路径和端口对应的是前端的VITE_WAREHOUSE_CONTEXT_PATH=http://localhost:9999/warehouse</span></span><br><span class="line"><span class="comment">#项目访问路径</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/warehouse</span></span><br><span class="line"><span class="comment">#访问端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="comment">#mybatis</span></span><br><span class="line"><span class="comment">#数据源</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/db_warehouse?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1114</span></span><br><span class="line"><span class="comment">#sql映射文件位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#实体类所在路径，包中所有实体类的别名默认是首字母小写</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.pn.entity</span></span><br><span class="line"><span class="comment">#开启驼峰</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#开启日志功能</span></span><br><span class="line"><span class="attr">mybatis.configuration-log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment">#redis</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动注解@MapperScan，mapper接口扫描器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.warehouse_manager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">//map接口扫描器</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.pn.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WarehouseManagerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(WarehouseManagerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#redis</span></span><br><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.data.redis.database</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<h2 id="token设置"><a href="#token设置" class="headerlink" title="token设置"></a>token设置</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置token时间,一个小时</span></span><br><span class="line"><span class="attr">warehouse.expire-time</span>=<span class="string">3600</span></span><br></pre></td></tr></table></figure>

<p><img src="/assets/1712918950112.png" alt="71291895011" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>session不适用于分布式微服务集群项目，但是token适用。</p>
<h3 id="方法一：将token和用户信息存放在redis中，实现会话共享"><a href="#方法一：将token和用户信息存放在redis中，实现会话共享" class="headerlink" title="方法一：将token和用户信息存放在redis中，实现会话共享"></a>方法一：将token和用户信息存<strong>放在redis中</strong>，实现会话共享</h3><p><img src="/assets/1712920040752.png" alt="71292004075" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>弊端：需要操作持久层，如果持久层挂了就…</p>
<h3 id="方法二：使用jwt"><a href="#方法二：使用jwt" class="headerlink" title="方法二：使用jwt"></a>方法二：使用jwt</h3><p>json web token，是一个用于通信双方之间传递信息的简洁的、安全的<strong>声明规范</strong>。</p>
<p>可以不用将token存储到数据库中，直接响应给浏览器。可以无需持久化token实现跨域认证。</p>
<blockquote>
<p>jwt是一个含签名并携带用户相关信息的加密串，客户端请求服务端的时候，请求中携带了jwt串到服务端，服务端通过签名加密匹配校验，保证信息未被篡改，校验通过之后将正常返回数据。</p>
</blockquote>
<p><img src="/assets/1712919478391.png" alt="71291947839" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>jwt依赖引入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jwt的依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.18.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="token工具类"><a href="#token工具类" class="headerlink" title="token工具类"></a>token工具类</h3><p>这里将token也存储到了redis里面（做一个备份吧），但是我们是直接使用了jwt解析token信息的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.CurrentUser;</span><br><span class="line"><span class="keyword">import</span> com.pn.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入redis模板</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入配置文件中的warehouse.expire-time属性 -- token的过期时间</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;warehouse.expire-time&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 常量:</span></span><br><span class="line"><span class="comment">     * 生成jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//token中存放用户id对应的名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_NAME_USERID</span> <span class="operator">=</span> <span class="string">&quot;CLAIM_NAME_USERID&quot;</span>;</span><br><span class="line">    <span class="comment">//token中存放用户名对应的名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_NAME_USERCODE</span> <span class="operator">=</span> <span class="string">&quot;CLAIM_NAME_USERCODE&quot;</span>;</span><br><span class="line">    <span class="comment">//token中存放用户真实姓名对应的名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_NAME_USERNAME</span> <span class="operator">=</span> <span class="string">&quot;CLAIM_NAME_USERNAME&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">sign</span><span class="params">(CurrentUser currentUser, String securityKey)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line"><span class="comment">//              给jet载体存放用户信息，注意这里可以不指定头部，头部是固定的</span></span><br><span class="line">                .withClaim(CLAIM_NAME_USERID, currentUser.getUserId())</span><br><span class="line">                .withClaim(CLAIM_NAME_USERCODE, currentUser.getUserCode())</span><br><span class="line">                .withClaim(CLAIM_NAME_USERNAME, currentUser.getUserName())</span><br><span class="line">                .withIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())<span class="comment">//发行时间</span></span><br><span class="line">                .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expireTime *<span class="number">1000</span>))<span class="comment">//有效时间</span></span><br><span class="line"><span class="comment">//                指定签名。传进去的是密码</span></span><br><span class="line">                .sign(Algorithm.HMAC256(securityKey));</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将当前用户信息以用户密码为密钥生成token的方法，然后将其存入redis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">loginSign</span><span class="params">(CurrentUser currentUser, String password)</span>&#123;</span><br><span class="line">        <span class="comment">//生成token，调用上面的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> sign(currentUser, password);</span><br><span class="line">        <span class="comment">//将token保存到redis中,并设置token在redis中的过期时间</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(token, token, expireTime *<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从客户端归还的token中获取用户信息的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> CurrentUser <span class="title function_">getCurrentUser</span><span class="params">(String token)</span> &#123;</span><br><span class="line"><span class="comment">//        token是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(token))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;令牌为空，请登录！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对token进行解码,获取解码后的token</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            decodedJWT = JWT.decode(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;令牌格式错误，请登录！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从解码后的token中获取用户信息并封装到CurrentUser对象中返回</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> decodedJWT.getClaim(CLAIM_NAME_USERID).asInt();<span class="comment">//用户账号id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userCode</span> <span class="operator">=</span> decodedJWT.getClaim(CLAIM_NAME_USERCODE).asString();<span class="comment">//用户账号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> decodedJWT.getClaim(CLAIM_NAME_USERNAME).asString();<span class="comment">//用户姓名</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(userCode) || StringUtils.isEmpty(userName))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;令牌缺失用户信息，请登录！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(userId, userCode, userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图片上传地址"><a href="#图片上传地址" class="headerlink" title="图片上传地址"></a>图片上传地址</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#图片上传地址</span></span><br><span class="line"><span class="attr">file.upload-path</span>=<span class="string">classpath:static/img/upload</span></span><br><span class="line"><span class="comment">#保存到数据库的地址路径</span></span><br><span class="line"><span class="attr">file.access-path</span>=<span class="string">/img/upload/</span></span><br></pre></td></tr></table></figure>

<h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--验证码工具kaptcha的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="验证码设置"><a href="#验证码设置" class="headerlink" title="验证码设置"></a>验证码设置</h3><p>在config配置类中创建java文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码工具kaptcha的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Producer接口的实现类DefaultKaptcha的bean对象,该对象用于生成验证码图片;</span></span><br><span class="line"><span class="comment">     * 并给其指定生成的验证码图片的设置项;bean对象的id引用名为captchaProducer;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;captchaProducer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">getKaptchaBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border&quot;</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="comment">//边框颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border.color&quot;</span>, <span class="string">&quot;105,179,90&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码图片宽度 默认为200</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;120&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码图片高度 默认为50</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;40&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符大小 默认为40</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="string">&quot;32&quot;</span>);</span><br><span class="line">        <span class="comment">//KAPTCHA_SESSION_KEY</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.session.key&quot;</span>, <span class="string">&quot;kaptchaCode&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符间距 默认为2</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.space&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符长度 默认为5</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.names&quot;</span>, <span class="string">&quot;Arial,Courier&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码噪点颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.noise.color&quot;</span>, <span class="string">&quot;gray&quot;</span>);</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="验证码的一些配置"><a href="#验证码的一些配置" class="headerlink" title="验证码的一些配置"></a>验证码的一些配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.impl.DefaultKaptcha;</span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.util.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码工具kaptcha的配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CaptchaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置Producer接口的实现类DefaultKaptcha的bean对象,该对象用于生成验证码图片;</span></span><br><span class="line"><span class="comment">     * 并给其指定生成的验证码图片的设置项;bean对象的id引用名为captchaProducer;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;captchaProducer&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultKaptcha <span class="title function_">getKaptchaBean</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultKaptcha</span> <span class="variable">defaultKaptcha</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultKaptcha</span>();</span><br><span class="line"><span class="comment">//验证码的各种属性</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//是否有边框 默认为true 我们可以自己设置yes，no</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border&quot;</span>, <span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="comment">//边框颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.border.color&quot;</span>, <span class="string">&quot;105,179,90&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.color&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码图片宽度 默认为200</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.width&quot;</span>, <span class="string">&quot;120&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码图片高度 默认为50</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.image.height&quot;</span>, <span class="string">&quot;40&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符大小 默认为40</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.size&quot;</span>, <span class="string">&quot;32&quot;</span>);</span><br><span class="line">        <span class="comment">//KAPTCHA_SESSION_KEY</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.session.key&quot;</span>, <span class="string">&quot;kaptchaCode&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符间距 默认为2</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.space&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字符长度 默认为5</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.char.length&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码文本字体样式 默认为new Font(&quot;Arial&quot;, 1, fontSize), new Font(&quot;Courier&quot;, 1, fontSize)</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.textproducer.font.names&quot;</span>, <span class="string">&quot;Arial,Courier&quot;</span>);</span><br><span class="line">        <span class="comment">//验证码噪点颜色 默认为Color.BLACK</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;kaptcha.noise.color&quot;</span>, <span class="string">&quot;gray&quot;</span>);</span><br><span class="line"><span class="comment">//把属性集对象封装给cofig</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>(properties);</span><br><span class="line">        defaultKaptcha.setConfig(config);</span><br><span class="line">        <span class="keyword">return</span> defaultKaptcha;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="应用到前端"><a href="#应用到前端" class="headerlink" title="应用到前端"></a>应用到前端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.code.kaptcha.Producer;</span><br><span class="line"><span class="keyword">import</span> jakarta.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"><span class="comment">////    注入</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">////    要注意不是实现类的类型，而是接口类型</span></span><br><span class="line"><span class="comment">//    private Producer producer;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//        第二种方式</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;captchaProducer&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Producer producer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/captcha/captchaImage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">captchaImage</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//        生成图片文字</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> producer.createText();</span><br><span class="line"><span class="comment">//        生成图</span></span><br><span class="line">            <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> producer.createImage(text);</span><br><span class="line">            System.out.println(text);</span><br><span class="line"><span class="comment">//        保存到redis</span></span><br><span class="line">            redisTemplate.opsForValue().set(text, <span class="string">&quot;&quot;</span>, <span class="number">60</span> * <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">//            传入浏览器</span></span><br><span class="line">            response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">            outputStream = response.getOutputStream();</span><br><span class="line">            ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, outputStream);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    outputStream.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>import jakarta.servlet.ServletOutputStream;<br>import jakarta.servlet.http.HttpServletResponse;</p>
<p>这两个原先是java.servlet，会报错！我用的是springboot3，查找资料得知：</p>
<p>SpringBoot3已经不支持javax.servlet包里的HttpSession了，<strong>如果需要使用该类的话，需要导入jakarta.servlet包里的HttpSession</strong>。</p>
</blockquote>
<h2 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h2><p>加密工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密工具类 -- 提供了MD5加密算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DigestUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">encodingCharset</span> <span class="operator">=</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对参数数据进行MD5加密的算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hmacSign</span><span class="params">(String aValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hmacSign(aValue, <span class="string">&quot;warehouse&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">hmacSign</span><span class="params">(String aValue, String aKey)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> k_ipad[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="type">byte</span> k_opad[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">64</span>];</span><br><span class="line">        <span class="type">byte</span> keyb[];</span><br><span class="line">        <span class="type">byte</span> value[];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            keyb = aKey.getBytes(encodingCharset);</span><br><span class="line">            value = aValue.getBytes(encodingCharset);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            keyb = aKey.getBytes();</span><br><span class="line">            value = aValue.getBytes();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.fill(k_ipad, keyb.length, <span class="number">64</span>, (<span class="type">byte</span>) <span class="number">54</span>);</span><br><span class="line">        Arrays.fill(k_opad, keyb.length, <span class="number">64</span>, (<span class="type">byte</span>) <span class="number">92</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; keyb.length; i++) &#123;</span><br><span class="line">            k_ipad[i] = (<span class="type">byte</span>) (keyb[i] ^ <span class="number">0x36</span>);</span><br><span class="line">            k_opad[i] = (<span class="type">byte</span>) (keyb[i] ^ <span class="number">0x5c</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        md.update(k_ipad);</span><br><span class="line">        md.update(value);</span><br><span class="line">        <span class="type">byte</span> dg[] = md.digest();</span><br><span class="line">        md.reset();</span><br><span class="line">        md.update(k_opad);</span><br><span class="line">        md.update(dg, <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">        dg = md.digest();</span><br><span class="line">        <span class="keyword">return</span> toHex(dg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHex</span><span class="params">(<span class="type">byte</span> input[])</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(input.length * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> input[i] &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span> (current &lt; <span class="number">16</span>)</span><br><span class="line">                output.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            output.append(Integer.toString(current, <span class="number">16</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="响应结果封装类"><a href="#响应结果封装类" class="headerlink" title="响应结果封装类"></a>响应结果封装类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应结果封装类:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码常量:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_OK</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">//业务错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_ERR_BUSINESS</span> <span class="operator">=</span> <span class="number">501</span>;</span><br><span class="line">    <span class="comment">//用户未登录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_ERR_UNLOGINED</span> <span class="operator">=</span> <span class="number">502</span>;</span><br><span class="line">    <span class="comment">//系统错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_ERR_SYS</span> <span class="operator">=</span> <span class="number">503</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;<span class="comment">//状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> success;<span class="comment">//成功响应为true,失败响应为false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;<span class="comment">//响应信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;<span class="comment">//响应数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功响应的方法 -- 返回的Result中只封装了成功状态码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_OK,<span class="literal">true</span>,<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功响应的方法 -- 返回的Result中封装了成功状态码和响应信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_OK,<span class="literal">true</span>,message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功响应的方法 -- 返回的Result中封装了成功状态码和响应数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_OK,<span class="literal">true</span>,<span class="literal">null</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成功响应的方法 -- 返回的Result中封装了成功状态码和响应信息和响应数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(String message, Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_OK,<span class="literal">true</span>,message, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应的方法 -- 返回的Result中封装了失败状态码和响应信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">err</span><span class="params">(<span class="type">int</span> errCode, String message)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(errCode,<span class="literal">false</span>, message, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应的方法 -- 返回的Result中封装了失败状态码和响应信息和响应数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">err</span><span class="params">(<span class="type">int</span> errCode,String message,Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(errCode,<span class="literal">false</span>,message, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完整的pom-xml文件"><a href="#完整的pom-xml文件" class="headerlink" title="完整的pom.xml文件"></a>完整的pom.xml文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.pn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>warehouse_manager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>warehouse_manager<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;3.5.5&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash; 先排除mybatis-plus和spring整合的一个类 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;exclusions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;/exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/exclusions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;version&gt;3.0.3&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--redis的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--fastjson的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.79<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--JSR-303的依赖(数据校验)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.2.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--验证码工具kaptcha的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--pinyin4j的依赖(将汉字转成拼音的工具)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.belerweb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pinyin4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--commons-lang工具包(提供了很多工具类)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--jwt的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.18.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="完整的properties"><a href="#完整的properties" class="headerlink" title="完整的properties"></a>完整的properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#spring.application.name=warehouse_manager</span></span><br><span class="line"><span class="comment">#这里的路径和端口对应的是前端的VITE_WAREHOUSE_CONTEXT_PATH=http://localhost:9999/warehouse</span></span><br><span class="line"><span class="comment">#项目访问路径</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/warehouse</span></span><br><span class="line"><span class="comment">#访问端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="comment">#mybatis</span></span><br><span class="line"><span class="comment">#数据源</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/db_warehouse?serverTimezone=UTC</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1114</span></span><br><span class="line"><span class="comment">#sql映射文件位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#实体类所在路径，包中所有实体类的别名默认是首字母小写</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.pn.entity</span></span><br><span class="line"><span class="comment">#开启驼峰</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#开启日志功能</span></span><br><span class="line"><span class="attr">mybatis.configuration-log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment">#redis</span></span><br><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="attr">spring.data.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#设置token时间,一小时</span></span><br><span class="line"><span class="attr">warehouse.expire-time</span>=<span class="string">3600</span></span><br><span class="line"><span class="comment">#图片上传地址</span></span><br><span class="line"><span class="attr">file.upload-path</span>=<span class="string">classpath:static/img/upload</span></span><br><span class="line"><span class="comment">#保存到数据库的地址路径</span></span><br><span class="line"><span class="attr">file.access-path</span>=<span class="string">/img/upload/</span></span><br></pre></td></tr></table></figure>

<h1 id="用户登录验证"><a href="#用户登录验证" class="headerlink" title="用户登录验证"></a>用户登录验证</h1><h2 id="mapper映射"><a href="#mapper映射" class="headerlink" title="mapper映射"></a>mapper映射</h2><p>user_info表的mapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//user——info表的mapper接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"><span class="comment">//    根据账号查询用户信息</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findUserByCode</span><span class="params">(String userCode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    根据账号查询用户信息</span></span><br><span class="line"><span class="comment">    public User findUserByCode(String userCode);</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from user_info where user_code=#&#123;userCode&#125; and is_delete=0</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类"><a href="#service类" class="headerlink" title="service类"></a>service类</h2><p>定义接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//user_info表的servic接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="comment">//    根据账号查询用户的业务方法</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserBycode</span><span class="params">(String usercode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现服务接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.impl.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//注入Usermapper</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserBycode</span><span class="params">(String usercode)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUserByCode(usercode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"><span class="comment">//注入UserService,是用于根据用户信息查询</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"><span class="comment">//    注入token</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtils tokenUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">//点击登录按钮之后的请求</span></span><br><span class="line"><span class="comment">//    @RequestBody LoginUser loginUser接收前端传递登录的用户信息的json数据，其中，@RequestBody注解用于将HTTP请求的内容（例如JSON或XML数据）绑定到方法的参数上。</span></span><br><span class="line"><span class="comment">//    这里返回的是响应结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginUser loginUser)</span>&#123;</span><br><span class="line"><span class="comment">//        先校验验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">verificationCode</span> <span class="operator">=</span> loginUser.getVerificationCode();</span><br><span class="line">        <span class="keyword">if</span>(!(redisTemplate.hasKey(verificationCode)))&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;验证码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        loginUser的格式如下：</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//   userCode:&quot;admin&quot;</span></span><br><span class="line"><span class="comment">//   userPwd:&quot;123456&quot;</span></span><br><span class="line"><span class="comment">//   verificationCode:&quot;xax4&quot;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//        先根据账号查询用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserBycode(loginUser.getUserCode());</span><br><span class="line"><span class="comment">//        账号存在</span></span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//         是是否审核</span></span><br><span class="line">            <span class="keyword">if</span>(user.getUserState().equals(WarehouseConstants.USER_STATE_PASS))&#123;</span><br><span class="line"><span class="comment">//             拿到从浏览器传入的密码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userPwd</span> <span class="operator">=</span> loginUser.getUserPwd();</span><br><span class="line"><span class="comment">//                进行md5加密</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> DigestUtil.hmacSign(userPwd);</span><br><span class="line"><span class="comment">//                判断密码是否正确</span></span><br><span class="line">                <span class="keyword">if</span>(s.equals(user.getUserPwd()))&#123;</span><br><span class="line"><span class="comment">//                    密码正确！重点！！</span></span><br><span class="line"><span class="comment">//                    需要状态码成功并且还要生成token,并且存储到了redis</span></span><br><span class="line">                    <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CurrentUser</span>(user.getUserId(),user.getUserCode(),user.getUserName());</span><br><span class="line">                    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> tokenUtils.loginSign(currentUser, userPwd);</span><br><span class="line">                    <span class="comment">//                    将这个token也响应到了前端</span></span><br><span class="line">                    <span class="keyword">return</span> Result.ok(<span class="string">&quot;登录成功！&quot;</span>,token);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;账号未审核！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        不存在</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;账号不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里有一个bug就是，验证码的有效时间是3600s，也就是一个小时。上次得到的验证码只要不超过一个小时，我再输入（即便跟浏览器上显示的验证码图上的不一样），也是可以通过的。</p>
</blockquote>
<h1 id="用户登录限制"><a href="#用户登录限制" class="headerlink" title="用户登录限制"></a>用户登录限制</h1><h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.pn.utils.WarehouseConstants;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.*;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的登录过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogimCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRedisTemplate</span><span class="params">(StringRedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) resp;</span><br><span class="line"><span class="comment">//      用于存放不需要过滤的路径</span></span><br><span class="line">        List&lt;String&gt; urlList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        urlList.add(<span class="string">&quot;/captcha/captchaImage&quot;</span>);</span><br><span class="line">        urlList.add(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"><span class="comment">//      获取到当前访问的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">servletPath</span> <span class="operator">=</span> request.getServletPath();</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span>(urlList.contains(servletPath))&#123;</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//      其他请求是否携带token，判断redis是否存在</span></span><br><span class="line"><span class="comment">//        拿到请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(WarehouseConstants.HEADER_TOKEN_NAME);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.hasText(token)&amp;&amp;redisTemplate.hasKey(token))&#123;</span><br><span class="line">            filterChain.doFilter(request,response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">err</span> <span class="operator">=</span> Result.err(Result.CODE_ERR_UNLOGINED, <span class="string">&quot;你尚未登录！&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSON.toJSONString(err);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.write(jsonStr);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="写配置类"><a href="#写配置类" class="headerlink" title="写配置类"></a>写配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.filter.LogimCheckFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"><span class="comment">//    注册原生servlet过滤器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">//        创建bean</span></span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">filterRegistrationBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"><span class="comment">//        new自定义过滤器,这个再filter文件下写好了</span></span><br><span class="line">        <span class="type">LogimCheckFilter</span> <span class="variable">logimCheckFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LogimCheckFilter</span>();</span><br><span class="line"><span class="comment">//        手动注入redis模板</span></span><br><span class="line">        logimCheckFilter.setRedisTemplate(redisTemplate);</span><br><span class="line"><span class="comment">//        注册进去</span></span><br><span class="line">        filterRegistrationBean.setFilter(logimCheckFilter);</span><br><span class="line"><span class="comment">//        指定范围</span></span><br><span class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="登录之后页面显示该用户名"><a href="#登录之后页面显示该用户名" class="headerlink" title="登录之后页面显示该用户名"></a>登录之后页面显示该用户名</h1><blockquote>
<p>用户名在我们的token中是有的，所以在上面的token工具类中我们是可以将token进行解析，然后获得该用户的信息。其中信息也包括了用户名！</p>
</blockquote>
<p>直接写控制类就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前用户信息的url接口</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/curr-user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">currentUser</span><span class="params">(<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===来来========&quot;</span>);</span><br><span class="line"><span class="comment">//        解析token</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(currentUser);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="登录页面之后加载菜单树"><a href="#登录页面之后加载菜单树" class="headerlink" title="登录页面之后加载菜单树"></a>登录页面之后加载菜单树</h1><blockquote>
<p>因为不同角色所能够使用的权限是不同的，所以其对应的菜单树也是不一样的</p>
<p>使用redis进行缓存，先从redis查看，如果没有再去数据库中找，找到后再存入redis中</p>
</blockquote>
<p>涉及到五种表：</p>
<p>①用户表②角色表③菜单表④用户与角色的中间表⑤角色与菜单的中间表</p>
<h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Auth</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer authId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 父id为空或为0，表示一级权限</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> Integer parentId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String authName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String authDesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer authGrade;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1 模块 、2  列表、 3  按钮</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String authType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String authUrl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String authCode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer authOrder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1 启用 、0 禁用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String authState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"><span class="comment">//追加属性,存放当前用户的菜单下的子级菜单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Auth&gt; childAuth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper映射-1"><a href="#mapper映射-1" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Auth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthMapper</span> &#123;</span><br><span class="line"><span class="comment">//    根据userid查询用户权限下的所有菜单</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">findAuthByUid</span><span class="params">(Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.AuthMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  根据userid查出权限菜单--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAuthByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;auth&quot;</span>&gt;</span></span><br><span class="line">    select t3.*</span><br><span class="line">    from user_role t1,role_auth t2,auth_info t3</span><br><span class="line">    where t1.role_id=t2.role_id and t2.auth_id=t3.auth_id</span><br><span class="line">    and t3.auth_state=1 and t3.auth_type!=3</span><br><span class="line">    and t1.user_id=#&#123;userId&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-1"><a href="#service类-1" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">//user_info表的servic接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="comment">//    根据账号查询用户的业务方法</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserBycode</span><span class="params">(String usercode)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Auth;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.AuthMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.AuthService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthMapper authMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">authTreeByuid</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line"><span class="comment">//        先从redis中查缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">authTreeJson</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;authTree:&quot;</span> + userId);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(authTreeJson)) &#123;</span><br><span class="line"><span class="comment">//            json转List&lt;Auth&gt;</span></span><br><span class="line">            List&lt;Auth&gt; authTreeList = JSON.parseArray(authTreeJson, Auth.class);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> authTreeList;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Auth&gt; allAuthList = authMapper.findAuthByUid(userId);</span><br><span class="line">        List&lt;Auth&gt; authTreeList = allAuthToAuthTree(allAuthList, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//        在redis中缓存</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;authTree:&quot;</span>+userId,JSON.toJSONString(authTreeList));</span><br><span class="line">        <span class="keyword">return</span> authTreeList;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将所有权限(菜单)转成权限(菜单)树的递归算法</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Auth&gt; <span class="title function_">allAuthToAuthTree</span><span class="params">(List&lt;Auth&gt; allAuthList, Integer pid)</span> &#123;</span><br><span class="line">        <span class="comment">//获取父权限(菜单)id为参数parentId的所有权限(菜单)</span></span><br><span class="line">        <span class="comment">//【parentId最初为0,即最初查的是所有一级权限(菜单)】</span></span><br><span class="line">        List&lt;Auth&gt; authList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Auth auth : allAuthList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (auth.getParentId().equals(pid)) &#123;</span><br><span class="line">                authList.add(auth);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询List&lt;Auth&gt; authList中每个权限(菜单)的所有子级权限(菜单)</span></span><br><span class="line">        <span class="keyword">for</span> (Auth auth : authList) &#123;</span><br><span class="line">            List&lt;Auth&gt; childAuthList = allAuthToAuthTree(allAuthList, auth.getAuthId());</span><br><span class="line">            auth.setChildAuth(childAuthList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> authList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-1"><a href="#控制类-1" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthService authService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/auth-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">loadAuthTree</span><span class="params">(<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line"><span class="comment">//        从token中拿到userid</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        List&lt;Auth&gt; authTreeList = authService.authTreeByuid(userId);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(authTreeList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h1><blockquote>
<p>退出登录就是从redis中删除当前登录token的键就可以了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">logout</span><span class="params">(<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        redisTemplate.delete(token);</span><br><span class="line"><span class="comment">//        响应</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;退出系统&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="分页查看用户列表"><a href="#分页查看用户列表" class="headerlink" title="分页查看用户列表"></a>分页查看用户列表</h1><h2 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * user_info表的实体类:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> userId;<span class="comment">//用户id</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userCode;<span class="comment">//账号</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userName;<span class="comment">//用户名</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userPwd;<span class="comment">//用户密码</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userType;<span class="comment">//用户类型</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String userState;<span class="comment">//用户状态</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String isDelete;<span class="comment">//删除状态</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> createBy;<span class="comment">//创建人</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//返回前端时,自动将Date转换成指定格式的json字符串</span></span><br><span class="line">	<span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> updateBy;<span class="comment">//修改人</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> Date updateTime;<span class="comment">//修改时间</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String getCode;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> userId, String userCode, String userName, String userPwd,</span></span><br><span class="line"><span class="params">			String userType, String userState, String isDelete, <span class="type">int</span> createBy,</span></span><br><span class="line"><span class="params">			Date createTime, <span class="type">int</span> updateBy, Date updateTime)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.userId = userId;</span><br><span class="line">		<span class="built_in">this</span>.userCode = userCode;</span><br><span class="line">		<span class="built_in">this</span>.userName = userName;</span><br><span class="line">		<span class="built_in">this</span>.userPwd = userPwd;</span><br><span class="line">		<span class="built_in">this</span>.userType = userType;</span><br><span class="line">		<span class="built_in">this</span>.userState = userState;</span><br><span class="line">		<span class="built_in">this</span>.isDelete = isDelete;</span><br><span class="line">		<span class="built_in">this</span>.createBy = createBy;</span><br><span class="line">		<span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">		<span class="built_in">this</span>.updateBy = updateBy;</span><br><span class="line">		<span class="built_in">this</span>.updateTime = updateTime;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页信息实体类:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Page</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前页码</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每页显示行数</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总行数</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//总页数</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//limit函数参数一每页起始行</span></span><br><span class="line">    <span class="keyword">private</span> Integer limitIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储当前页查询到的数据的List&lt;?&gt;集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; resultList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算总页数</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getPageCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalNum%pageSize==<span class="number">0</span> ? totalNum/pageSize : totalNum/pageSize+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算limit函数参数一每页起始行</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getLimitIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize * (pageNum-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="mapper映射-2"><a href="#mapper映射-2" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询用户行数</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">findRowCount</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">//    分页查询用户方法</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findUserByPage</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span>Page page,<span class="meta">@Param(&quot;user&quot;)</span> User user)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        查询用户行数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public Integer findRowCount(User user);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findRowCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">        select count(*) from user_info</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userCode!=null and userCode != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and user_code like concat(&#x27;%&#x27;,#&#123;userCode&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userType!=null and userType != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and user_Type =#&#123;userType&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userState!=null and userState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and user_State =#&#123;userState&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            and is_delete=0</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        分页查询用户方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public List&lt;User&gt; findUserByPage(@Param(&quot;page&quot;)Page page,@Param(&quot;user&quot;) User user);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select t1.*,t2.user_code getCode</span><br><span class="line">        from user_info t1,user_info t2</span><br><span class="line">        where t1.create_by =t2.user_id and t1.is_delete=0</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user.userCode!=null and user.userCode != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and t1.user_code like concat(&#x27;%&#x27;,#&#123;user.userCode&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user.userType!=null and user.userType != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and t1.user_Type =#&#123;user.userType&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;user.userState!=null and user.userState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            and t1.user_State =#&#123;user.userState&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        order by t1.create_time desc</span><br><span class="line">        limit #&#123;page.limitIndex&#125;,#&#123;page.pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-2"><a href="#service类-2" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分页查询用户</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryUserPage</span><span class="params">(Page page,User user)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryUserPage</span><span class="params">(Page page, User user)</span> &#123;</span><br><span class="line"><span class="comment">//        查询用户行数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rowCount</span> <span class="operator">=</span> userMapper.findRowCount(user);</span><br><span class="line"><span class="comment">//        分页查询所有信息</span></span><br><span class="line">        List&lt;User&gt; userByPage = userMapper.findUserByPage(page, user);</span><br><span class="line">        page.setTotalNum(rowCount);</span><br><span class="line">        page.setResultList(userByPage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-2"><a href="#控制类-2" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.pn.page.Page;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">userList</span><span class="params">(Page page, User user)</span>&#123;</span><br><span class="line">        page = userService.queryUserPage(page, user);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h1><h2 id="mapper映射-3"><a href="#mapper映射-3" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    添加用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        添加用户--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int insertUser(User user);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span>&gt;</span></span><br><span class="line">        insert into user_info  values(</span><br><span class="line">            null,#&#123;userCode&#125;,#&#123;userName&#125;,#&#123;userPwd&#125;,null,0,0,#&#123;createBy&#125;,now(),null,null</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-3"><a href="#service类-3" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    添加用户</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveUser</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">saveUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="comment">//        添加先对账号判断是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> userMapper.findUserByCode(user.getUserCode());</span><br><span class="line">        <span class="keyword">if</span> (u!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;用户已存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        将密码做加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> DigestUtil.hmacSign(user.getUserPwd());</span><br><span class="line">        user.setUserPwd(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.insertUser(user);</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;用户添加成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-3"><a href="#控制类-3" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtils tokenUtils;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user, <span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span>String token)</span>&#123;</span><br><span class="line"><span class="comment">//      拿到当前的用户id</span></span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        user.setCreateBy(userId);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.saveUser(user);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="启动-禁用用户"><a href="#启动-禁用用户" class="headerlink" title="启动&#x2F;禁用用户"></a>启动&#x2F;禁用用户</h1><h2 id="mapper映射-4"><a href="#mapper映射-4" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    启动/禁用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateUserState</span><span class="params">(Integer userId,String userState)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        启动/禁用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int updateUserState(Integer userId,String userState);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserState&quot;</span>&gt;</span></span><br><span class="line">        update user_info set user_state=#&#123;param2&#125; where user_id=#&#123;param1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-4"><a href="#service类-4" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    启动/禁用</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateUserState</span><span class="params">(Integer userId,String userState)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动或禁用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateUserState</span><span class="params">(Integer userId, String userState)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateUserState(userId, userState);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-4"><a href="#控制类-4" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/updateState&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateUserState</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.updateUserState(user.getUserId(), user.getUserState());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="分配角色"><a href="#分配角色" class="headerlink" title="分配角色"></a>分配角色</h1><h2 id="查询所有用户的角色"><a href="#查询所有用户的角色" class="headerlink" title="查询所有用户的角色"></a>查询所有用户的角色</h2><blockquote>
<p>我们使用注解版的方式将角色存入redis</p>
</blockquote>
<h3 id="在启动类添加"><a href="#在启动类添加" class="headerlink" title="在启动类添加"></a>在启动类添加</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启redis注解版缓存</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="comment">//map接口扫描器</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.pn.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WarehouseManagerApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(WarehouseManagerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="role实体类"><a href="#role实体类" class="headerlink" title="role实体类"></a>role实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//implements Serializable 将 Role 对象正确地序列化，并将其存储到 Redis 缓存中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1 启用 0 禁用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String roleState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer createBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mapper映射-5"><a href="#mapper映射-5" class="headerlink" title="mapper映射"></a>mapper映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> &#123;</span><br><span class="line"><span class="comment">//    查询所有用户的角色</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findAllRole</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.RoleMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      查询所有用户的角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public List&lt;Role&gt; findAllRole();--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllRole&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">    select * from role where role_state=1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service类-5"><a href="#service类-5" class="headerlink" title="service类"></a>service类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleService</span>&#123;</span><br><span class="line"><span class="comment">//    查询所有用户角色</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">queryAllRoleo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Role;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CacheConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.mapper.RoleMapper;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.RoleService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@CacheConfig(cacheNames = &quot;com.pn.service.impl.RoleServiceImpl&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RoleService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleMapper roleMapper;</span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;&#x27;all:role&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">queryAllRoleo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roleMapper.findAllRole();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制类-5"><a href="#控制类-5" class="headerlink" title="控制类"></a>控制类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Role;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.RoleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/role&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line"><span class="comment">//    查询所有用户的角色</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">roleList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Role&gt; roles = roleService.queryAllRoleo();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(roles);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询某个用户id所拥有的角色"><a href="#查询某个用户id所拥有的角色" class="headerlink" title="查询某个用户id所拥有的角色"></a>查询某个用户id所拥有的角色</h2><h3 id="mapper映射-6"><a href="#mapper映射-6" class="headerlink" title="mapper映射"></a>mapper映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据用户id查到角色列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findUserRoleByUid</span><span class="params">(Integer UserId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    根据用户id查到角色列表--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        public List&lt;Role&gt; findUserRoleByUid(Integer UserId);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserRoleByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">  select t2.* from user_role t1,role t2</span><br><span class="line">  where t1.role_id=t2.role_id</span><br><span class="line">  and t1.user_id=#&#123;userId&#125;</span><br><span class="line">  and t2.role_state=1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service类-6"><a href="#service类-6" class="headerlink" title="service类"></a>service类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据用户id查到角色列表</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">queryUserRoleByUid</span><span class="params">(Integer UserId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<blockquote>
<p>用户角色经常会变 所以不需要加入缓存中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">queryUserRoleByUid</span><span class="params">(Integer UserId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> roleMapper.findUserRoleByUid(UserId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制类-6"><a href="#控制类-6" class="headerlink" title="控制类"></a>控制类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RoleService roleService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    查询某个用户的角色</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user-role-list/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">userRoleList</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId)</span> &#123;</span><br><span class="line">    List&lt;Role&gt; userRoles = roleService.queryUserRoleByUid(userId);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(userRoles);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分配角色-1"><a href="#分配角色-1" class="headerlink" title="分配角色"></a>分配角色</h2><h3 id="实体类-2"><a href="#实体类-2" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssignRoleDto</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; roleCheckList;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mapper映射-7"><a href="#mapper映射-7" class="headerlink" title="mapper映射"></a>mapper映射</h3><ul>
<li>根据用户id删除该用户的角色</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分配之前应该先将该用户原有的角色进行删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUserRoleByUid</span><span class="params">(Integer userId)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    分配之前应该先将该用户原有的角色进行删除--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int deleteUserRoleByUid(Integer userId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserRoleByUid&quot;</span>&gt;</span></span><br><span class="line">        delete from user_role where user_id=#&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>根据角色名字查找角色id</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据角色名来查询其对应的id</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">findRoleIdByName</span><span class="params">(String roleNmae)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //    根据角色名来查询其对应的id--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public Integer findRoleIdByName(String roleNmae);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findRoleIdByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">    select role_id from role where role_name=#&#123;roleNmae&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>分配</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据用户的id，角色id，给用户分配角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">assignUserRole</span><span class="params">(UserRole userRole)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    根据用户的id，角色id，给用户分配角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int assignUserRole(UserRole userRole);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;assignUserRole&quot;</span>&gt;</span></span><br><span class="line">         insert into user_role values(null,#&#123;roleId&#125;,#&#123;userId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service类-7"><a href="#service类-7" class="headerlink" title="service类"></a>service类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分配角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assufbRole</span><span class="params">(AssignRoleDto assignRoleDto)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleMapper roleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRoleMapper userRoleMapper;</span><br><span class="line"><span class="comment">//    要加上事务处理</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assufbRole</span><span class="params">(AssignRoleDto assignRoleDto)</span> &#123;</span><br><span class="line"><span class="comment">//        首先先进行该用户角色的删除</span></span><br><span class="line">        userRoleMapper.deleteUserRoleByUid(assignRoleDto.getUserId());</span><br><span class="line">            List&lt;String&gt; roleNameList = assignRoleDto.getRoleCheckList();</span><br><span class="line">            <span class="keyword">for</span> (String roleNmae : roleNameList) &#123;</span><br><span class="line"><span class="comment">//                循环取出该角色的id</span></span><br><span class="line">                <span class="type">Integer</span> <span class="variable">roleId</span> <span class="operator">=</span> roleMapper.findRoleIdByName(roleNmae);</span><br><span class="line"><span class="comment">//                创建一个UserRole，存入两个id后进行添加</span></span><br><span class="line">                <span class="type">UserRole</span> <span class="variable">userRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserRole</span>();</span><br><span class="line">                userRole.setRoleId(roleId);</span><br><span class="line">                userRole.setUserId(assignRoleDto.getUserId());</span><br><span class="line"><span class="comment">//              添加</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> userRoleMapper.assignUserRole(userRole);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="控制类-7"><a href="#控制类-7" class="headerlink" title="控制类"></a>控制类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    给用户分配角色</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/assignRole&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">assignUserRole</span><span class="params">(<span class="meta">@RequestBody</span> AssignRoleDto assignRoleDto)</span>&#123;</span><br><span class="line">        userService.assufbRole(assignRoleDto);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;成功分配&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h1><h2 id="mapper映射-8"><a href="#mapper映射-8" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setIsDeleteByUids</span><span class="params">(List&lt;Integer&gt; userIdList)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    删除用户--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int setIsDeleteByUids(List&lt;Integer&gt; userIdList);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;setIsDeleteByUids&quot;</span>&gt;</span></span><br><span class="line">        update user_info set is_delete=1 where user_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;userId&quot;</span>&gt;</span></span><br><span class="line">            #&#123;userId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-8"><a href="#service类-8" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">deleteUserByUids</span><span class="params">(List&lt;Integer&gt; userIdList)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.setIsDeleteByUids(userIdList);</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;用户删除成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;用户删除失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-8"><a href="#控制类-8" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除用户(单个)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteUser/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.deleteUserByUids(Arrays.asList(userId));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    删除用户（多个）</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/deleteUserList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteUserByIds</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Integer&gt; userIdList)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.deleteUserByUids(userIdList);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改用户昵称和重置密码"><a href="#修改用户昵称和重置密码" class="headerlink" title="修改用户昵称和重置密码"></a>修改用户昵称和重置密码</h1><h2 id="mapper映射-9"><a href="#mapper映射-9" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据id修改用户名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setUserNameById</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">//    重置密码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setPwdById</span><span class="params">(Integer userId,String password)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    根据id修改用户名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int SetUserNameById(User user);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;setUserNameById&quot;</span>&gt;</span></span><br><span class="line">        update user_info</span><br><span class="line">        set</span><br><span class="line">        user_name=#&#123;userName&#125;,update_by=#&#123;updateBy&#125;,update_time=now()</span><br><span class="line">        where user_id=#&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    //    重置密码--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int setPwdById(Integer userId,String password);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;setPwdById&quot;</span>&gt;</span></span><br><span class="line">        update user_info set user_pwd=#&#123;param2&#125; where user_id=#&#123;param1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-9"><a href="#service类-9" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据用户id修改用户名</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserById</span><span class="params">(User user)</span>;</span><br><span class="line"><span class="comment">//    重置密码</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserPedById</span><span class="params">(Integer userId)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//    修改用户名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserById</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.setUserNameById(user);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;用户修改成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;用户修改失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    重置密码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserPedById</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line"><span class="comment">//加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pwd</span> <span class="operator">=</span> DigestUtil.hmacSign(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.setPwdById(userId, pwd);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;密码重置成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;密码重置失败&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-9"><a href="#控制类-9" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改用户名（根据id）</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserNameById</span><span class="params">(<span class="meta">@RequestBody</span> User user,<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">userId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        user.setUpdateBy(userId);</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.setUserById(user);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    重置密码</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/updatePwd/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setUserPwdById</span><span class="params">(<span class="meta">@PathVariable</span> Integer userId)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> userService.setUserPedById(userId);</span><br><span class="line">        <span class="keyword">return</span>  result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="分页查看角色"><a href="#分页查看角色" class="headerlink" title="分页查看角色"></a>分页查看角色</h1><h2 id="实体类-3"><a href="#实体类-3" class="headerlink" title="实体类"></a>实体类</h2><blockquote>
<p>这里的创建时间需要格式化一下时间，我使用了注解的方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 角色表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//implements Serializable 将 Role 对象正确地序列化，并将其存储到 Redis 缓存中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleDesc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String roleCode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 1 启用 0 禁用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String roleState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer createBy;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer updateBy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String getCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper映射-10"><a href="#mapper映射-10" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询角色行数</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">findRowRoleCount</span><span class="params">(Role role)</span>;</span><br><span class="line"><span class="comment">//    分页查询角色方法</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Role&gt; <span class="title function_">findRoleByPage</span><span class="params">(<span class="meta">@Param(&quot;page&quot;)</span> Page page, <span class="meta">@Param(&quot;role&quot;)</span> Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        查询角色行数--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        public Integer findRowRoleCount(Role role);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findRowRoleCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Integer&quot;</span>&gt;</span></span><br><span class="line">  select count(*) from role</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;roleName != null and roleName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and role_name like concat(&#x27;%&#x27;, #&#123;roleName&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;roleCode != null and roleCode != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and role_code like concat(&#x27;%&#x27;, #&#123;roleCode&#125;, &#x27;%&#x27;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;roleState != null and roleState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">      and role_state = #&#123;roleState&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        分页查询角色方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        public List&lt;Role&gt; findRoleByPage(@Param(&quot;page&quot;) Page page, @Param(&quot;role&quot;) Role role);--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findRoleByPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">  select t1.*, t2.user_code getCode from role t1, user_info t2</span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">  and t1.create_by = t2.user_id</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;role.roleName != null and role.roleName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.role_name like concat(&#x27;%&#x27;, #&#123;role.roleName&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;role.roleCode != null and role.roleCode != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.role_code like concat(&#x27;%&#x27;, #&#123;role.roleCode&#125;, &#x27;%&#x27;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;role.roleState != null and role.roleState != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">    and t1.role_state = #&#123;role.roleState&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  order by t1.create_time desc</span><br><span class="line">  limit #&#123;page.limitIndex&#125;,#&#123;page.pageSize&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-10"><a href="#service类-10" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询角色</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryRolePage</span><span class="params">(Page page,Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//    分页查询角色</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page <span class="title function_">queryRolePage</span><span class="params">(Page page, Role role)</span> &#123;</span><br><span class="line"><span class="comment">//        查询条数</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rowRoleCount</span> <span class="operator">=</span> roleMapper.findRowRoleCount(role);</span><br><span class="line"><span class="comment">//        System.out.println(rowRoleCount);</span></span><br><span class="line"><span class="comment">//        分页查询</span></span><br><span class="line">        List&lt;Role&gt; roleByPage = roleMapper.findRoleByPage(page, role);</span><br><span class="line">        page.setTotalNum(rowRoleCount);</span><br><span class="line">        page.setResultList(roleByPage);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-10"><a href="#控制类-10" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分页查询角色</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/role-page-list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">roleListPage</span><span class="params">(Page page, Role role)</span>&#123;</span><br><span class="line">    <span class="type">Page</span> <span class="variable">page1</span> <span class="operator">=</span> roleService.queryRolePage(page, role);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(page1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="添加角色"><a href="#添加角色" class="headerlink" title="添加角色"></a>添加角色</h1><h2 id="mapper映射-11"><a href="#mapper映射-11" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    添加角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertRole</span><span class="params">(Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //    添加角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public int insertRole(Role role);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertRole&quot;</span>&gt;</span></span><br><span class="line">    insert into role values (</span><br><span class="line">        null,#&#123;roleName&#125;,#&#123;roleDesc&#125;,#&#123;roleCode&#125;,0,#&#123;createBy&#125;,now(),null,null</span><br><span class="line">    )</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-11"><a href="#service类-11" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    添加角色</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savaRole</span><span class="params">(Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<blockquote>
<p>添加之后记得要清除缓存！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:role&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">savaRole</span><span class="params">(Role role)</span> &#123;</span><br><span class="line"><span class="comment">//        先进行判断角色是否存在</span></span><br><span class="line">        <span class="type">Role</span> <span class="variable">roleByNameOrCode</span> <span class="operator">=</span> roleMapper.findRoleByNameOrCode(role.getRoleName(), role.getRoleCode());</span><br><span class="line">        <span class="keyword">if</span>(roleByNameOrCode!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;角色已存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> roleMapper.insertRole(role);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;角色添加成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;角色已存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-11"><a href="#控制类-11" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"> <span class="keyword">private</span> TokenUtils tokenUtils;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//添加角色</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/role-add&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> Result <span class="title function_">saveRole</span><span class="params">(<span class="meta">@RequestBody</span> Role role, <span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span> &#123;</span><br><span class="line">     <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">     <span class="type">int</span> <span class="variable">createBy</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">     role.setCreateBy(createBy);</span><br><span class="line">     <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> roleService.savaRole(role);</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="删除角色"><a href="#删除角色" class="headerlink" title="删除角色"></a>删除角色</h1><h2 id="mapper映射-12"><a href="#mapper映射-12" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeRoleById</span><span class="params">(Integer RoleId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    删除角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int removeRoleById(Integer RoleId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;removeRoleById&quot;</span>&gt;</span></span><br><span class="line">        delete from role where role_id=#&#123;RoleId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-12"><a href="#service类-12" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除角色</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">removeRole</span><span class="params">(Integer roleId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现（将redis的缓存删除）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除角色</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleAuthMapper roleAuthMapper;</span><br><span class="line">    <span class="meta">@CacheEvict(key = &quot;&#x27;all:role&#x27;&quot;)</span></span><br><span class="line"><span class="comment">//    开启事务</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">removeRole</span><span class="params">(Integer roleId)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> roleMapper.removeRoleById(roleId);</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            roleAuthMapper.removeRoleAuthByRid(roleId);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(<span class="string">&quot;角色删除成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;角色删除失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-12"><a href="#控制类-12" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//    删除角色</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role-delete/&#123;roleId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">deleteRole</span><span class="params">(<span class="meta">@PathVariable</span> Integer roleId)</span>&#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> roleService.removeRole(roleId);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="查看所有权限菜单树以及该角色拥有的权限菜单树"><a href="#查看所有权限菜单树以及该角色拥有的权限菜单树" class="headerlink" title="查看所有权限菜单树以及该角色拥有的权限菜单树"></a>查看所有权限菜单树以及该角色拥有的权限菜单树</h1><h2 id="mapper映射-13"><a href="#mapper映射-13" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询所有权限菜单</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">findAllAuth</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    根据角色id获取权限id</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAuthIdByRid</span><span class="params">(Integer roleId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //    查询所有权限菜单--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public List&lt;Auth&gt; findAllAuth();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllAuth&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;auth&quot;</span>&gt;</span></span><br><span class="line">        select * from auth_info where auth_state=1 and auth_type!=3</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  //    根据角色id获取权限id--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public List&lt;Integer&gt; findAuthIdByRid(Integer roleId);--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAuthIdByRid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line">        select auth_id from role_auth where role_id =#&#123;roleId&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-13"><a href="#service类-13" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查找所有权限菜单树</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">allAuthTree</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询角色中的权限id</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">queryRoleAuthId</span><span class="params">(Integer roleId)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//查找所有权限的菜单树</span></span><br><span class="line"><span class="comment">//    指定缓存的键</span></span><br><span class="line">    <span class="meta">@Cacheable(key = &quot;&#x27;all:authTree&#x27;&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Auth&gt; <span class="title function_">allAuthTree</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        先查所有权限菜单</span></span><br><span class="line">        List&lt;Auth&gt; allAuthList = authMapper.findAllAuth();</span><br><span class="line"><span class="comment">//        转成菜单树</span></span><br><span class="line">        List&lt;Auth&gt; authTreeList = allAuthToAuthTree(allAuthList, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> authTreeList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查询角色中的权限id</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">queryRoleAuthId</span><span class="params">(Integer roleId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roleAuthMapper.findAuthIdByRid(roleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-13"><a href="#控制类-13" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Auth;</span><br><span class="line"><span class="keyword">import</span> com.pn.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.pn.service.AuthService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthService authService;</span><br><span class="line"><span class="comment">//    响应所有权限的菜单树</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/auth-tree&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">LoadAllAuth</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Auth&gt; allAuth = authService.allAuthTree();</span><br><span class="line">        <span class="keyword">return</span> Result.ok(allAuth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    查看该角色的菜单表</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role-auth&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">roleAuth</span><span class="params">(Integer roleId)</span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;id是&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(roleId);</span></span><br><span class="line">        List&lt;Integer&gt; authList = roleService.queryRoleAuthId(roleId);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;=============&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(authList);</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(authList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改角色权限"><a href="#修改角色权限" class="headerlink" title="修改角色权限"></a>修改角色权限</h1><h2 id="实体类-4"><a href="#实体类-4" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收给角色分配的请求json数据的dto类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AssignAuthDto</span> &#123;</span><br><span class="line"><span class="comment">//    角色id</span></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line"><span class="comment">//    权限id</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; authIds;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper映射-14"><a href="#mapper映射-14" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.pn.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.pn.entity.UserRole;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRoleMapper</span> &#123;</span><br><span class="line"><span class="comment">//    分配之前应该先将该用户原有的角色进行删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUserRoleByUid</span><span class="params">(Integer userId)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    根据用户的id，角色id，给用户分配角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">assignUserRole</span><span class="params">(UserRole userRole)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.pn.mapper.UserRoleMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    //    分配之前应该先将该用户原有的角色进行删除--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int deleteUserRoleByUid(Integer userId);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserRoleByUid&quot;</span>&gt;</span></span><br><span class="line">        delete from user_role where user_id=#&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    //    根据用户的id，角色id，给用户分配角色--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public int assignUserRole(UserRole userRole);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;assignUserRole&quot;</span>&gt;</span></span><br><span class="line">         insert into user_role values(null,#&#123;roleId&#125;,#&#123;userId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-14"><a href="#service类-14" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分配角色的权限</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveRoleAuth</span><span class="params">(AssignAuthDto assignAuthDto)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    分配角色的权限</span></span><br><span class="line"><span class="comment">//    开启事务</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveRoleAuth</span><span class="params">(AssignAuthDto assignAuthDto)</span> &#123;</span><br><span class="line"><span class="comment">//        先删除该角色的所有权限</span></span><br><span class="line">        roleAuthMapper.removeRoleAuthByRid(assignAuthDto.getRoleId());</span><br><span class="line"><span class="comment">//分配角色</span></span><br><span class="line">        List&lt;Integer&gt; authList = assignAuthDto.getAuthIds();</span><br><span class="line">        <span class="keyword">for</span> (Integer authId:authList)&#123;</span><br><span class="line">            <span class="type">RoleAuth</span> <span class="variable">roleAuth</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleAuth</span>();</span><br><span class="line">            roleAuth.setRoleId(assignAuthDto.getRoleId());</span><br><span class="line">            roleAuth.setAuthId(authId);</span><br><span class="line">            roleAuthMapper.insertRoleAuth(roleAuth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-14"><a href="#控制类-14" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    给角色分配权限</span></span><br><span class="line"><span class="comment">//    传来的是json串数据&#123;roleId: &quot;17&quot;, authIds: [61, 62]&#125;</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/auth-grant&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">grantAuth</span><span class="params">(<span class="meta">@RequestBody</span> AssignAuthDto assignAuthDto)</span>&#123;</span><br><span class="line">        roleService.saveRoleAuth(assignAuthDto);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;权限分配成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改角色描述"><a href="#修改角色描述" class="headerlink" title="修改角色描述"></a>修改角色描述</h1><h2 id="mapper映射-15"><a href="#mapper映射-15" class="headerlink" title="mapper映射"></a>mapper映射</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改角色描述</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">setDescByRid</span><span class="params">(Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    //修改角色描述--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    public  int setDescByRid(Role role);--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;setDescByRid&quot;</span>&gt;</span></span><br><span class="line">        update role set role_desc=#&#123;roleDesc&#125;,update_by=#&#123;updateBy&#125;,update_time=now()</span><br><span class="line">        where role_id=#&#123;roleId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="service类-15"><a href="#service类-15" class="headerlink" title="service类"></a>service类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改角色描述</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setRoleByRid</span><span class="params">(Role role)</span>;</span><br></pre></td></tr></table></figure>

<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改角色描述</span></span><br><span class="line"><span class="meta">@CacheEvict(key = &quot;&#x27;all:role&#x27;&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">setRoleByRid</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> roleMapper.setDescByRid(role);</span><br><span class="line">    <span class="keyword">if</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(<span class="string">&quot;角色描述修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.err(Result.CODE_ERR_BUSINESS,<span class="string">&quot;角色描述修改失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制类-15"><a href="#控制类-15" class="headerlink" title="控制类"></a>控制类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    修改角色描述</span></span><br><span class="line"><span class="comment">//    传来的还是json&#123;roleId: 18, roleName: &quot;测试&quot;, roleDesc: &quot;&quot;&#125;</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/role-update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">updateRoleMs</span><span class="params">(<span class="meta">@RequestBody</span> Role role,<span class="meta">@RequestHeader(WarehouseConstants.HEADER_TOKEN_NAME)</span> String token)</span>&#123;</span><br><span class="line">        <span class="type">CurrentUser</span> <span class="variable">currentUser</span> <span class="operator">=</span> tokenUtils.getCurrentUser(token);</span><br><span class="line">        <span class="type">int</span> <span class="variable">updateUserId</span> <span class="operator">=</span> currentUser.getUserId();</span><br><span class="line">        role.setUpdateBy(updateUserId);</span><br><span class="line">        <span class="keyword">return</span> roleService.setRoleByRid(role);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>项目记录</category>
      </categories>
  </entry>
</search>
